# ifndef BMP_H
# define BMP_H

/*bitmap-file header */
#pragma pack(1)//Single byte alignment
typedef struct tagBITMAPFILEHEADER
{
 unsigned char  bfType[2];//file format
    unsigned int   bfSize;        // File size in bytes (2-5 bytes)
    unsigned short bfReserved1;   // Reserved, must be set to 0 (6-7 bytes)
    unsigned short bfReserved2;   // Reserved, must be set to 0 (8-9 bytes)
    unsigned int   bfOffBits;     // Offset from file header to pixel data (10-13 bytes)
}BITMAPFILEHEADER;
#pragma pack()

/*Bitmap header*/
#pragma pack(1)
typedef struct tagBITMAPINFOHEADER
{
    unsigned int    biSize;          // Size of this structure (14-17 bytes)
    long            biWidth;         // Image width (18-21 bytes)
    long            biHeight;        // Image height (22-25 bytes)
    unsigned short  biPlanes;        // Represents the plane genus of bmp picture, obviously the display has only one plane, so it is equal to 1 (26-27 bytes)
    unsigned short  biBitCount;      // The number of bits occupied by a pixel, (28-29 bytes) when biBitCount=24, the BMP image is a 24Bit true color image without palette items.
    unsigned int    biCompression;   // Describes the type of image data compression. 0 is not compressed. (30-33 bytes)
    unsigned int    biSizeImage;     // The size of pixel data, which should be equal to bfsize bfoffbits (34-37 bytes) in the file header structure above
    long            biXPelsPerMeter; // Indicates the horizontal resolution in pixels per meter. Generally 0 (38-41 bytes)
    long            biYPelsPerMeter; // Indicates the vertical resolution in pixels per meter. Generally 0 (42-45 bytes)
    unsigned int    biClrUsed;       // Describes the number of color indexes in the color table that the bitmap actually uses (if set to 0, all palette items are used). (46-49 bytes)
    unsigned int    biClrImportant;  // Indicates the number of color indexes that have important influence on image display. If it is 0, it means that they are all important. (50-53 bytes)
}BITMAPINFOHEADER;
#pragma pack()

/*Palette structure*/
#pragma pack(1)
typedef struct tagRGBQUAD
{
    unsigned char rgbBlue;   //Blue component of the color (value range 0-255)
    unsigned char rgbGreen;  //Green component of the color (value range 0-255)
    unsigned char rgbRed;    //Red component of the color (value range 0-255)
    unsigned char rgbReserved;// Reserved, must be 0
}RGBQUAD;
#pragma pack()

#endif

#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>


int main(){
	unsigned char ImgData[3000][3];//Se define un array de 3000x3 para la Imagen 1
	unsigned char ImgData2[3000];//Se define un array de 3000x1 para la Imagen 2
	int i, j, k;
	FILE *Imagen1, *ImagenGris, *ImagenConv;
	BITMAPFILEHEADER *fileHeader;
	BITMAPINFOHEADER *infoHeader;
	RGBQUAD * RGB;
	int opcion=0;
	double kernel[3][3]={-1,-1,-1,-1,8,-1,-1,-1,-1};
	int peso=1;
	int conv[3][3];
	if ((Imagen1 = fopen("blackbuck.bmp", "rb")) == NULL) { //Agregar verificacion 424D
        printf("The input file could not be opened\n");
    } else {
	printf("Ingrese la opcion 1 para el ejercicio a e ingrese 2 para el ejercicio b:");
	scanf("%d", &opcion);
	if(opcion == 1){ //Escala de Grises
		ImagenGris = fopen("Grises.bmp", "wb");
		//Genera la asignación dinámica de la memoria para FileHeader e InfoHeader y lee la información de los bloque de datos del archivo bmp.
		fileHeader = (BITMAPFILEHEADER *)malloc(sizeof(BITMAPFILEHEADER));
		infoHeader = (BITMAPINFOHEADER *)malloc(sizeof(BITMAPINFOHEADER));
		fread(fileHeader, sizeof(BITMAPFILEHEADER), 1, Imagen1);
		fread(infoHeader, sizeof(BITMAPINFOHEADER), 1, Imagen1);
		int imagen2[infoHeader->biWidth][infoHeader->biHeight];
   
		//Debido a que el procesamiento de la imagen de 24 bits la convierte en una de 8 bits, se divide el tamaño en infoHeader en 3
		infoHeader->biBitCount = infoHeader->biBitCount/3;
		//Se calcula el número de bites que ocupa.
		infoHeader->biSizeImage = infoHeader->biHeight;

		RGB = (RGBQUAD *)malloc(256 * sizeof(RGBQUAD));
		for (i = 0; i < 256; i++){
			RGB[i].rgbBlue = RGB[i].rgbGreen = RGB[i].rgbRed = i; //Se asignan los valores RGB a la paleta de colores
		}
		//Se lee la información del header
		fwrite(fileHeader, sizeof(BITMAPFILEHEADER), 1,   ImagenGris);
		fwrite(infoHeader, sizeof(BITMAPINFOHEADER), 1,   ImagenGris);
		fwrite(RGB     , sizeof(RGBQUAD)         , 256, ImagenGris);
		//Se leen los pixeles y los valores RGB y se convierten en los valores equivalentes para la escala de grises
		for (i = 0; i < infoHeader->biHeight; i++){
			for (j = 0; j < (infoHeader->biWidth); j++){
				for (k = 0; k < 3; k++){
					fread(&ImgData[j][k], 1, 1, Imagen1);//Se lee uno por uno y se guarda el valor en el array
				}
			}
			//Se modifican los datos de ImgData2 mediante la fórmula Gray = R0.299 + G0.587 + B*0.114
			for (j = 0; j < (infoHeader->biWidth); j++) {
				imagen2[i][j] = (int)((float)ImgData[j][0] * 0.114 +(float)ImgData[j][1] * 0.587 +(float)ImgData[j][2] * 0.299  );
			}

		}
		for (i = 0; i < infoHeader->biHeight; i++){
			for(j = 0; j < (infoHeader->biWidth); j++){
				ImgData2[j]=imagen2[i][j];
			}
			//Se escribe la información en ImagenGris
			fwrite(ImgData2, j, 1, ImagenGris);
		}
free(fileHeader);
free(infoHeader);
free(RGB);
fclose(Imagen1);
fclose(ImagenGris);
printf("Procesamiento de escala de grises exitosa\n");
return 0;
}
else if(opcion == 2){
	ImagenConv = fopen("Convolucion.bmp", "wb");
		//Genera la asignación dinámica de la memoria para FileHeader e InfoHeader y lee la información de los bloque de datos del archivo bmp.
		fileHeader = (BITMAPFILEHEADER *)malloc(sizeof(BITMAPFILEHEADER));
		infoHeader = (BITMAPINFOHEADER *)malloc(sizeof(BITMAPINFOHEADER));
		fread(fileHeader, sizeof(BITMAPFILEHEADER), 1, Imagen1);
		fread(infoHeader, sizeof(BITMAPINFOHEADER), 1, Imagen1);
		int imagen2[infoHeader->biWidth][infoHeader->biHeight];
		//int imagen3[infoHeader->biWidth-2][infoHeader->biHeight-2];
   
		//Debido a que el procesamiento de la imagen de 24 bits la convierte en una de 8 bits, se divide el tamaño en infoHeader en 3
		infoHeader->biBitCount = infoHeader->biBitCount/3;
		//Se calcula el número de bites que ocupa.
		infoHeader->biSizeImage = infoHeader->biHeight;

		RGB = (RGBQUAD *)malloc(256 * sizeof(RGBQUAD));
		for (i = 0; i < 256; i++){
			RGB[i].rgbBlue = RGB[i].rgbGreen = RGB[i].rgbRed = i; //Se asignan los valores RGB a la paleta de colores
		}
		//Se lee la información del header
		fwrite(fileHeader, sizeof(BITMAPFILEHEADER), 1,   ImagenConv);
		fwrite(infoHeader, sizeof(BITMAPINFOHEADER), 1,   ImagenConv);
		fwrite(RGB     , sizeof(RGBQUAD)         , 256, ImagenConv);
		//Se leen los pixeles y los valores RGB y se convierten en los valores equivalentes para la escala de grises
		for (i = 0; i < infoHeader->biHeight; i++){
			for (j = 0; j < (infoHeader->biWidth); j++){
				for (k = 0; k < 3; k++){
					fread(&ImgData[j][k], 1, 1, Imagen1);//Se lee uno por uno y se guarda el valor en el array
				}
			}
			//Se modifican los datos de ImgData2 mediante la fórmula Gray = R0.299 + G0.587 + B*0.114
			for (j = 0; j < (infoHeader->biWidth); j++) {
				imagen2[i][j] = (int)((float)ImgData[j][0] * 0.114 +(float)ImgData[j][1] * 0.587 +(float)ImgData[j][2] * 0.299  );
			}
			
		}
		for (i = 0; i < infoHeader->biHeight; i++){
			for(j=0;j< infoHeader->biWidth;j++){
				imagen2[i][j] = (int)(((float)imagen2[i][j] * kernel[0][0] +
										(float)imagen2[i][j+1] * kernel[0][1] +
										(float)imagen2[i][j+2] * kernel[0][2] +
										(float)imagen2[i+1][j] * kernel[1][0] +
										(float)imagen2[i+1][j+1] * kernel[1][1] +
										(float)imagen2[i+1][j+2] * kernel[1][2] +
										(float)imagen2[i+2][j] * kernel[2][0] +
										(float)imagen2[i+2][j+1] * kernel[2][1] +
										(float)imagen2[i+2][j+2] * kernel[2][2] ) / peso
										);
}
}
		for (i = 0; i < infoHeader->biHeight; i++){
			for(j = 0; j < (infoHeader->biWidth); j++){
				ImgData2[j]=imagen2[i][j];
			}
			//Se escribe la información en ImagenGris
			fwrite(ImgData2, j, 1, ImagenConv);
		}
free(fileHeader);
free(infoHeader);
free(RGB);
fclose(Imagen1);
fclose(ImagenConv);
printf("Convolucion exitosa\n");
return 0;
}
}
}
