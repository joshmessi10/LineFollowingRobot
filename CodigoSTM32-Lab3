/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define F_CLK  72000000UL
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
volatile uint32_t cuentarl=0;//cuantas veces se ha reiniciado el timer (reload)
volatile uint32_t T1=0;//ciclos de reloj en el counter cuando se detecta el primer flanco
volatile uint32_t T2=0;//ciclos de reloj en el counter cuando se detecta el segundo flanco
volatile uint32_t ciclos=0;//ciclos de reloj entre flancos
volatile uint32_t frecuencia=0;
uint32_t frectemp=0;
char formato=0, bot=0;
volatile uint8_t MSG[35] = {'\0'};
volatile unsigned char flanco=0;//estado de flanco, ya sea el primero o el segundo de ellos.
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  initLCD();
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 frectemp=frecuencia;
 HAL_Delay(10);
 bot=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9);
 if(bot==1){
 formato=formato+1;
 if(formato>3){
 formato=0;
 }
 }
 switch(formato){
 case 0:
 impAuto(frectemp);
 break;
 case 1:
 impHz(frectemp);
 break;
 case 2:
 impKHz(frectemp);
 break;
 case 3:
 impMHz(frectemp);
 break;
 default:
 break;
 }

 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 HAL_Delay(10);
 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 HAL_Delay(10);
 comando(0x01);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  cuentarl++;

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)//input capture, captura valores.
{

if(flanco == 0)
   {
       T1 = TIM2->CCR1;
       cuentarl = 0;
       flanco = 1;
   }
   else if(flanco == 1)
   {
       T2 = TIM2->CCR1;//Â¿Y si la frecuencia es demaciaaaaaaado alta?, entonces calcular en el main no seria exacto.
       ciclos = (T2 + (cuentarl * 65536)) - T1;//ciclos entre flancos
       frecuencia = (uint32_t)(F_CLK/ciclos);
       flanco = 0;
   }
HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
}

void impAuto(uint32_t frec){
if(frec>999999){
 frec=(uint32_t)(frec/1000000);
 sprintf(MSG, "frec=%luMHz", frec);
 }
 else if (frec>999){
 frec=(uint32_t)(frec/1000);
 sprintf(MSG, "frec=%luKHz", frec);
 }
 else{
 sprintf(MSG, "frec=%luHz", frec);
 }
 LCD(MSG);
 pLCD(1,0);
 frec=(frec*100)/1000;
 sprintf(MSG, "Escala:%lu", frec);
 LCD(MSG);
 dato(37);
}

void impHz(uint32_t frec){
uint32_t porc=0;
porc=(frec*100)/1000;
if(frec>999999){
 frec=(uint32_t)(frec/1000000);
 sprintf(MSG, "frec=%lux10^6Hz", frec);
 }
 else if (frec>999){
 frec=(uint32_t)(frec/1000);
 sprintf(MSG, "frec=%lux10^3Hz", frec);
 }
 else{
 sprintf(MSG, "frec=%luHz", frec);
 }
 LCD(MSG);
 pLCD(1,0);
 sprintf(MSG, "Escala:%lu ", porc);
 LCD(MSG);
 dato(37);
}

void impKHz(uint32_t frec){
uint32_t porc=0;
porc=(frec*100)/1000000;
if(frec>999999){
 frec=(uint32_t)(frec/1000000);
 sprintf(MSG, "frec=%lux10^3KHz", frec);
 }
 else if (frec>999){
 frec=(uint32_t)(frec/1000);
 sprintf(MSG, "frec=%luKHz", frec);
 }
 else{
 sprintf(MSG, "frec=%lux10^-3KHz", frec);
 }
 LCD(MSG);
 pLCD(1,0);
 sprintf(MSG, "Escala:%lu ", porc);
 LCD(MSG);
 dato(37);
}

void impMHz(uint32_t frec){
uint32_t porc=0;
porc=frec/10000000;
if(frec>999999){
 frec=(uint32_t)(frec/1000000);
 sprintf(MSG, "frec=%luMHz", frec);
 }
 else if (frec>999){
 frec=(uint32_t)(frec/1000);
 sprintf(MSG, "frec=%lux10^-3MHz", frec);
 }
 else{
 sprintf(MSG, "frec=%lux10^-6MHz", frec);
 }
 LCD(MSG);
 pLCD(1,0);
 sprintf(MSG, "Escala:%lu ", porc);
 LCD(MSG);
 dato(37);
}

void comando (unsigned char cmd){
unsigned char t1,t2,i;
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
t1=(cmd>>4)&0x0F;
for(i=0;i<4;i++){
t2=t1&0x01;
switch(i){
case 0:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
break;
case 1:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
break;
case 2:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
break;
case 3:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
break;
}
t1=t1>>1;
}
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
HAL_Delay(1);
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
HAL_Delay(1);
t1=cmd&0x0F;
for(i=0;i<4;i++){
t2=t1&0x01;
switch(i){
case 0:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
break;
case 1:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
break;
case 2:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
break;
case 3:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
break;
}
t1=t1>>1;
}
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
HAL_Delay(1);
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
HAL_Delay(1);
}

void dato(unsigned char cmd){
unsigned char t1,t2,i;
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
t1=(cmd>>4)&0x0F;
for(i=0;i<4;i++){
t2=t1&0x01;
switch(i){
case 0:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
break;
case 1:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
break;
case 2:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
break;
case 3:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
break;
}
t1=t1>>1;
}
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
HAL_Delay(1);
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
HAL_Delay(1);
t1=cmd&0x0F;
for(i=0;i<4;i++){
t2=t1&0x01;
switch(i){
case 0:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
break;
case 1:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
break;
case 2:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
break;
case 3:
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
break;
}
t1=t1>>1;
}
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
HAL_Delay(1);
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
HAL_Delay(1);
}

void initLCD(){
HAL_Delay(20);
comando(0x28);
HAL_Delay(4);
comando(0x01);
HAL_Delay(1);
comando(0x02);
comando(0x0C);
comando(0x06);
comando(0x80);

}
void LCD(char *frase){
unsigned char cont=0;
while(frase[cont] != 0){
dato(frase[cont++]);
}
}

void pLCD(char fil, char col){//ubica el cursor
if(fil==0)
{
col|=0x80;
}
else
{
col|=0xC0;
}
comando(col);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
