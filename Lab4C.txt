#include <stdio.h>
#include <stdlib.h>
#include<windows.h>
#include <time.h>


int main(int argc, char *argv[]) {
	
	DCB dcb;
	int hora, minuto, segundo, mes, year, dia, nBytes,nBytes2,opcion=0;
	unsigned long int input = 0,numClave=0,valor=0,tiempoInt=0;
	long int nBytesMandados, lpEvtMask;
	OVERLAPPED listo;
	HANDLE hComm;
	char dato[32]={'\0'}, respuesta[2];
	
	hComm=CreateFileA("\\\\.\\COM3",GENERIC_READ | GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);//abre el puerto
	
	if (hComm == INVALID_HANDLE_VALUE)
      printf("Error in opening serial port\n");
  else
      printf("Opening serial port successful\n");
      
//================================================================================================
	
	GetCommState(hComm, &dcb);
	printf("\nConfig por defecto: BaudRate = %d, ByteSize = %d, Paridad = %d, Bit de parada = %d\n", dcb.BaudRate, dcb.ByteSize, dcb.Parity,dcb.StopBits);
	
   BOOL fSuccess;
   dcb.BaudRate = 9600;     //  baud rate
   dcb.ByteSize = 8;             //  data size, xmit and rcv
   dcb.Parity   = 0;      //  parity bit
   dcb.StopBits = 0;
   SetCommState(hComm, &dcb);
   
   fSuccess = SetCommState(hComm, &dcb);

   if (!fSuccess) 
   {
      //  Handle the error.
      printf ("SetCommState failed with error %d.\n", GetLastError());
      return (3);
   }
   printf("\nConfig nueva: BaudRate = %d, ByteSize = %d, Paridad = %d, Bit de parada = %d\n", dcb.BaudRate, dcb.ByteSize, dcb.Parity,dcb.StopBits);

//================================================================================================
	char clave[] = "0xF103C86";
//================================================================================================
    while(1){
    printf("Digite 1 para cambiar la clave, 2 para sincronizar relojes");
	scanf("%d",&opcion);
	if(opcion==1){
		printf("Digite la clave nueva:");
		scanf("%s",&clave);
	opcion= 2;	
	}
	if(opcion==2){
		time_t ya;
		time(&ya);
	
		
	
		struct tm *tiempo = localtime(&ya);
		hora = tiempo->tm_hour;         // obtener horas desde la medianoche (0-23)
	    minuto = tiempo->tm_min;        // obtener minutos pasados después de la hora (0-59)
	    segundo = tiempo->tm_sec;        // obtener segundos pasados después de un minuto (0-59)
	    dia = tiempo->tm_mday;           
	    mes = tiempo->tm_mon + 1;     
	    year = tiempo->tm_year + 1900-2000; 
	    printf("La hora es: %02d:%02d:%02d ", hora, minuto, segundo);
	     printf("La fecha: %d/%d/%d\n", dia, mes, year);
	     
	     unsigned long int tiempoString[3];
		tiempoString[0] = hora;
		tiempoString[1] = minuto;
		tiempoString[2] = segundo;
		tiempoInt = (tiempoString[0])*10000+(tiempoString[1])*100+(tiempoString[2]);
		printf("Tiempo Int:%lu\n",tiempoInt);
		char lpBuffer[8];
		sprintf(lpBuffer,"%d",2);
		strcat(lpBuffer," ");
		char tiempoChar[6];
		sprintf(tiempoChar,"%lu",tiempoInt);
		strcat(lpBuffer,tiempoChar);
		nBytes=sizeof(lpBuffer);
		fSuccess = WriteFile(hComm,lpBuffer,nBytes,&nBytesMandados,NULL);
		if(!fSuccess){
    	printf("Hubo un error al enviar el dato");
		}
    	else{
    		printf("Se enviaron %d Bytes",nBytesMandados);
		}
    
	    SetCommMask(hComm,EV_RXCHAR);
	    fSuccess = WaitCommEvent(hComm, &lpEvtMask, NULL);
	    if (fSuccess==TRUE){
			ReadFile(hComm,respuesta,2,&nBytesMandados,NULL);
			printf("\nRecibido un: %c%c\n",respuesta[0],respuesta[1]);
		}
		
		char lpBuffer2[10];
		sprintf(lpBuffer2,"%d",1);
		strcat(lpBuffer2, " ");
		strcat(lpBuffer2, clave);
			char *claveChar = strtok(lpBuffer2, " ");
			claveChar = strtok(NULL, " ");
			numClave = (int)strtol(claveChar, NULL, 0);
			printf("\nClave:%08X\n", numClave);
			unsigned long int token = numClave^tiempoInt;
			printf("\nToken:%08X\n", token);
			
			nBytes2=sizeof(lpBuffer2);
		fSuccess = WriteFile(hComm,lpBuffer2,nBytes2,&nBytesMandados,NULL);
		if(!fSuccess){
    	printf("Hubo un error al enviar el dato");
		}
    	else{
    		printf("Se enviaron %d Bytes",nBytesMandados);
		}
    
	    SetCommMask(hComm,EV_RXCHAR);
	    fSuccess = WaitCommEvent(hComm, &lpEvtMask, NULL);
		 if (fSuccess==TRUE){
			ReadFile(hComm,respuesta,2,&nBytesMandados,NULL);
			printf("\nRecibido un: %c%c\n",respuesta[0],respuesta[1]);
		}
		printf("Ingrese su TOKEN>>>");
		scanf("%08X",&input);
		valor = input ^ numClave;
		if(valor==tiempo){
			printf("--------------Clave Aceptada------------------\n");
		}
		else{
			printf("--------------Clave Rechazada--------------\n");
		} 
		opcion=3	
	}
	if(opcion==3){
		time_t k;
		time(&k);
		if(k>=ya+10){
			k=k+10;
			opcion = 2;
}
}
		
	}
    
//================================================================================================
    
   
    
    
    
    
//================================================================================================
    
    
    
    
    
    
    
    
    
    printf("\nTermina el programa");
    CloseHandle(hComm);//cerrar el puerto
	return 0;
}
