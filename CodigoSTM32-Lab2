/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
    /* USER CODE BEGIN 2 */
    initLCD();
    initLCD();
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    unsigned char in=1;
    while (1)
    {
  	  HAL_Delay(2);
  	  in=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9);
  	  if(in==0){
  		  cuenta();
  	  }

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
  }

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
char mensaje[20];
void comando (unsigned char cmd){
	unsigned char t1,t2,i;
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
	t1=(cmd>>4)&0x0F;
	for(i=0;i<4;i++){
		t2=t1&0x01;
		switch(i){
		case 0:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
		break;
		case 1:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
		break;
		case 2:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
		break;
		case 3:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
		break;
		}
		t1=t1>>1;
	}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
	HAL_Delay(1);
	t1=cmd&0x0F;
	for(i=0;i<4;i++){
			t2=t1&0x01;
			switch(i){
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
			break;
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
			break;
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
			break;
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
			break;
			}
			t1=t1>>1;
		}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
		HAL_Delay(1);
}

void dato(unsigned char cmd){
	unsigned char t1,t2,i;
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
	t1=(cmd>>4)&0x0F;
	for(i=0;i<4;i++){
		t2=t1&0x01;
		switch(i){
		case 0:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
		break;
		case 1:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
		break;
		case 2:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
		break;
		case 3:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
		break;
		}
		t1=t1>>1;
	}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
	HAL_Delay(1);
	t1=cmd&0x0F;
	for(i=0;i<4;i++){
			t2=t1&0x01;
			switch(i){
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,t2);
			break;
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,t2);
			break;
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,t2);
			break;
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,t2);
			break;
			}
			t1=t1>>1;
		}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
		HAL_Delay(1);
}

void initLCD(){
	HAL_Delay(20);
	comando(0x28);
	HAL_Delay(4);
	comando(0x01);
	HAL_Delay(1);
	comando(0x02);
	comando(0x0C);
	comando(0x06);
	comando(0x80);

}

void num(unsigned int n){
		dato(n+48);

}
void cuenta(){
	unsigned long clave = 0xF103C86, tiempo=0, token=0, ref=0;
	int seg1=0, seg2=0, seg3=0;
	for(seg3=0;seg3<10;seg3++){
		for(seg2=0;seg2<10;seg2++){
				for(seg1=0;seg1<10;seg1++){
					tiempo=seg3*100+seg2*10+seg1*1;
					if(tiempo==0){
						token=tiempo^clave;
						sprintf(mensaje,"%08X",token);
						LCD(mensaje);
					}
					//num(seg3);
					//num(seg2);
					//num(seg1);
					if(tiempo == ref+10){
						comando(0x01);
						token=tiempo^clave;
						sprintf(mensaje,"%08X",token);
						LCD(mensaje);
						ref=ref+10;
					}

					HAL_Delay(1000);

					}

					}

				}
		}




void LCD(char *frase){
	unsigned char cont=0;
	while(frase[cont] != 0){
		dato(frase[cont++]);
	}
}

void hexToString(unsigned long numero){
	unsigned char num2=0;
	num(num2);
	for(int i=0;i<7;i++){
			num2=numero&0x0000001;
			switch(i){
			case 0:
				num(num2);
			break;
			case 1:
				num(num2);
			break;
			case 2:
				num(num2);
			break;
			case 3:
				num(num2);
			break;
			case 4:
				num(num2);
			break;
			case 5:
				num(num2);
			break;
			case 6:
				num(num2);
			break;
			}
			numero=numero>>1;
		}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
