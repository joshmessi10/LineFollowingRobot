
LedsConTimmers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d4  0800b2d4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2dc  0800b2dc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b2e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001668  20000200  0800b4e4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001868  0800b4e4  00021868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198b7  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003877  00000000  00000000  00039ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab0a  00000000  00000000  0003fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ce1  00000000  00000000  0005a6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d2e2  00000000  00000000  000743c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001116a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f0  00000000  00000000  001116f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000200 	.word	0x20000200
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b250 	.word	0x0800b250

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000204 	.word	0x20000204
 80001d0:	0800b250 	.word	0x0800b250

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 fafe 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f838 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fa62 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 fa40 	bl	800097c <MX_DMA_Init>
  MX_TIM2_Init();
 80004fc:	f000 f946 	bl	800078c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000500:	f00a f964 	bl	800a7cc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000504:	f000 f89a 	bl	800063c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000508:	f000 f98c 	bl	8000824 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800050c:	f000 fa0c 	bl	8000928 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc, 7);
 8000510:	2207      	movs	r2, #7
 8000512:	490f      	ldr	r1, [pc, #60]	; (8000550 <main+0x68>)
 8000514:	480f      	ldr	r0, [pc, #60]	; (8000554 <main+0x6c>)
 8000516:	f001 fbc3 	bl	8001ca0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800051a:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x70>)
 800051c:	f004 fdb8 	bl	8005090 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0x74>)
 8000522:	f004 fd5b 	bl	8004fdc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000526:	2100      	movs	r1, #0
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x74>)
 800052a:	f004 fe6d 	bl	8005208 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800052e:	2104      	movs	r1, #4
 8000530:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x74>)
 8000532:	f004 fe69 	bl	8005208 <HAL_TIM_PWM_Start>
  TIM3->CCR2=0;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <main+0x78>)
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1=0;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x78>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //conexionHandler();
	  ledHandler();
 8000542:	f000 fc4f 	bl	8000de4 <ledHandler>
	  //for(int i=0; i<5;i++){

		 // led[i]=(vueltas>>i);
	  //}

	  cuentaHandler();
 8000546:	f001 f863 	bl	8001610 <cuentaHandler>
	  seguidorHandler();
 800054a:	f000 ff4b 	bl	80013e4 <seguidorHandler>
  {
 800054e:	e7f8      	b.n	8000542 <main+0x5a>
 8000550:	20000408 	.word	0x20000408
 8000554:	2000021c 	.word	0x2000021c
 8000558:	200002c4 	.word	0x200002c4
 800055c:	2000030c 	.word	0x2000030c
 8000560:	40000400 	.word	0x40000400

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f00a fe64 	bl	800b240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <SystemClock_Config+0xd0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd4>)
 80005b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005d8:	2319      	movs	r3, #25
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 f84c 	bl	800468c <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fa:	f001 f84b 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f004 faae 	bl	8004b7c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f001 f835 	bl	8001694 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b4c      	ldr	r3, [pc, #304]	; (8000780 <MX_ADC1_Init+0x144>)
 8000650:	4a4c      	ldr	r2, [pc, #304]	; (8000784 <MX_ADC1_Init+0x148>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000654:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <MX_ADC1_Init+0x144>)
 8000656:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800065c:	4b48      	ldr	r3, [pc, #288]	; (8000780 <MX_ADC1_Init+0x144>)
 800065e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_ADC1_Init+0x144>)
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066a:	4b45      	ldr	r3, [pc, #276]	; (8000780 <MX_ADC1_Init+0x144>)
 800066c:	2201      	movs	r2, #1
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	4b43      	ldr	r3, [pc, #268]	; (8000780 <MX_ADC1_Init+0x144>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <MX_ADC1_Init+0x144>)
 800067a:	2200      	movs	r2, #0
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067e:	4b40      	ldr	r3, [pc, #256]	; (8000780 <MX_ADC1_Init+0x144>)
 8000680:	4a41      	ldr	r2, [pc, #260]	; (8000788 <MX_ADC1_Init+0x14c>)
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <MX_ADC1_Init+0x144>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 800068a:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <MX_ADC1_Init+0x144>)
 800068c:	2207      	movs	r2, #7
 800068e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <MX_ADC1_Init+0x144>)
 8000692:	2201      	movs	r2, #1
 8000694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <MX_ADC1_Init+0x144>)
 800069a:	2201      	movs	r2, #1
 800069c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	4838      	ldr	r0, [pc, #224]	; (8000780 <MX_ADC1_Init+0x144>)
 80006a0:	f001 faba 	bl	8001c18 <HAL_ADC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006aa:	f000 fff3 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4830      	ldr	r0, [pc, #192]	; (8000780 <MX_ADC1_Init+0x144>)
 80006c0:	f001 fbfc 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006ca:	f000 ffe3 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4829      	ldr	r0, [pc, #164]	; (8000780 <MX_ADC1_Init+0x144>)
 80006dc:	f001 fbee 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006e6:	f000 ffd5 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4822      	ldr	r0, [pc, #136]	; (8000780 <MX_ADC1_Init+0x144>)
 80006f8:	f001 fbe0 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000702:	f000 ffc7 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000706:	2303      	movs	r3, #3
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800070a:	2304      	movs	r3, #4
 800070c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	481b      	ldr	r0, [pc, #108]	; (8000780 <MX_ADC1_Init+0x144>)
 8000714:	f001 fbd2 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800071e:	f000 ffb9 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000722:	2304      	movs	r3, #4
 8000724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000726:	2305      	movs	r3, #5
 8000728:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_ADC1_Init+0x144>)
 8000730:	f001 fbc4 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800073a:	f000 ffab 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800073e:	2305      	movs	r3, #5
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000742:	2306      	movs	r3, #6
 8000744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_ADC1_Init+0x144>)
 800074c:	f001 fbb6 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000756:	f000 ff9d 	bl	8001694 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	2306      	movs	r3, #6
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800075e:	2307      	movs	r3, #7
 8000760:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC1_Init+0x144>)
 8000768:	f001 fba8 	bl	8001ebc <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000772:	f000 ff8f 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000021c 	.word	0x2000021c
 8000784:	40012000 	.word	0x40012000
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_TIM2_Init+0x94>)
 80007aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_TIM2_Init+0x94>)
 80007b2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_TIM2_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_TIM2_Init+0x94>)
 80007c0:	2209      	movs	r2, #9
 80007c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_TIM2_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_TIM2_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d0:	4813      	ldr	r0, [pc, #76]	; (8000820 <MX_TIM2_Init+0x94>)
 80007d2:	f004 fbb3 	bl	8004f3c <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007dc:	f000 ff5a 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_TIM2_Init+0x94>)
 80007ee:	f004 ff85 	bl	80056fc <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007f8:	f000 ff4c 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_TIM2_Init+0x94>)
 800080a:	f005 fb33 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 ff3e 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200002c4 	.word	0x200002c4

08000824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000856:	4a33      	ldr	r2, [pc, #204]	; (8000924 <MX_TIM3_Init+0x100>)
 8000858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800-1;
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_TIM3_Init+0xfc>)
 800085c:	f244 129f 	movw	r2, #16799	; 0x419f
 8000860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_TIM3_Init+0xfc>)
 800086a:	2263      	movs	r2, #99	; 0x63
 800086c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_TIM3_Init+0xfc>)
 800087c:	f004 fb5e 	bl	8004f3c <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000886:	f000 ff05 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000894:	4619      	mov	r1, r3
 8000896:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000898:	f004 ff30 	bl	80056fc <HAL_TIM_ConfigClockSource>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008a2:	f000 fef7 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008a8:	f004 fc54 	bl	8005154 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008b2:	f000 feef 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4619      	mov	r1, r3
 80008c4:	4816      	ldr	r0, [pc, #88]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008c6:	f005 fad5 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008d0:	f000 fee0 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008ec:	f004 fe44 	bl	8005578 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008f6:	f000 fecd 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2204      	movs	r2, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000902:	f004 fe39 	bl	8005578 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800090c:	f000 fec2 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000912:	f000 ffa9 	bl	8001868 <HAL_TIM_MspPostInit>

}
 8000916:	bf00      	nop
 8000918:	3738      	adds	r7, #56	; 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000030c 	.word	0x2000030c
 8000924:	40000400 	.word	0x40000400

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f005 fb0a 	bl	8005f78 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 fe93 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000354 	.word	0x20000354
 8000978:	40011000 	.word	0x40011000

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <MX_DMA_Init+0x3c>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2038      	movs	r0, #56	; 0x38
 80009a4:	f001 fe05 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a8:	2038      	movs	r0, #56	; 0x38
 80009aa:	f001 fe1e 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a31      	ldr	r2, [pc, #196]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0xe4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <MX_GPIO_Init+0xe8>)
 8000a4a:	f002 fb6f 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0xec>)
 8000a56:	f002 fb69 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0xe8>)
 8000a74:	f002 f9d6 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0xec>)
 8000a92:	f002 f9c7 	bl	8002e24 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020400 	.word	0x40020400

08000aac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	uint8_t i;
		for(i=0; i< TTOTAL; i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e010      	b.n	8000adc <HAL_TIM_PeriodElapsedCallback+0x30>
			if(timers[i] != 0){
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x2a>
				timers[i]--;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ace:	3a01      	subs	r2, #1
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i< TTOTAL; i++){
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	d9eb      	bls.n	8000aba <HAL_TIM_PeriodElapsedCallback+0xe>
			}
		}
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	20000398 	.word	0x20000398

08000af4 <ledHandle1>:
void ledHandle1(){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	switch(st_led1){
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <ledHandle1+0xb0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d006      	beq.n	8000b0e <ledHandle1+0x1a>
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	dc4c      	bgt.n	8000b9e <ledHandle1+0xaa>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d02c      	beq.n	8000b62 <ledHandle1+0x6e>
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d011      	beq.n	8000b30 <ledHandle1+0x3c>
				}
				if(timers[TIEMPO_CALIBRACION] == 0)
					st_led1=LED_STANDBY;
				break;
		}
}
 8000b0c:	e047      	b.n	8000b9e <ledHandle1+0xaa>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <ledHandle1+0xb4>)
 8000b16:	f002 fb09 	bl	800312c <HAL_GPIO_WritePin>
				if(timers[TIEMPO_CALIBRACION] != 0){
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <ledHandle1+0xb8>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d038      	beq.n	8000b94 <ledHandle1+0xa0>
				st_led1 = LED_OFF;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <ledHandle1+0xb0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
				timers[LED1_Toggle] = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <ledHandle1+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
				break;
 8000b2e:	e031      	b.n	8000b94 <ledHandle1+0xa0>
				if(timers[LED1_Toggle] == 0){
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <ledHandle1+0xb8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10c      	bne.n	8000b52 <ledHandle1+0x5e>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <ledHandle1+0xb4>)
 8000b40:	f002 faf4 	bl	800312c <HAL_GPIO_WritePin>
				st_led1 = LED_ON;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <ledHandle1+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
				timers[LED1_Toggle] = 500;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <ledHandle1+0xb8>)
 8000b4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b50:	601a      	str	r2, [r3, #0]
				if(timers[TIEMPO_CALIBRACION] == 0)
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <ledHandle1+0xb8>)
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11e      	bne.n	8000b98 <ledHandle1+0xa4>
					st_led1=LED_STANDBY;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <ledHandle1+0xb0>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	701a      	strb	r2, [r3, #0]
				break;
 8000b60:	e01a      	b.n	8000b98 <ledHandle1+0xa4>
				if(timers[LED1_Toggle] == 0){
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <ledHandle1+0xb8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10c      	bne.n	8000b84 <ledHandle1+0x90>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <ledHandle1+0xb4>)
 8000b72:	f002 fadb 	bl	800312c <HAL_GPIO_WritePin>
				st_led1 = LED_OFF;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <ledHandle1+0xb0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
				timers[LED1_Toggle] = 500;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <ledHandle1+0xb8>)
 8000b7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b82:	601a      	str	r2, [r3, #0]
				if(timers[TIEMPO_CALIBRACION] == 0)
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <ledHandle1+0xb8>)
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d107      	bne.n	8000b9c <ledHandle1+0xa8>
					st_led1=LED_STANDBY;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <ledHandle1+0xb0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	701a      	strb	r2, [r3, #0]
				break;
 8000b92:	e003      	b.n	8000b9c <ledHandle1+0xa8>
				break;
 8000b94:	bf00      	nop
 8000b96:	e002      	b.n	8000b9e <ledHandle1+0xaa>
				break;
 8000b98:	bf00      	nop
 8000b9a:	e000      	b.n	8000b9e <ledHandle1+0xaa>
				break;
 8000b9c:	bf00      	nop
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	20000398 	.word	0x20000398

08000bb0 <ledHandle2>:
void ledHandle2(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	switch(st_led2){
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <ledHandle2+0xb0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d006      	beq.n	8000bca <ledHandle2+0x1a>
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	dc4c      	bgt.n	8000c5a <ledHandle2+0xaa>
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02c      	beq.n	8000c1e <ledHandle2+0x6e>
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d011      	beq.n	8000bec <ledHandle2+0x3c>
				}
				if(timers[TIEMPO_MOTOR1] == 0)
					st_led2=LED_STANDBY;
				break;
		}
}
 8000bc8:	e047      	b.n	8000c5a <ledHandle2+0xaa>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd0:	4824      	ldr	r0, [pc, #144]	; (8000c64 <ledHandle2+0xb4>)
 8000bd2:	f002 faab 	bl	800312c <HAL_GPIO_WritePin>
				if(timers[TIEMPO_MOTOR1] != 0){
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <ledHandle2+0xb8>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d038      	beq.n	8000c50 <ledHandle2+0xa0>
				st_led2 = LED_OFF;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <ledHandle2+0xb0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
				timers[LED2_Toggle] = 0;
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <ledHandle2+0xb8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
				break;
 8000bea:	e031      	b.n	8000c50 <ledHandle2+0xa0>
				if(timers[LED2_Toggle] == 0){
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <ledHandle2+0xb8>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10c      	bne.n	8000c0e <ledHandle2+0x5e>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <ledHandle2+0xb4>)
 8000bfc:	f002 fa96 	bl	800312c <HAL_GPIO_WritePin>
				st_led2 = LED_ON;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <ledHandle2+0xb0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				timers[LED2_Toggle] = 500;
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <ledHandle2+0xb8>)
 8000c08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c0c:	605a      	str	r2, [r3, #4]
				if(timers[TIEMPO_MOTOR1] == 0)
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <ledHandle2+0xb8>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11e      	bne.n	8000c54 <ledHandle2+0xa4>
					st_led2=LED_STANDBY;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <ledHandle2+0xb0>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	701a      	strb	r2, [r3, #0]
				break;
 8000c1c:	e01a      	b.n	8000c54 <ledHandle2+0xa4>
				if(timers[LED2_Toggle] == 0){
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <ledHandle2+0xb8>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10c      	bne.n	8000c40 <ledHandle2+0x90>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <ledHandle2+0xb4>)
 8000c2e:	f002 fa7d 	bl	800312c <HAL_GPIO_WritePin>
				st_led2 = LED_OFF;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <ledHandle2+0xb0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
				timers[LED2_Toggle] = 500;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <ledHandle2+0xb8>)
 8000c3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c3e:	605a      	str	r2, [r3, #4]
				if(timers[TIEMPO_MOTOR1] == 0)
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <ledHandle2+0xb8>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d107      	bne.n	8000c58 <ledHandle2+0xa8>
					st_led2=LED_STANDBY;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <ledHandle2+0xb0>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
				break;
 8000c4e:	e003      	b.n	8000c58 <ledHandle2+0xa8>
				break;
 8000c50:	bf00      	nop
 8000c52:	e002      	b.n	8000c5a <ledHandle2+0xaa>
				break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <ledHandle2+0xaa>
				break;
 8000c58:	bf00      	nop
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000001 	.word	0x20000001
 8000c64:	40020400 	.word	0x40020400
 8000c68:	20000398 	.word	0x20000398

08000c6c <ledHandle3>:
void ledHandle3(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	switch(st_led3){
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <ledHandle3+0xb0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d006      	beq.n	8000c86 <ledHandle3+0x1a>
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	dc4c      	bgt.n	8000d16 <ledHandle3+0xaa>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d02c      	beq.n	8000cda <ledHandle3+0x6e>
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d011      	beq.n	8000ca8 <ledHandle3+0x3c>
				}
				if(timers[TIEMPO_MOTOR2] == 0)
					st_led3=LED_STANDBY;
				break;
		}
}
 8000c84:	e047      	b.n	8000d16 <ledHandle3+0xaa>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4824      	ldr	r0, [pc, #144]	; (8000d20 <ledHandle3+0xb4>)
 8000c8e:	f002 fa4d 	bl	800312c <HAL_GPIO_WritePin>
				if(timers[TIEMPO_MOTOR2] != 0){
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <ledHandle3+0xb8>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d038      	beq.n	8000d0c <ledHandle3+0xa0>
				st_led3 = LED_OFF;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <ledHandle3+0xb0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
				timers[LED3_Toggle] = 0;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <ledHandle3+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
				break;
 8000ca6:	e031      	b.n	8000d0c <ledHandle3+0xa0>
				if(timers[LED3_Toggle] == 0){
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <ledHandle3+0xb8>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10c      	bne.n	8000cca <ledHandle3+0x5e>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb6:	481a      	ldr	r0, [pc, #104]	; (8000d20 <ledHandle3+0xb4>)
 8000cb8:	f002 fa38 	bl	800312c <HAL_GPIO_WritePin>
				st_led3 = LED_ON;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <ledHandle3+0xb0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
				timers[LED3_Toggle] = 500;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <ledHandle3+0xb8>)
 8000cc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cc8:	609a      	str	r2, [r3, #8]
				if(timers[TIEMPO_MOTOR2] == 0)
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <ledHandle3+0xb8>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11e      	bne.n	8000d10 <ledHandle3+0xa4>
					st_led3=LED_STANDBY;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <ledHandle3+0xb0>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	701a      	strb	r2, [r3, #0]
				break;
 8000cd8:	e01a      	b.n	8000d10 <ledHandle3+0xa4>
				if(timers[LED3_Toggle] == 0){
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <ledHandle3+0xb8>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <ledHandle3+0x90>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <ledHandle3+0xb4>)
 8000cea:	f002 fa1f 	bl	800312c <HAL_GPIO_WritePin>
				st_led3 = LED_OFF;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <ledHandle3+0xb0>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
				timers[LED3_Toggle] = 500;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <ledHandle3+0xb8>)
 8000cf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cfa:	609a      	str	r2, [r3, #8]
				if(timers[TIEMPO_MOTOR2] == 0)
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <ledHandle3+0xb8>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d107      	bne.n	8000d14 <ledHandle3+0xa8>
					st_led3=LED_STANDBY;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <ledHandle3+0xb0>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	701a      	strb	r2, [r3, #0]
				break;
 8000d0a:	e003      	b.n	8000d14 <ledHandle3+0xa8>
				break;
 8000d0c:	bf00      	nop
 8000d0e:	e002      	b.n	8000d16 <ledHandle3+0xaa>
				break;
 8000d10:	bf00      	nop
 8000d12:	e000      	b.n	8000d16 <ledHandle3+0xaa>
				break;
 8000d14:	bf00      	nop
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000002 	.word	0x20000002
 8000d20:	40020400 	.word	0x40020400
 8000d24:	20000398 	.word	0x20000398

08000d28 <ledHandle4>:
void ledHandle4(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	switch(st_led4){
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <ledHandle4+0xac>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d006      	beq.n	8000d42 <ledHandle4+0x1a>
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	dc4a      	bgt.n	8000dce <ledHandle4+0xa6>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d02b      	beq.n	8000d94 <ledHandle4+0x6c>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d011      	beq.n	8000d64 <ledHandle4+0x3c>
				}
				if(modo_trabajo!=ESPERA)
					st_led4=LED_STANDBY;
				break;
		}
}
 8000d40:	e045      	b.n	8000dce <ledHandle4+0xa6>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d48:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <ledHandle4+0xb0>)
 8000d4a:	f002 f9ef 	bl	800312c <HAL_GPIO_WritePin>
				if(modo_trabajo==ESPERA){
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <ledHandle4+0xb4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d136      	bne.n	8000dc4 <ledHandle4+0x9c>
				st_led4 = LED_OFF;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <ledHandle4+0xac>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
				timers[LED4_Toggle] = 0;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <ledHandle4+0xb8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
				break;
 8000d62:	e02f      	b.n	8000dc4 <ledHandle4+0x9c>
				if(timers[LED4_Toggle] == 0){
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <ledHandle4+0xb8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10b      	bne.n	8000d84 <ledHandle4+0x5c>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d72:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <ledHandle4+0xb0>)
 8000d74:	f002 f9da 	bl	800312c <HAL_GPIO_WritePin>
				st_led4 = LED_ON;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <ledHandle4+0xac>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
				timers[LED4_Toggle] = 200;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <ledHandle4+0xb8>)
 8000d80:	22c8      	movs	r2, #200	; 0xc8
 8000d82:	60da      	str	r2, [r3, #12]
				if(modo_trabajo!=ESPERA)
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <ledHandle4+0xb4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d01d      	beq.n	8000dc8 <ledHandle4+0xa0>
					st_led4=LED_STANDBY;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <ledHandle4+0xac>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
				break;
 8000d92:	e019      	b.n	8000dc8 <ledHandle4+0xa0>
				if(timers[LED4_Toggle] == 0){
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <ledHandle4+0xb8>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10b      	bne.n	8000db4 <ledHandle4+0x8c>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <ledHandle4+0xb0>)
 8000da4:	f002 f9c2 	bl	800312c <HAL_GPIO_WritePin>
				st_led4 = LED_OFF;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <ledHandle4+0xac>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
				timers[LED4_Toggle] = 200;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <ledHandle4+0xb8>)
 8000db0:	22c8      	movs	r2, #200	; 0xc8
 8000db2:	60da      	str	r2, [r3, #12]
				if(modo_trabajo!=ESPERA)
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <ledHandle4+0xb4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <ledHandle4+0xa4>
					st_led4=LED_STANDBY;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <ledHandle4+0xac>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
				break;
 8000dc2:	e003      	b.n	8000dcc <ledHandle4+0xa4>
				break;
 8000dc4:	bf00      	nop
 8000dc6:	e002      	b.n	8000dce <ledHandle4+0xa6>
				break;
 8000dc8:	bf00      	nop
 8000dca:	e000      	b.n	8000dce <ledHandle4+0xa6>
				break;
 8000dcc:	bf00      	nop
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000003 	.word	0x20000003
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	200003c0 	.word	0x200003c0
 8000de0:	20000398 	.word	0x20000398

08000de4 <ledHandler>:
void ledHandler(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
		  ledHandle1();
 8000de8:	f7ff fe84 	bl	8000af4 <ledHandle1>
		  ledHandle2();
 8000dec:	f7ff fee0 	bl	8000bb0 <ledHandle2>
		  ledHandle3();
 8000df0:	f7ff ff3c 	bl	8000c6c <ledHandle3>
		  ledHandle4();
 8000df4:	f7ff ff98 	bl	8000d28 <ledHandle4>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <rutinaCalibracion>:

void rutinaCalibracion(){
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af04      	add	r7, sp, #16
	switch(st_calibracion){
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <rutinaCalibracion+0x13c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <rutinaCalibracion+0x14>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d01c      	beq.n	8000e48 <rutinaCalibracion+0x4c>
			st_calibracion=INICIA_VAL;
			modo_trabajo=ESPERA;
		}
		break;
	}
}
 8000e0e:	e08f      	b.n	8000f30 <rutinaCalibracion+0x134>
		for(int i=0;i<7;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	e00d      	b.n	8000e32 <rutinaCalibracion+0x36>
			max[i]=0;
 8000e16:	4a49      	ldr	r2, [pc, #292]	; (8000f3c <rutinaCalibracion+0x140>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			min[i]=1023;
 8000e20:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <rutinaCalibracion+0x144>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0;i<7;i++){
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	ddee      	ble.n	8000e16 <rutinaCalibracion+0x1a>
	    st_calibracion=CAPTURA_DATOS;
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <rutinaCalibracion+0x13c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
	    timers[TIEMPO_CALIBRACION]=15000;
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <rutinaCalibracion+0x148>)
 8000e40:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000e44:	611a      	str	r2, [r3, #16]
		break;
 8000e46:	e073      	b.n	8000f30 <rutinaCalibracion+0x134>
		for(int i=0;i<7;i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	e026      	b.n	8000e9c <rutinaCalibracion+0xa0>
			if(max[i]<adc[i])
 8000e4e:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <rutinaCalibracion+0x140>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e56:	493c      	ldr	r1, [pc, #240]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d207      	bcs.n	8000e72 <rutinaCalibracion+0x76>
				max[i]=adc[i];
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	4934      	ldr	r1, [pc, #208]	; (8000f3c <rutinaCalibracion+0x140>)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(min[i]>adc[i])
 8000e72:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <rutinaCalibracion+0x144>)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7a:	4933      	ldr	r1, [pc, #204]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d907      	bls.n	8000e96 <rutinaCalibracion+0x9a>
				min[i]=adc[i];
 8000e86:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8e:	492c      	ldr	r1, [pc, #176]	; (8000f40 <rutinaCalibracion+0x144>)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0;i<7;i++){
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	ddd5      	ble.n	8000e4e <rutinaCalibracion+0x52>
		enviarQT(adc[0],adc[1],adc[2],adc[3],adc[4],adc[5],1);//seguidor
 8000ea2:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000ea8:	6859      	ldr	r1, [r3, #4]
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000eac:	689c      	ldr	r4, [r3, #8]
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000eb0:	68dd      	ldr	r5, [r3, #12]
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <rutinaCalibracion+0x14c>)
 8000eb8:	6952      	ldr	r2, [r2, #20]
 8000eba:	2601      	movs	r6, #1
 8000ebc:	9602      	str	r6, [sp, #8]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	f000 fabb 	bl	8001440 <enviarQT>
		enviarQT(max[0],max[1],max[2],max[3],max[4],max[5],2);//max
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <rutinaCalibracion+0x140>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <rutinaCalibracion+0x140>)
 8000ed0:	6859      	ldr	r1, [r3, #4]
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <rutinaCalibracion+0x140>)
 8000ed4:	689c      	ldr	r4, [r3, #8]
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <rutinaCalibracion+0x140>)
 8000ed8:	68dd      	ldr	r5, [r3, #12]
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <rutinaCalibracion+0x140>)
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <rutinaCalibracion+0x140>)
 8000ee0:	6952      	ldr	r2, [r2, #20]
 8000ee2:	2602      	movs	r6, #2
 8000ee4:	9602      	str	r6, [sp, #8]
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	462b      	mov	r3, r5
 8000eec:	4622      	mov	r2, r4
 8000eee:	f000 faa7 	bl	8001440 <enviarQT>
		enviarQT(min[0],min[1],min[2],min[3],min[4],min[5],3);//min
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <rutinaCalibracion+0x144>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <rutinaCalibracion+0x144>)
 8000ef8:	6859      	ldr	r1, [r3, #4]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <rutinaCalibracion+0x144>)
 8000efc:	689c      	ldr	r4, [r3, #8]
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <rutinaCalibracion+0x144>)
 8000f00:	68dd      	ldr	r5, [r3, #12]
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <rutinaCalibracion+0x144>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <rutinaCalibracion+0x144>)
 8000f08:	6952      	ldr	r2, [r2, #20]
 8000f0a:	2603      	movs	r6, #3
 8000f0c:	9602      	str	r6, [sp, #8]
 8000f0e:	9201      	str	r2, [sp, #4]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	462b      	mov	r3, r5
 8000f14:	4622      	mov	r2, r4
 8000f16:	f000 fa93 	bl	8001440 <enviarQT>
		if(timers[TIEMPO_CALIBRACION]==0){
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <rutinaCalibracion+0x148>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d105      	bne.n	8000f2e <rutinaCalibracion+0x132>
			st_calibracion=INICIA_VAL;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <rutinaCalibracion+0x13c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			modo_trabajo=ESPERA;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <rutinaCalibracion+0x150>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
		break;
 8000f2e:	bf00      	nop
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f38:	200003c1 	.word	0x200003c1
 8000f3c:	20000424 	.word	0x20000424
 8000f40:	20000440 	.word	0x20000440
 8000f44:	20000398 	.word	0x20000398
 8000f48:	20000408 	.word	0x20000408
 8000f4c:	200003c0 	.word	0x200003c0

08000f50 <motorDerecho>:

void motorDerecho(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	switch(st_motor1){
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <motorDerecho+0x78>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <motorDerecho+0x12>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d00b      	beq.n	8000f78 <motorDerecho+0x28>
			modo_trabajo=ESPERA;
			TIM3->CCR1=0;
		}
		break;
	}
}
 8000f60:	e02c      	b.n	8000fbc <motorDerecho+0x6c>
		TIM3->CCR1=0;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <motorDerecho+0x7c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
		st_motor1=PRUEBA;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <motorDerecho+0x78>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
		timers[TIEMPO_MOTOR1]=10000;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <motorDerecho+0x80>)
 8000f70:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f74:	615a      	str	r2, [r3, #20]
			break;
 8000f76:	e021      	b.n	8000fbc <motorDerecho+0x6c>
		if(timers[MOTOR1_TOGGLE]==0){
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <motorDerecho+0x80>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <motorDerecho+0x50>
		TIM3->CCR1+=10;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <motorDerecho+0x7c>)
 8000f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <motorDerecho+0x7c>)
 8000f86:	330a      	adds	r3, #10
 8000f88:	6353      	str	r3, [r2, #52]	; 0x34
		if((TIM3->CCR1)>100)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <motorDerecho+0x7c>)
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d902      	bls.n	8000f98 <motorDerecho+0x48>
			TIM3->CCR1=0;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <motorDerecho+0x7c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
		timers[MOTOR1_TOGGLE]=500;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <motorDerecho+0x80>)
 8000f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f9e:	619a      	str	r2, [r3, #24]
		if(timers[TIEMPO_MOTOR1]==0){
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <motorDerecho+0x80>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <motorDerecho+0x6a>
			st_motor1=INICIA;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <motorDerecho+0x78>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
			modo_trabajo=ESPERA;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <motorDerecho+0x84>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
			TIM3->CCR1=0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <motorDerecho+0x7c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000fba:	bf00      	nop
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200003c2 	.word	0x200003c2
 8000fcc:	40000400 	.word	0x40000400
 8000fd0:	20000398 	.word	0x20000398
 8000fd4:	200003c0 	.word	0x200003c0

08000fd8 <motorIzquierdo>:

void motorIzquierdo(){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	switch(st_motor2){
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <motorIzquierdo+0x78>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <motorIzquierdo+0x12>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d00b      	beq.n	8001000 <motorIzquierdo+0x28>
				modo_trabajo=ESPERA;
				TIM3->CCR2=0;
			}
			break;
	}
}
 8000fe8:	e02c      	b.n	8001044 <motorIzquierdo+0x6c>
			TIM3->CCR2=0;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <motorIzquierdo+0x7c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	639a      	str	r2, [r3, #56]	; 0x38
			st_motor2=PRUEBA;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <motorIzquierdo+0x78>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
			timers[TIEMPO_MOTOR2]=10000;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <motorIzquierdo+0x80>)
 8000ff8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ffc:	61da      	str	r2, [r3, #28]
				break;
 8000ffe:	e021      	b.n	8001044 <motorIzquierdo+0x6c>
			if(timers[MOTOR2_TOGGLE]==0){
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <motorIzquierdo+0x80>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10f      	bne.n	8001028 <motorIzquierdo+0x50>
			TIM3->CCR2+=10;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <motorIzquierdo+0x7c>)
 800100a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <motorIzquierdo+0x7c>)
 800100e:	330a      	adds	r3, #10
 8001010:	6393      	str	r3, [r2, #56]	; 0x38
			if((TIM3->CCR2)>100)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <motorIzquierdo+0x7c>)
 8001014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d902      	bls.n	8001020 <motorIzquierdo+0x48>
				TIM3->CCR2=0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <motorIzquierdo+0x7c>)
 800101c:	2200      	movs	r2, #0
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
			timers[MOTOR2_TOGGLE]=500;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <motorIzquierdo+0x80>)
 8001022:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001026:	621a      	str	r2, [r3, #32]
			if(timers[TIEMPO_MOTOR2]==0){
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <motorIzquierdo+0x80>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d108      	bne.n	8001042 <motorIzquierdo+0x6a>
				st_motor2=INICIA;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <motorIzquierdo+0x78>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
				modo_trabajo=ESPERA;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <motorIzquierdo+0x84>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
				TIM3->CCR2=0;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <motorIzquierdo+0x7c>)
 800103e:	2200      	movs	r2, #0
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001042:	bf00      	nop
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200003c3 	.word	0x200003c3
 8001054:	40000400 	.word	0x40000400
 8001058:	20000398 	.word	0x20000398
 800105c:	200003c0 	.word	0x200003c0

08001060 <rutinaPosicion>:

int32_t rutinaPosicion(){
 8001060:	b480      	push	{r7}
 8001062:	b08b      	sub	sp, #44	; 0x2c
 8001064:	af00      	add	r7, sp, #0
	int32_t valorPonderado=0, mediaPonderada=0;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
	char negativo=0;
 800106e:	2300      	movs	r3, #0
 8001070:	77fb      	strb	r3, [r7, #31]
	for(int i=0;i<5;i++){
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	e026      	b.n	80010c6 <rutinaPosicion+0x66>
			if(max[i]<adc[i])
 8001078:	4a5c      	ldr	r2, [pc, #368]	; (80011ec <rutinaPosicion+0x18c>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001080:	495b      	ldr	r1, [pc, #364]	; (80011f0 <rutinaPosicion+0x190>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <rutinaPosicion+0x3c>
				max[i]=adc[i];
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <rutinaPosicion+0x190>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001094:	4955      	ldr	r1, [pc, #340]	; (80011ec <rutinaPosicion+0x18c>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(min[i]>adc[i])
 800109c:	4a55      	ldr	r2, [pc, #340]	; (80011f4 <rutinaPosicion+0x194>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a4:	4952      	ldr	r1, [pc, #328]	; (80011f0 <rutinaPosicion+0x190>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d907      	bls.n	80010c0 <rutinaPosicion+0x60>
				min[i]=adc[i];
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <rutinaPosicion+0x190>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b8:	494e      	ldr	r1, [pc, #312]	; (80011f4 <rutinaPosicion+0x194>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<5;i++){
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	ddd5      	ble.n	8001078 <rutinaPosicion+0x18>
		}

	uint32_t adc0=adc[0]*(1023/(max[0]-min[0]))-(1023/(max[0]-min[0]))*min[0];
 80010cc:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <rutinaPosicion+0x190>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <rutinaPosicion+0x194>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a45      	ldr	r2, [pc, #276]	; (80011ec <rutinaPosicion+0x18c>)
 80010d8:	6811      	ldr	r1, [r2, #0]
 80010da:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <rutinaPosicion+0x194>)
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	1a8a      	subs	r2, r1, r2
 80010e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
	uint32_t adc1=adc[1]*(1023/(max[1]-min[1]))-(1023/(max[1]-min[1]))*min[1];
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <rutinaPosicion+0x190>)
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <rutinaPosicion+0x194>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <rutinaPosicion+0x18c>)
 80010fa:	6851      	ldr	r1, [r2, #4]
 80010fc:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <rutinaPosicion+0x194>)
 80010fe:	6852      	ldr	r2, [r2, #4]
 8001100:	1a8a      	subs	r2, r1, r2
 8001102:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001106:	fbb1 f2f2 	udiv	r2, r1, r2
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	613b      	str	r3, [r7, #16]
	uint32_t adc2=adc[2]*(1023/(max[2]-min[2]))-(1023/(max[2]-min[2]))*min[2];
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <rutinaPosicion+0x190>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <rutinaPosicion+0x194>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a34      	ldr	r2, [pc, #208]	; (80011ec <rutinaPosicion+0x18c>)
 800111c:	6891      	ldr	r1, [r2, #8]
 800111e:	4a35      	ldr	r2, [pc, #212]	; (80011f4 <rutinaPosicion+0x194>)
 8001120:	6892      	ldr	r2, [r2, #8]
 8001122:	1a8a      	subs	r2, r1, r2
 8001124:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001128:	fbb1 f2f2 	udiv	r2, r1, r2
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	60fb      	str	r3, [r7, #12]
	uint32_t adc3=adc[3]*(1023/(max[3]-min[3]))-(1023/(max[3]-min[3]))*min[3];
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <rutinaPosicion+0x190>)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <rutinaPosicion+0x194>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <rutinaPosicion+0x18c>)
 800113e:	68d1      	ldr	r1, [r2, #12]
 8001140:	4a2c      	ldr	r2, [pc, #176]	; (80011f4 <rutinaPosicion+0x194>)
 8001142:	68d2      	ldr	r2, [r2, #12]
 8001144:	1a8a      	subs	r2, r1, r2
 8001146:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800114a:	fbb1 f2f2 	udiv	r2, r1, r2
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	60bb      	str	r3, [r7, #8]
	uint32_t adc4=adc[4]*(1023/(max[4]-min[4]))-(1023/(max[4]-min[4]))*min[4];
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <rutinaPosicion+0x190>)
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <rutinaPosicion+0x194>)
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <rutinaPosicion+0x18c>)
 8001160:	6911      	ldr	r1, [r2, #16]
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <rutinaPosicion+0x194>)
 8001164:	6912      	ldr	r2, [r2, #16]
 8001166:	1a8a      	subs	r2, r1, r2
 8001168:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800116c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	607b      	str	r3, [r7, #4]

	valorPonderado = (int32_t)  (-2*adc0)+(-1*adc1)+(0*adc2)+(1*adc3)+(2*adc4);
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4613      	mov	r3, r2
 800117a:	07db      	lsls	r3, r3, #31
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	461a      	mov	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad2      	subs	r2, r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	441a      	add	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	627b      	str	r3, [r7, #36]	; 0x24

	sumaPonderada = (int32_t) adc0+adc1+adc2+adc3+adc4;
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	441a      	add	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	441a      	add	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	441a      	add	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <rutinaPosicion+0x198>)
 80011a8:	601a      	str	r2, [r3, #0]
		  if(valorPonderado < 0){
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da04      	bge.n	80011ba <rutinaPosicion+0x15a>
			  valorPonderado = valorPonderado * -1;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	425b      	negs	r3, r3
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
			  negativo = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	77fb      	strb	r3, [r7, #31]
		  }

		  mediaPonderada = (int32_t)  75*valorPonderado/sumaPonderada;
 80011ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	011a      	lsls	r2, r3, #4
 80011c4:	1ad2      	subs	r2, r2, r3
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <rutinaPosicion+0x198>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ce:	623b      	str	r3, [r7, #32]
		  if(negativo == 1){
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <rutinaPosicion+0x17c>
			  mediaPonderada = mediaPonderada * -1;
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	425b      	negs	r3, r3
 80011da:	623b      	str	r3, [r7, #32]
		  }
	return mediaPonderada;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	372c      	adds	r7, #44	; 0x2c
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000424 	.word	0x20000424
 80011f0:	20000408 	.word	0x20000408
 80011f4:	20000440 	.word	0x20000440
 80011f8:	20000404 	.word	0x20000404

080011fc <seguidorLinea>:

void seguidorLinea(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	posi = rutinaPosicion();
 8001200:	f7ff ff2e 	bl	8001060 <rutinaPosicion>
 8001204:	4603      	mov	r3, r0
 8001206:	4a6d      	ldr	r2, [pc, #436]	; (80013bc <seguidorLinea+0x1c0>)
 8001208:	6013      	str	r3, [r2, #0]
	motPast1=mot1; motPast2=mot2;
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <seguidorLinea+0x1c4>)
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <seguidorLinea+0x1c8>)
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <seguidorLinea+0x1cc>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <seguidorLinea+0x1d0>)
 8001218:	701a      	strb	r2, [r3, #0]
	if(posi<0){
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <seguidorLinea+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da4b      	bge.n	80012ba <seguidorLinea+0xbe>
			if(posi<-10){
 8001222:	4b66      	ldr	r3, [pc, #408]	; (80013bc <seguidorLinea+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f113 0f0a 	cmn.w	r3, #10
 800122a:	da06      	bge.n	800123a <seguidorLinea+0x3e>
				mot1=10;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <seguidorLinea+0x1c4>)
 800122e:	220a      	movs	r2, #10
 8001230:	701a      	strb	r2, [r3, #0]
				mot2=60;
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <seguidorLinea+0x1cc>)
 8001234:	223c      	movs	r2, #60	; 0x3c
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e088      	b.n	800134c <seguidorLinea+0x150>
				}
			else if(posi<-20){
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <seguidorLinea+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f113 0f14 	cmn.w	r3, #20
 8001242:	da06      	bge.n	8001252 <seguidorLinea+0x56>
				mot1=5;
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <seguidorLinea+0x1c4>)
 8001246:	2205      	movs	r2, #5
 8001248:	701a      	strb	r2, [r3, #0]
				mot2=60;
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <seguidorLinea+0x1cc>)
 800124c:	223c      	movs	r2, #60	; 0x3c
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e07c      	b.n	800134c <seguidorLinea+0x150>
				}
			else if(adc[0]>500 && adc[1]>500 && adc[2]>500 && adc[3]>500 && adc[4]>500){
 8001252:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <seguidorLinea+0x1d4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125a:	d927      	bls.n	80012ac <seguidorLinea+0xb0>
 800125c:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <seguidorLinea+0x1d4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001264:	d922      	bls.n	80012ac <seguidorLinea+0xb0>
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <seguidorLinea+0x1d4>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800126e:	d91d      	bls.n	80012ac <seguidorLinea+0xb0>
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <seguidorLinea+0x1d4>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001278:	d918      	bls.n	80012ac <seguidorLinea+0xb0>
 800127a:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <seguidorLinea+0x1d4>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001282:	d913      	bls.n	80012ac <seguidorLinea+0xb0>
				if(motPast1<motPast2){
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <seguidorLinea+0x1c8>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <seguidorLinea+0x1d0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d206      	bcs.n	800129e <seguidorLinea+0xa2>
					mot1=2;
 8001290:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <seguidorLinea+0x1c4>)
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
					mot2=60;
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <seguidorLinea+0x1cc>)
 8001298:	223c      	movs	r2, #60	; 0x3c
 800129a:	701a      	strb	r2, [r3, #0]
				if(motPast1<motPast2){
 800129c:	e056      	b.n	800134c <seguidorLinea+0x150>
				}
				else {
					mot1=60;
 800129e:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <seguidorLinea+0x1c4>)
 80012a0:	223c      	movs	r2, #60	; 0x3c
 80012a2:	701a      	strb	r2, [r3, #0]
					mot2=2;
 80012a4:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <seguidorLinea+0x1cc>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]
				if(motPast1<motPast2){
 80012aa:	e04f      	b.n	800134c <seguidorLinea+0x150>
				}
			}
			else{
				mot1=60;
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <seguidorLinea+0x1c4>)
 80012ae:	223c      	movs	r2, #60	; 0x3c
 80012b0:	701a      	strb	r2, [r3, #0]
				mot2=60;
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <seguidorLinea+0x1cc>)
 80012b4:	223c      	movs	r2, #60	; 0x3c
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e048      	b.n	800134c <seguidorLinea+0x150>
			}
		}
		else{
			if(posi>10){
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <seguidorLinea+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b0a      	cmp	r3, #10
 80012c0:	dd06      	ble.n	80012d0 <seguidorLinea+0xd4>
				mot1=60;
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <seguidorLinea+0x1c4>)
 80012c4:	223c      	movs	r2, #60	; 0x3c
 80012c6:	701a      	strb	r2, [r3, #0]
				mot2=10;
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <seguidorLinea+0x1cc>)
 80012ca:	220a      	movs	r2, #10
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e03d      	b.n	800134c <seguidorLinea+0x150>
			}
			else if(posi>20){
 80012d0:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <seguidorLinea+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b14      	cmp	r3, #20
 80012d6:	dd06      	ble.n	80012e6 <seguidorLinea+0xea>
				mot1=60;
 80012d8:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <seguidorLinea+0x1c4>)
 80012da:	223c      	movs	r2, #60	; 0x3c
 80012dc:	701a      	strb	r2, [r3, #0]
				mot2=5;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <seguidorLinea+0x1cc>)
 80012e0:	2205      	movs	r2, #5
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e032      	b.n	800134c <seguidorLinea+0x150>
			}
			else if(adc[0]>500 && adc[1]>500 && adc[2]>500 && adc[3]>500 && adc[4]>500){
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <seguidorLinea+0x1d4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ee:	d927      	bls.n	8001340 <seguidorLinea+0x144>
 80012f0:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <seguidorLinea+0x1d4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f8:	d922      	bls.n	8001340 <seguidorLinea+0x144>
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <seguidorLinea+0x1d4>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001302:	d91d      	bls.n	8001340 <seguidorLinea+0x144>
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <seguidorLinea+0x1d4>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800130c:	d918      	bls.n	8001340 <seguidorLinea+0x144>
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <seguidorLinea+0x1d4>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001316:	d913      	bls.n	8001340 <seguidorLinea+0x144>
				if(motPast1<motPast2){
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <seguidorLinea+0x1c8>)
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <seguidorLinea+0x1d0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d206      	bcs.n	8001332 <seguidorLinea+0x136>
					mot1=2;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <seguidorLinea+0x1c4>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
					mot2=60;
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <seguidorLinea+0x1cc>)
 800132c:	223c      	movs	r2, #60	; 0x3c
 800132e:	701a      	strb	r2, [r3, #0]
				if(motPast1<motPast2){
 8001330:	e00c      	b.n	800134c <seguidorLinea+0x150>
				}
				else {
					mot1=60;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <seguidorLinea+0x1c4>)
 8001334:	223c      	movs	r2, #60	; 0x3c
 8001336:	701a      	strb	r2, [r3, #0]
					mot2=2;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <seguidorLinea+0x1cc>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
				if(motPast1<motPast2){
 800133e:	e005      	b.n	800134c <seguidorLinea+0x150>
				}
			}
			else{
				mot1=60;
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <seguidorLinea+0x1c4>)
 8001342:	223c      	movs	r2, #60	; 0x3c
 8001344:	701a      	strb	r2, [r3, #0]
				mot2=60;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <seguidorLinea+0x1cc>)
 8001348:	223c      	movs	r2, #60	; 0x3c
 800134a:	701a      	strb	r2, [r3, #0]
			}
		}
	if((timers[VUELTAS]==0)&&(adc[0]<500 && adc[1]<500 && adc[2]<500 && adc[3]<500 && adc[4]<500)){
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <seguidorLinea+0x1d8>)
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d129      	bne.n	80013a8 <seguidorLinea+0x1ac>
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <seguidorLinea+0x1d4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800135c:	d224      	bcs.n	80013a8 <seguidorLinea+0x1ac>
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <seguidorLinea+0x1d4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001366:	d21f      	bcs.n	80013a8 <seguidorLinea+0x1ac>
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <seguidorLinea+0x1d4>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001370:	d21a      	bcs.n	80013a8 <seguidorLinea+0x1ac>
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <seguidorLinea+0x1d4>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d215      	bcs.n	80013a8 <seguidorLinea+0x1ac>
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <seguidorLinea+0x1d4>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001384:	d210      	bcs.n	80013a8 <seguidorLinea+0x1ac>
		timers[VUELTAS]=3000;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <seguidorLinea+0x1d8>)
 8001388:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
		vueltas++;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <seguidorLinea+0x1dc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <seguidorLinea+0x1dc>)
 8001398:	701a      	strb	r2, [r3, #0]
		if(vueltas == 16){
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <seguidorLinea+0x1dc>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d102      	bne.n	80013a8 <seguidorLinea+0x1ac>
			modo_trabajo = ESPERA;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <seguidorLinea+0x1e0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		}
	}
	TIM3->CCR1=mot1;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <seguidorLinea+0x1c4>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <seguidorLinea+0x1e4>)
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=mot2;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <seguidorLinea+0x1cc>)
 80013b2:	781a      	ldrb	r2, [r3, #0]
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <seguidorLinea+0x1e4>)
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000484 	.word	0x20000484
 80013c0:	2000047d 	.word	0x2000047d
 80013c4:	20000480 	.word	0x20000480
 80013c8:	2000047e 	.word	0x2000047e
 80013cc:	20000481 	.word	0x20000481
 80013d0:	20000408 	.word	0x20000408
 80013d4:	20000398 	.word	0x20000398
 80013d8:	2000047f 	.word	0x2000047f
 80013dc:	200003c0 	.word	0x200003c0
 80013e0:	40000400 	.word	0x40000400

080013e4 <seguidorHandler>:

void seguidorHandler(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	switch(modo_trabajo){
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <seguidorHandler+0x54>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d820      	bhi.n	8001432 <seguidorHandler+0x4e>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <seguidorHandler+0x14>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	0800140d 	.word	0x0800140d
 80013fc:	0800141b 	.word	0x0800141b
 8001400:	08001421 	.word	0x08001421
 8001404:	08001427 	.word	0x08001427
 8001408:	0800142d 	.word	0x0800142d
	case ESPERA:

		TIM3->CCR1=0;
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <seguidorHandler+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2=0;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <seguidorHandler+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001418:	e00b      	b.n	8001432 <seguidorHandler+0x4e>
	case CALIBRACION:
		rutinaCalibracion();
 800141a:	f7ff fcef 	bl	8000dfc <rutinaCalibracion>
		break;
 800141e:	e008      	b.n	8001432 <seguidorHandler+0x4e>
	case MOTOR_DERECHO:
		motorDerecho();
 8001420:	f7ff fd96 	bl	8000f50 <motorDerecho>
		break;
 8001424:	e005      	b.n	8001432 <seguidorHandler+0x4e>
	case MOTOR_IZQUIERDO:
		motorIzquierdo();
 8001426:	f7ff fdd7 	bl	8000fd8 <motorIzquierdo>
		break;
 800142a:	e002      	b.n	8001432 <seguidorHandler+0x4e>
	case SEGUIDOR_LINEA:
		seguidorLinea();
 800142c:	f7ff fee6 	bl	80011fc <seguidorLinea>
		break;
 8001430:	bf00      	nop
	}
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200003c0 	.word	0x200003c0
 800143c:	40000400 	.word	0x40000400

08001440 <enviarQT>:

void enviarQT(uint32_t adc1, uint32_t adc2, uint32_t adc3, uint32_t adc4, uint32_t adc5, uint32_t adc6, uint8_t tipoDato){//PROTOCOLO (en bytes): 0. inicio(0x01), 1. tamaño (datos), 2 - (n+1).datos, n+2. checksum, n+3. final(0x02)
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
	uint8_t i=0;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
	memset(enviar,0,32);
 8001452:	2220      	movs	r2, #32
 8001454:	2100      	movs	r1, #0
 8001456:	482a      	ldr	r0, [pc, #168]	; (8001500 <enviarQT+0xc0>)
 8001458:	f009 fef2 	bl	800b240 <memset>
	enviar[0]=1;
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <enviarQT+0xc0>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
	enviar[1]=8;
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <enviarQT+0xc0>)
 8001464:	2208      	movs	r2, #8
 8001466:	705a      	strb	r2, [r3, #1]
	//inicio datos:
	enviar[2]=adc1/4;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <enviarQT+0xc0>)
 8001470:	709a      	strb	r2, [r3, #2]
	enviar[3]=adc2/4;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <enviarQT+0xc0>)
 800147a:	70da      	strb	r2, [r3, #3]
	enviar[4]=adc3/4;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <enviarQT+0xc0>)
 8001484:	711a      	strb	r2, [r3, #4]
	enviar[5]=adc4/4;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <enviarQT+0xc0>)
 800148e:	715a      	strb	r2, [r3, #5]
	enviar[6]=adc5/4;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <enviarQT+0xc0>)
 8001498:	719a      	strb	r2, [r3, #6]
	enviar[7]=tipoDato;
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <enviarQT+0xc0>)
 800149c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a0:	71d3      	strb	r3, [r2, #7]
	enviar[8]=adc6;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <enviarQT+0xc0>)
 80014a8:	721a      	strb	r2, [r3, #8]
	//fin datos.
	for(i=0;i<9;i++){
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
 80014ae:	e00b      	b.n	80014c8 <enviarQT+0x88>
		enviar[9]+=enviar[i];
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <enviarQT+0xc0>)
 80014b2:	7a5a      	ldrb	r2, [r3, #9]
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	4912      	ldr	r1, [pc, #72]	; (8001500 <enviarQT+0xc0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	4413      	add	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <enviarQT+0xc0>)
 80014c0:	725a      	strb	r2, [r3, #9]
	for(i=0;i<9;i++){
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	3301      	adds	r3, #1
 80014c6:	75fb      	strb	r3, [r7, #23]
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d9f0      	bls.n	80014b0 <enviarQT+0x70>
	}
	enviar[10]=2;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <enviarQT+0xc0>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	729a      	strb	r2, [r3, #10]
	CDC_Transmit_FS(enviar,strlen(enviar));
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <enviarQT+0xc0>)
 80014d6:	f7fe fe7d 	bl	80001d4 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <enviarQT+0xc0>)
 80014e0:	f009 fa38 	bl	800a954 <CDC_Transmit_FS>
	HAL_UART_Transmit(&huart1, enviar, strlen(enviar), 1);
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <enviarQT+0xc0>)
 80014e6:	f7fe fe75 	bl	80001d4 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	2301      	movs	r3, #1
 80014f0:	4903      	ldr	r1, [pc, #12]	; (8001500 <enviarQT+0xc0>)
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <enviarQT+0xc4>)
 80014f4:	f004 fd8d 	bl	8006012 <HAL_UART_Transmit>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000045c 	.word	0x2000045c
 8001504:	20000354 	.word	0x20000354

08001508 <llegaDato>:
void llegaDato(uint8_t* Buf, uint32_t Len){//PROTOCOLO (en bytes): 0. inicio(0x01), 1. tamaño (datos), 2 - (n+1).datos, n+2. checksum, n+3. final(0x02)
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	memset(datoRecibido,'\0',256);
 8001512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001516:	2100      	movs	r1, #0
 8001518:	4837      	ldr	r0, [pc, #220]	; (80015f8 <llegaDato+0xf0>)
 800151a:	f009 fe91 	bl	800b240 <memset>
		error=0;
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <llegaDato+0xf4>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		if(Buf[0]!=0x01){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d003      	beq.n	8001534 <llegaDato+0x2c>
			error=1;
 800152c:	4b33      	ldr	r3, [pc, #204]	; (80015fc <llegaDato+0xf4>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e036      	b.n	80015a2 <llegaDato+0x9a>
		}
		else{
			uint8_t i, checksum=Buf[0]+Buf[1];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	73bb      	strb	r3, [r7, #14]
			for(i=0;i<Len-4;i++){//Buf[1]
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e012      	b.n	800156e <llegaDato+0x66>
				datoRecibido[i]=Buf[i+2];
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	3302      	adds	r3, #2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	441a      	add	r2, r3
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	7811      	ldrb	r1, [r2, #0]
 8001554:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <llegaDato+0xf0>)
 8001556:	54d1      	strb	r1, [r2, r3]
				checksum+=Buf[i+2];
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3302      	adds	r3, #2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	4413      	add	r3, r2
 8001566:	73bb      	strb	r3, [r7, #14]
			for(i=0;i<Len-4;i++){//Buf[1]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	3301      	adds	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3b04      	subs	r3, #4
 8001574:	429a      	cmp	r2, r3
 8001576:	d3e7      	bcc.n	8001548 <llegaDato+0x40>
			}
			if(checksum!=Buf[Len-2]){//Buf[1]+2
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3b02      	subs	r3, #2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	7bba      	ldrb	r2, [r7, #14]
 8001584:	429a      	cmp	r2, r3
 8001586:	d002      	beq.n	800158e <llegaDato+0x86>
				error=1;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <llegaDato+0xf4>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
			}
			if(Buf[Len-1]!=0x02){//Buf[1]+3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d002      	beq.n	80015a2 <llegaDato+0x9a>
				error=1;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <llegaDato+0xf4>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(error!=1){//PROTOCOLO V2: byte 1 de dato recibido es modo de trabajo
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <llegaDato+0xf4>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d017      	beq.n	80015da <llegaDato+0xd2>
				if((modo_trabajo==SEGUIDOR_LINEA)&&(datoRecibido[0]==4)){
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <llegaDato+0xf8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d108      	bne.n	80015c4 <llegaDato+0xbc>
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <llegaDato+0xf0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d103      	bne.n	80015c4 <llegaDato+0xbc>
					modo_trabajo=ESPERA;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <llegaDato+0xf8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e004      	b.n	80015ce <llegaDato+0xc6>
				}
				else{
					modo_trabajo=datoRecibido[0];
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <llegaDato+0xf0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <llegaDato+0xf8>)
 80015cc:	701a      	strb	r2, [r3, #0]
				}
			    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
 80015ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <llegaDato+0xfc>)
 80015d4:	f001 fdc3 	bl	800315e <HAL_GPIO_TogglePin>
			  else{
				  CDC_Transmit_FS("NO",strlen("NO"));
				  HAL_UART_Transmit(&huart1, "NO", strlen("NO"), 1);
				  //modo_trabajo=datoRecibido[0];
			  }
}
 80015d8:	e009      	b.n	80015ee <llegaDato+0xe6>
				  CDC_Transmit_FS("NO",strlen("NO"));
 80015da:	2102      	movs	r1, #2
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <llegaDato+0x100>)
 80015de:	f009 f9b9 	bl	800a954 <CDC_Transmit_FS>
				  HAL_UART_Transmit(&huart1, "NO", strlen("NO"), 1);
 80015e2:	2301      	movs	r3, #1
 80015e4:	2202      	movs	r2, #2
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <llegaDato+0x100>)
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <llegaDato+0x104>)
 80015ea:	f004 fd12 	bl	8006012 <HAL_UART_Transmit>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200003c4 	.word	0x200003c4
 80015fc:	2000047c 	.word	0x2000047c
 8001600:	200003c0 	.word	0x200003c0
 8001604:	40020400 	.word	0x40020400
 8001608:	0800b268 	.word	0x0800b268
 800160c:	20000354 	.word	0x20000354

08001610 <cuentaHandler>:

void cuentaHandler(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,arr[vueltas][0]);
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <cuentaHandler+0x78>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4a1c      	ldr	r2, [pc, #112]	; (800168c <cuentaHandler+0x7c>)
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001628:	4819      	ldr	r0, [pc, #100]	; (8001690 <cuentaHandler+0x80>)
 800162a:	f001 fd7f 	bl	800312c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,arr[vueltas][1]);
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <cuentaHandler+0x78>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4a16      	ldr	r2, [pc, #88]	; (800168c <cuentaHandler+0x7c>)
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001644:	4812      	ldr	r0, [pc, #72]	; (8001690 <cuentaHandler+0x80>)
 8001646:	f001 fd71 	bl	800312c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,arr[vueltas][2]);
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <cuentaHandler+0x78>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <cuentaHandler+0x7c>)
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	3308      	adds	r3, #8
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001660:	480b      	ldr	r0, [pc, #44]	; (8001690 <cuentaHandler+0x80>)
 8001662:	f001 fd63 	bl	800312c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,arr[vueltas][3]);
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <cuentaHandler+0x78>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <cuentaHandler+0x7c>)
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	330c      	adds	r3, #12
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <cuentaHandler+0x80>)
 800167e:	f001 fd55 	bl	800312c <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000047f 	.word	0x2000047f
 800168c:	20000004 	.word	0x20000004
 8001690:	40020400 	.word	0x40020400

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_MspInit+0x4c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_ADC_MspInit+0xdc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d157      	bne.n	80017c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_ADC_MspInit+0xe0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800174a:	237f      	movs	r3, #127	; 0x7f
 800174c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	2303      	movs	r3, #3
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	481d      	ldr	r0, [pc, #116]	; (80017d4 <HAL_ADC_MspInit+0xe4>)
 800175e:	f001 fb61 	bl	8002e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_ADC_MspInit+0xec>)
 8001766:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 8001784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001788:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 800178c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 8001794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001798:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017a6:	480c      	ldr	r0, [pc, #48]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 80017a8:	f000 ff3a 	bl	8002620 <HAL_DMA_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017b2:	f7ff ff6f 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_ADC_MspInit+0xe8>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012000 	.word	0x40012000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20000264 	.word	0x20000264
 80017dc:	40026410 	.word	0x40026410

080017e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f0:	d116      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	201c      	movs	r0, #28
 8001814:	f000 fecd 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001818:	201c      	movs	r0, #28
 800181a:	f000 fee6 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181e:	e01a      	b.n	8001856 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_TIM_Base_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_Base_MspInit+0x80>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201d      	movs	r0, #29
 800184c:	f000 feb1 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001850:	201d      	movs	r0, #29
 8001852:	f000 feca 	bl	80025ea <HAL_NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40000400 	.word	0x40000400

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_TIM_MspPostInit+0xa4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d13b      	bne.n	8001902 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_TIM_MspPostInit+0xa8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d2:	2302      	movs	r3, #2
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <HAL_TIM_MspPostInit+0xac>)
 80018de:	f001 faa1 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e2:	2310      	movs	r3, #16
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f2:	2302      	movs	r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018fe:	f001 fa91 	bl	8002e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40000400 	.word	0x40000400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_UART_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d134      	bne.n	80019a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_UART_MspInit+0x98>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001988:	2307      	movs	r3, #7
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_UART_MspInit+0x9c>)
 8001994:	f001 fa46 	bl	8002e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2025      	movs	r0, #37	; 0x25
 800199e:	f000 fe08 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a2:	2025      	movs	r0, #37	; 0x25
 80019a4:	f000 fe21 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a08:	f000 f8c2 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM2_IRQHandler+0x10>)
 8001a16:	f003 fca7 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002c4 	.word	0x200002c4

08001a24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM3_IRQHandler+0x10>)
 8001a2a:	f003 fc9d 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000030c 	.word	0x2000030c

08001a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <USART1_IRQHandler+0x10>)
 8001a3e:	f004 fb7b 	bl	8006138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000354 	.word	0x20000354

08001a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <DMA2_Stream0_IRQHandler+0x10>)
 8001a52:	f000 ff7d 	bl	8002950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000264 	.word	0x20000264

08001a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <OTG_FS_IRQHandler+0x10>)
 8001a66:	f001 fce4 	bl	8003432 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000113c 	.word	0x2000113c

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff ffd7 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f009 fb97 	bl	800b1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7fe fd0d 	bl	80004e8 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001adc:	0800b2e4 	.word	0x0800b2e4
  ldr r2, =_sbss
 8001ae0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001ae4:	20001868 	.word	0x20001868

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 fd41 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 f808 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fdbe 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fd59 	bl	8002606 <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 fd21 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000104 	.word	0x20000104
 8001b88:	2000010c 	.word	0x2000010c
 8001b8c:	20000108 	.word	0x20000108

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000010c 	.word	0x2000010c
 8001bb4:	20000488 	.word	0x20000488

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000488 	.word	0x20000488

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000010c 	.word	0x2000010c

08001c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e033      	b.n	8001c96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd5a 	bl	80016f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c5e:	f023 0302 	bic.w	r3, r3, #2
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa48 	bl	8002100 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
 8001c86:	e001      	b.n	8001c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Start_DMA+0x1e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e0ce      	b.n	8001e5c <HAL_ADC_Start_DMA+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d018      	beq.n	8001d06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_ADC_Start_DMA+0x1c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_ADC_Start_DMA+0x1c8>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9a      	lsrs	r2, r3, #18
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 8086 	bne.w	8001e42 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f023 0206 	bic.w	r2, r3, #6
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_ADC_Start_DMA+0x1cc>)
 8001d94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	4a35      	ldr	r2, [pc, #212]	; (8001e70 <HAL_ADC_Start_DMA+0x1d0>)
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <HAL_ADC_Start_DMA+0x1d4>)
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <HAL_ADC_Start_DMA+0x1d8>)
 8001dac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001db6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	334c      	adds	r3, #76	; 0x4c
 8001de2:	4619      	mov	r1, r3
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f000 fcc8 	bl	800277c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10f      	bne.n	8001e18 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d129      	bne.n	8001e5a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e020      	b.n	8001e5a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_ADC_Start_DMA+0x1dc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d11b      	bne.n	8001e5a <HAL_ADC_Start_DMA+0x1ba>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d114      	bne.n	8001e5a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e00b      	b.n	8001e5a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000104 	.word	0x20000104
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	080022f9 	.word	0x080022f9
 8001e74:	080023b3 	.word	0x080023b3
 8001e78:	080023cf 	.word	0x080023cf
 8001e7c:	40012000 	.word	0x40012000

08001e80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e105      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x228>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	d925      	bls.n	8001f34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	2207      	movs	r2, #7
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	4603      	mov	r3, r0
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4403      	add	r3, r0
 8001f26:	3b1e      	subs	r3, #30
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	e022      	b.n	8001f7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	2207      	movs	r2, #7
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4403      	add	r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d824      	bhi.n	8001fcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	3b05      	subs	r3, #5
 8001f94:	221f      	movs	r2, #31
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b05      	subs	r3, #5
 8001fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	e04c      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d824      	bhi.n	800201e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b23      	subs	r3, #35	; 0x23
 8001fe6:	221f      	movs	r2, #31
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43da      	mvns	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b23      	subs	r3, #35	; 0x23
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
 800201c:	e023      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b41      	subs	r3, #65	; 0x41
 8002030:	221f      	movs	r2, #31
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b41      	subs	r3, #65	; 0x41
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_ADC_ConfigChannel+0x234>)
 8002068:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <HAL_ADC_ConfigChannel+0x238>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d109      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1cc>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b12      	cmp	r3, #18
 800207a:	d105      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_ADC_ConfigChannel+0x238>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d123      	bne.n	80020da <HAL_ADC_ConfigChannel+0x21e>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d003      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x1e6>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b11      	cmp	r3, #17
 80020a0:	d11b      	bne.n	80020da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d111      	bne.n	80020da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_ADC_ConfigChannel+0x23c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_ADC_ConfigChannel+0x240>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	0c9a      	lsrs	r2, r3, #18
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40012300 	.word	0x40012300
 80020f4:	40012000 	.word	0x40012000
 80020f8:	20000104 	.word	0x20000104
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <ADC_Init+0x1f0>)
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <ADC_Init+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e00f      	b.n	80021fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800224a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	3b01      	subs	r3, #1
 8002258:	035a      	lsls	r2, r3, #13
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e007      	b.n	8002274 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	3b01      	subs	r3, #1
 8002290:	051a      	lsls	r2, r3, #20
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	029a      	lsls	r2, r3, #10
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	0f000001 	.word	0x0f000001

080022f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800230e:	2b00      	cmp	r3, #0
 8002310:	d13c      	bne.n	800238c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d12b      	bne.n	8002384 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d127      	bne.n	8002384 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0220 	bic.w	r2, r2, #32
 800235e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff fd7b 	bl	8001e80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800238a:	e00e      	b.n	80023aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff fd85 	bl	8001ea8 <HAL_ADC_ErrorCallback>
}
 800239e:	e004      	b.n	80023aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fd67 	bl	8001e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2240      	movs	r2, #64	; 0x40
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff fd5a 	bl	8001ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff fac4 	bl	8001bb8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e099      	b.n	8002770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265c:	e00f      	b.n	800267e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265e:	f7ff faab 	bl	8001bb8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b05      	cmp	r3, #5
 800266a:	d908      	bls.n	800267e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e078      	b.n	8002770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e8      	bne.n	800265e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_DMA_Init+0x158>)
 8002698:	4013      	ands	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4313      	orrs	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b04      	cmp	r3, #4
 8002710:	d117      	bne.n	8002742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fb01 	bl	8002d2c <DMA_CheckFifoParam>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800273e:	2301      	movs	r3, #1
 8002740:	e016      	b.n	8002770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fab8 	bl	8002cc0 <DMA_CalcBaseAndBitshift>
 8002750:	4603      	mov	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	f010803f 	.word	0xf010803f

0800277c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_Start_IT+0x26>
 800279e:	2302      	movs	r3, #2
 80027a0:	e040      	b.n	8002824 <HAL_DMA_Start_IT+0xa8>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12f      	bne.n	8002816 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa4a 	bl	8002c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	223f      	movs	r2, #63	; 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0216 	orr.w	r2, r2, #22
 80027ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e005      	b.n	8002822 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800283a:	f7ff f9bd 	bl	8001bb8 <HAL_GetTick>
 800283e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d008      	beq.n	800285e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e052      	b.n	8002904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0216 	bic.w	r2, r2, #22
 800286c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_DMA_Abort+0x62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ae:	e013      	b.n	80028d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b0:	f7ff f982 	bl	8001bb8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d90c      	bls.n	80028d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e015      	b.n	8002904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e4      	bne.n	80028b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	223f      	movs	r2, #63	; 0x3f
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d004      	beq.n	800292a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00c      	b.n	8002944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2205      	movs	r2, #5
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800295c:	4b8e      	ldr	r3, [pc, #568]	; (8002b98 <HAL_DMA_IRQHandler+0x248>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8e      	ldr	r2, [pc, #568]	; (8002b9c <HAL_DMA_IRQHandler+0x24c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2208      	movs	r2, #8
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2208      	movs	r2, #8
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0202 	orr.w	r2, r3, #2
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2204      	movs	r2, #4
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d024      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e01f      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0208 	bic.w	r2, r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808f 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8087 	beq.w	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d136      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x1da>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	223f      	movs	r2, #63	; 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07e      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
        }
        return;
 8002b66:	e079      	b.n	8002c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e02c      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
 8002b96:	bf00      	nop
 8002b98:	20000104 	.word	0x20000104
 8002b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e01e      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d032      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d307      	bcc.n	8002c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f2      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x2cc>
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
 8002c5a:	e000      	b.n	8002c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c5c:	bf00      	nop
    }
  }
}
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d108      	bne.n	8002ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca2:	e007      	b.n	8002cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b10      	subs	r3, #16
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <DMA_CalcBaseAndBitshift+0x68>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d909      	bls.n	8002d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8002d00:	e007      	b.n	8002d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	aaaaaaab 	.word	0xaaaaaaab
 8002d28:	0800b2cc 	.word	0x0800b2cc

08002d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d856      	bhi.n	8002dfa <DMA_CheckFifoParam+0xce>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <DMA_CheckFifoParam+0x28>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d77 	.word	0x08002d77
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002dfb 	.word	0x08002dfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d046      	beq.n	8002dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e043      	b.n	8002dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d7e:	d140      	bne.n	8002e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d84:	e03d      	b.n	8002e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d121      	bne.n	8002dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d837      	bhi.n	8002e06 <DMA_CheckFifoParam+0xda>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <DMA_CheckFifoParam+0x70>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db3 	.word	0x08002db3
 8002da4:	08002dad 	.word	0x08002dad
 8002da8:	08002dc5 	.word	0x08002dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e030      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d025      	beq.n	8002e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e022      	b.n	8002e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd2:	e01c      	b.n	8002e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d903      	bls.n	8002de2 <DMA_CheckFifoParam+0xb6>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d003      	beq.n	8002de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de0:	e018      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e015      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e00b      	b.n	8002e12 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e00a      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e008      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e006      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e004      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
    }
  } 
  
  return status; 
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e159      	b.n	80030f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 8148 	bne.w	80030ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d130      	bne.n	8002ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0201 	and.w	r2, r3, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d017      	beq.n	8002f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a2 	beq.w	80030ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_GPIO_Init+0x2e8>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x2ec>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_GPIO_Init+0x2f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d019      	beq.n	8003026 <HAL_GPIO_Init+0x202>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a48      	ldr	r2, [pc, #288]	; (8003118 <HAL_GPIO_Init+0x2f4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0x1fe>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a47      	ldr	r2, [pc, #284]	; (800311c <HAL_GPIO_Init+0x2f8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00d      	beq.n	800301e <HAL_GPIO_Init+0x1fa>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a46      	ldr	r2, [pc, #280]	; (8003120 <HAL_GPIO_Init+0x2fc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_GPIO_Init+0x1f6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a45      	ldr	r2, [pc, #276]	; (8003124 <HAL_GPIO_Init+0x300>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_GPIO_Init+0x1f2>
 8003012:	2304      	movs	r3, #4
 8003014:	e008      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003016:	2307      	movs	r3, #7
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x204>
 800301a:	2303      	movs	r3, #3
 800301c:	e004      	b.n	8003028 <HAL_GPIO_Init+0x204>
 800301e:	2302      	movs	r3, #2
 8003020:	e002      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x204>
 8003026:	2300      	movs	r3, #0
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f002 0203 	and.w	r2, r2, #3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003038:	4935      	ldr	r1, [pc, #212]	; (8003110 <HAL_GPIO_Init+0x2ec>)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <HAL_GPIO_Init+0x304>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <HAL_GPIO_Init+0x304>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_GPIO_Init+0x304>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_GPIO_Init+0x304>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b0f      	cmp	r3, #15
 80030f8:	f67f aea2 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	40013800 	.word	0x40013800
 8003114:	40020000 	.word	0x40020000
 8003118:	40020400 	.word	0x40020400
 800311c:	40020800 	.word	0x40020800
 8003120:	40020c00 	.word	0x40020c00
 8003124:	40021000 	.word	0x40021000
 8003128:	40013c00 	.word	0x40013c00

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003148:	e003      	b.n	8003152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	041a      	lsls	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	619a      	str	r2, [r3, #24]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	041a      	lsls	r2, r3, #16
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43d9      	mvns	r1, r3
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	400b      	ands	r3, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003194:	b08f      	sub	sp, #60	; 0x3c
 8003196:	af0a      	add	r7, sp, #40	; 0x28
 8003198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e10f      	b.n	80033c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f007 fd10 	bl	800abe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fff1 	bl	80071ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	687e      	ldr	r6, [r7, #4]
 80031f0:	466d      	mov	r5, sp
 80031f2:	f106 0410 	add.w	r4, r6, #16
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003202:	e885 0003 	stmia.w	r5, {r0, r1}
 8003206:	1d33      	adds	r3, r6, #4
 8003208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f003 fec8 	bl	8006fa0 <USB_CoreInit>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0d0      	b.n	80033c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f003 ffdf 	bl	80071ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e04a      	b.n	80032ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	333d      	adds	r3, #61	; 0x3d
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	333c      	adds	r3, #60	; 0x3c
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	b298      	uxth	r0, r3
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3344      	adds	r3, #68	; 0x44
 8003270:	4602      	mov	r2, r0
 8003272:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3340      	adds	r3, #64	; 0x40
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3348      	adds	r3, #72	; 0x48
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	334c      	adds	r3, #76	; 0x4c
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3354      	adds	r3, #84	; 0x54
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3af      	bcc.n	8003234 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e044      	b.n	8003364 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3301      	adds	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d3b5      	bcc.n	80032da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	687e      	ldr	r6, [r7, #4]
 8003376:	466d      	mov	r5, sp
 8003378:	f106 0410 	add.w	r4, r6, #16
 800337c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003388:	e885 0003 	stmia.w	r5, {r0, r1}
 800338c:	1d33      	adds	r3, r6, #4
 800338e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f003 ff77 	bl	8007284 <USB_DevInit>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e00d      	b.n	80033c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f005 f8c6 	bl	800854e <USB_DevDisconnect>

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_PCD_Start+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e020      	b.n	800342a <HAL_PCD_Start+0x5e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d109      	bne.n	800340c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d005      	beq.n	800340c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fec9 	bl	80071a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 f876 	bl	800850c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003432:	b590      	push	{r4, r7, lr}
 8003434:	b08d      	sub	sp, #52	; 0x34
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f005 f934 	bl	80086b6 <USB_GetMode>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 848a 	bne.w	8003d6a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f005 f898 	bl	8008590 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8480 	beq.w	8003d68 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f005 f885 	bl	8008590 <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d107      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f002 0202 	and.w	r2, r2, #2
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 f873 	bl	8008590 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d161      	bne.n	8003578 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0210 	bic.w	r2, r2, #16
 80034c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	3304      	adds	r3, #4
 80034e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	0c5b      	lsrs	r3, r3, #17
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d124      	bne.n	800353a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d035      	beq.n	8003568 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	6a38      	ldr	r0, [r7, #32]
 8003510:	f004 feaa 	bl	8008268 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003520:	441a      	add	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003532:	441a      	add	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	621a      	str	r2, [r3, #32]
 8003538:	e016      	b.n	8003568 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	0c5b      	lsrs	r3, r3, #17
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	2b06      	cmp	r3, #6
 8003544:	d110      	bne.n	8003568 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800354c:	2208      	movs	r2, #8
 800354e:	4619      	mov	r1, r3
 8003550:	6a38      	ldr	r0, [r7, #32]
 8003552:	f004 fe89 	bl	8008268 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003562:	441a      	add	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0210 	orr.w	r2, r2, #16
 8003576:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f005 f807 	bl	8008590 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800358c:	f040 80a7 	bne.w	80036de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f005 f80c 	bl	80085b6 <USB_ReadDevAllOutEpInterrupt>
 800359e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035a0:	e099      	b.n	80036d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808e 	beq.w	80036ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 f830 	bl	800861e <USB_ReadDevOutEPInterrupt>
 80035be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	2301      	movs	r3, #1
 80035da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fec2 	bl	8004368 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fa:	461a      	mov	r2, r3
 80035fc:	2308      	movs	r3, #8
 80035fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 ff98 	bl	8004538 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361e:	461a      	mov	r2, r3
 8003620:	2310      	movs	r3, #16
 8003622:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d030      	beq.n	8003690 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d109      	bne.n	800364e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	78db      	ldrb	r3, [r3, #3]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f007 fbaf 	bl	800addc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2302      	movs	r3, #2
 800368e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	2320      	movs	r3, #32
 80036aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	461a      	mov	r2, r3
 80036c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af62 	bne.w	80035a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 ff54 	bl	8008590 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f2:	f040 80db 	bne.w	80038ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 ff75 	bl	80085ea <USB_ReadDevAllInEpInterrupt>
 8003700:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003706:	e0cd      	b.n	80038a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80c2 	beq.w	8003898 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f004 ff9b 	bl	800865a <USB_ReadDevInEPInterrupt>
 8003724:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d057      	beq.n	80037e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003750:	4013      	ands	r3, r2
 8003752:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003760:	461a      	mov	r2, r3
 8003762:	2301      	movs	r3, #1
 8003764:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d132      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	334c      	adds	r3, #76	; 0x4c
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4403      	add	r3, r0
 800378e:	3348      	adds	r3, #72	; 0x48
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4419      	add	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4403      	add	r3, r0
 80037a2:	334c      	adds	r3, #76	; 0x4c
 80037a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d113      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x3a2>
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3354      	adds	r3, #84	; 0x54
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037cc:	461a      	mov	r2, r3
 80037ce:	2101      	movs	r1, #1
 80037d0:	f004 ffa2 	bl	8008718 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f007 fa83 	bl	800ace6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	461a      	mov	r2, r3
 80037f8:	2308      	movs	r3, #8
 80037fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	461a      	mov	r2, r3
 8003814:	2310      	movs	r3, #16
 8003816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	461a      	mov	r2, r3
 8003830:	2340      	movs	r3, #64	; 0x40
 8003832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d023      	beq.n	8003886 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800383e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003840:	6a38      	ldr	r0, [r7, #32]
 8003842:	f003 fe83 	bl	800754c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	3338      	adds	r3, #56	; 0x38
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	3304      	adds	r3, #4
 8003858:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	78db      	ldrb	r3, [r3, #3]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	b2db      	uxtb	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f007 fac6 	bl	800ae00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	2302      	movs	r3, #2
 8003884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fcdb 	bl	800424e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	3301      	adds	r3, #1
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f47f af2e 	bne.w	8003708 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fe6d 	bl	8008590 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c0:	d122      	bne.n	8003908 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038e8:	2100      	movs	r1, #0
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fec2 	bl	8004674 <HAL_PCDEx_LPM_Callback>
 80038f0:	e002      	b.n	80038f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f007 fa64 	bl	800adc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fe3f 	bl	8008590 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d112      	bne.n	8003944 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d102      	bne.n	8003934 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f007 fa20 	bl	800ad74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003942:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f004 fe21 	bl	8008590 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	f040 80b7 	bne.w	8003aca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2110      	movs	r1, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fde8 	bl	800754c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003980:	e046      	b.n	8003a10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003994:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3b3      	bcc.n	8003982 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a46:	f043 030b 	orr.w	r3, r3, #11
 8003a4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5c:	f043 030b 	orr.w	r3, r3, #11
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	e015      	b.n	8003a90 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8a:	f043 030b 	orr.w	r3, r3, #11
 8003a8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aa2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f004 fe2f 	bl	8008718 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 fd5e 	bl	8008590 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ade:	d124      	bne.n	8003b2a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f004 fdf4 	bl	80086d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f003 fda9 	bl	8007646 <USB_GetDevSpeed>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681c      	ldr	r4, [r3, #0]
 8003b00:	f001 f9e8 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f003 faa8 	bl	8007064 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f007 f90e 	bl	800ad36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 fd2e 	bl	8008590 <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d10a      	bne.n	8003b54 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f007 f8eb 	bl	800ad1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f002 0208 	and.w	r2, r2, #8
 8003b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fd19 	bl	8008590 <USB_ReadInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d122      	bne.n	8003bae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b74:	2301      	movs	r3, #1
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	e014      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb27 	bl	80041ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3e5      	bcc.n	8003b7a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fcec 	bl	8008590 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d13b      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	e02b      	b.n	8003c22 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3340      	adds	r3, #64	; 0x40
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d115      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da12      	bge.n	8003c1c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	333f      	adds	r3, #63	; 0x3f
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fae8 	bl	80041ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	3301      	adds	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3ce      	bcc.n	8003bca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f004 fca5 	bl	8008590 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c50:	d155      	bne.n	8003cfe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e045      	b.n	8003ce4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d12e      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da2b      	bge.n	8003cde <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d121      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cda:	6053      	str	r3, [r2, #4]
            break;
 8003cdc:	e007      	b.n	8003cee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3b4      	bcc.n	8003c58 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fc44 	bl	8008590 <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d10a      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f007 f885 	bl	800ae24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 fc2e 	bl	8008590 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d115      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f007 f875 	bl	800ae40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	e000      	b.n	8003d6a <HAL_PCD_IRQHandler+0x938>
      return;
 8003d68:	bf00      	nop
    }
  }
}
 8003d6a:	3734      	adds	r7, #52	; 0x34
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}

08003d70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_SetAddress+0x1a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e013      	b.n	8003db2 <HAL_PCD_SetAddress+0x42>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f004 fb8c 	bl	80084c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	70fb      	strb	r3, [r7, #3]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	803b      	strh	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da0f      	bge.n	8003e00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3338      	adds	r3, #56	; 0x38
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	705a      	strb	r2, [r3, #1]
 8003dfe:	e00f      	b.n	8003e20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e2c:	883a      	ldrh	r2, [r7, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	78ba      	ldrb	r2, [r7, #2]
 8003e36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e4a:	78bb      	ldrb	r3, [r7, #2]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d102      	bne.n	8003e56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_PCD_EP_Open+0xaa>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e00e      	b.n	8003e82 <HAL_PCD_EP_Open+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fc0c 	bl	8007690 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e80:	7afb      	ldrb	r3, [r7, #11]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da0f      	bge.n	8003ebe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3338      	adds	r3, #56	; 0x38
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	705a      	strb	r2, [r3, #1]
 8003ebc:	e00f      	b.n	8003ede <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 020f 	and.w	r2, r3, #15
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_EP_Close+0x6e>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e00e      	b.n	8003f16 <HAL_PCD_EP_Close+0x8c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 fc4a 	bl	80077a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2200      	movs	r2, #0
 8003f58:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d102      	bne.n	8003f7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	f003 ff29 	bl	8007de8 <USB_EP0StartXfer>
 8003f96:	e008      	b.n	8003faa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	f003 fcd7 	bl	8007958 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3338      	adds	r3, #56	; 0x38
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	3304      	adds	r3, #4
 800400a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2201      	movs	r2, #1
 8004022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	b2da      	uxtb	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d102      	bne.n	800403e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800403e:	7afb      	ldrb	r3, [r7, #11]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	f003 fec7 	bl	8007de8 <USB_EP0StartXfer>
 800405a:	e008      	b.n	800406e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6979      	ldr	r1, [r7, #20]
 800406a:	f003 fc75 	bl	8007958 <USB_EPStartXfer>
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	d901      	bls.n	8004096 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e050      	b.n	8004138 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da0f      	bge.n	80040be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	3338      	adds	r3, #56	; 0x38
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	705a      	strb	r2, [r3, #1]
 80040bc:	e00d      	b.n	80040da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4413      	add	r3, r2
 80040d0:	3304      	adds	r3, #4
 80040d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_PCD_EP_SetStall+0x82>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e01e      	b.n	8004138 <HAL_PCD_EP_SetStall+0xc0>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	4618      	mov	r0, r3
 800410a:	f004 f905 	bl	8008318 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	b2d9      	uxtb	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004128:	461a      	mov	r2, r3
 800412a:	f004 faf5 	bl	8008718 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d901      	bls.n	800415e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e042      	b.n	80041e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800415e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004162:	2b00      	cmp	r3, #0
 8004164:	da0f      	bge.n	8004186 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	3338      	adds	r3, #56	; 0x38
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	3304      	adds	r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	705a      	strb	r2, [r3, #1]
 8004184:	e00f      	b.n	80041a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_PCD_EP_ClrStall+0x86>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e00e      	b.n	80041e4 <HAL_PCD_EP_ClrStall+0xa4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 f90d 	bl	80083f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0c      	bge.n	800421a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	3338      	adds	r3, #56	; 0x38
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e00c      	b.n	8004234 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	4618      	mov	r0, r3
 800423c:	f003 ff2c 	bl	8008098 <USB_EPStopXfer>
 8004240:	4603      	mov	r3, r0
 8004242:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004244:	7afb      	ldrb	r3, [r7, #11]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b08a      	sub	sp, #40	; 0x28
 8004252:	af02      	add	r7, sp, #8
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3338      	adds	r3, #56	; 0x38
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	429a      	cmp	r2, r3
 8004280:	d901      	bls.n	8004286 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06c      	b.n	8004360 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d902      	bls.n	80042a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3303      	adds	r3, #3
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042aa:	e02b      	b.n	8004304 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d902      	bls.n	80042c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3303      	adds	r3, #3
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4603      	mov	r3, r0
 80042e6:	6978      	ldr	r0, [r7, #20]
 80042e8:	f003 ff80 	bl	80081ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	441a      	add	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	441a      	add	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	b29b      	uxth	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d809      	bhi.n	800432e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004322:	429a      	cmp	r2, r3
 8004324:	d203      	bcs.n	800432e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1be      	bne.n	80042ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	429a      	cmp	r2, r3
 8004338:	d811      	bhi.n	800435e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	2201      	movs	r2, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	43db      	mvns	r3, r3
 8004354:	6939      	ldr	r1, [r7, #16]
 8004356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435a:	4013      	ands	r3, r2
 800435c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	333c      	adds	r3, #60	; 0x3c
 8004380:	3304      	adds	r3, #4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d17b      	bne.n	8004496 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4a61      	ldr	r2, [pc, #388]	; (8004530 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	f240 80b9 	bls.w	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80b3 	beq.w	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d0:	6093      	str	r3, [r2, #8]
 80043d2:	e0a7      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	461a      	mov	r2, r3
 80043ec:	2320      	movs	r3, #32
 80043ee:	6093      	str	r3, [r2, #8]
 80043f0:	e098      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f040 8093 	bne.w	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d90f      	bls.n	8004426 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	e07e      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	440b      	add	r3, r1
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004452:	1ad2      	subs	r2, r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d114      	bne.n	8004488 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004470:	461a      	mov	r2, r3
 8004472:	2101      	movs	r1, #1
 8004474:	f004 f950 	bl	8008718 <USB_EP0_OutStart>
 8004478:	e006      	b.n	8004488 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	441a      	add	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f006 fc0e 	bl	800acb0 <HAL_PCD_DataOutStageCallback>
 8004494:	e046      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d124      	bne.n	80044e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	461a      	mov	r2, r3
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	6093      	str	r3, [r2, #8]
 80044bc:	e032      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	461a      	mov	r2, r3
 80044d6:	2320      	movs	r3, #32
 80044d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f006 fbe5 	bl	800acb0 <HAL_PCD_DataOutStageCallback>
 80044e6:	e01d      	b.n	8004524 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d114      	bne.n	8004518 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004510:	461a      	mov	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	f004 f900 	bl	8008718 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f006 fbc6 	bl	800acb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	4f54300a 	.word	0x4f54300a
 8004534:	4f54310a 	.word	0x4f54310a

08004538 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d90e      	bls.n	800458c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f006 fb7d 	bl	800ac8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d90c      	bls.n	80045b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045ac:	461a      	mov	r2, r3
 80045ae:	2101      	movs	r1, #1
 80045b0:	f004 f8b2 	bl	8008718 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	4f54300a 	.word	0x4f54300a

080045c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
 80045d0:	4613      	mov	r3, r2
 80045d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045e2:	883b      	ldrh	r3, [r7, #0]
 80045e4:	0419      	lsls	r1, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
 80045f0:	e028      	b.n	8004644 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e00d      	b.n	8004622 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	3340      	adds	r3, #64	; 0x40
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4413      	add	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	3301      	adds	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	3b01      	subs	r3, #1
 8004628:	429a      	cmp	r2, r3
 800462a:	d3ec      	bcc.n	8004606 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800462c:	883b      	ldrh	r3, [r7, #0]
 800462e:	0418      	lsls	r0, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	3b01      	subs	r3, #1
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4302      	orrs	r2, r0
 800463c:	3340      	adds	r3, #64	; 0x40
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e267      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d075      	beq.n	8004796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00c      	beq.n	80046d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d112      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4b82      	ldr	r3, [pc, #520]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	4b7e      	ldr	r3, [pc, #504]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <HAL_RCC_OscConfig+0x108>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d157      	bne.n	8004794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e242      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d106      	bne.n	8004700 <HAL_RCC_OscConfig+0x74>
 80046f2:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x98>
 800470a:	4b70      	ldr	r3, [pc, #448]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6f      	ldr	r2, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6c      	ldr	r2, [pc, #432]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0xb0>
 8004724:	4b69      	ldr	r3, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a68      	ldr	r2, [pc, #416]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a65      	ldr	r2, [pc, #404]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fd fa38 	bl	8001bb8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd fa34 	bl	8001bb8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e207      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0xc0>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fd fa24 	bl	8001bb8 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fd fa20 	bl	8001bb8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e1f3      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	4b51      	ldr	r3, [pc, #324]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0xe8>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d063      	beq.n	800486a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d11c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b44      	ldr	r3, [pc, #272]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1c7      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4937      	ldr	r1, [pc, #220]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e03a      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fc:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_RCC_OscConfig+0x244>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd f9d9 	bl	8001bb8 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480a:	f7fd f9d5 	bl	8001bb8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1a8      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4925      	ldr	r1, [pc, #148]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCC_OscConfig+0x244>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd f9b8 	bl	8001bb8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484c:	f7fd f9b4 	bl	8001bb8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e187      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d036      	beq.n	80048e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_RCC_OscConfig+0x248>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd f998 	bl	8001bb8 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd f994 	bl	8001bb8 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e167      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_OscConfig+0x240>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x200>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_OscConfig+0x248>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fd f981 	bl	8001bb8 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00e      	b.n	80048d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fd f97d 	bl	8001bb8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d907      	bls.n	80048d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e150      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470000 	.word	0x42470000
 80048d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ea      	bne.n	80048ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8097 	beq.w	8004a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b81      	ldr	r3, [pc, #516]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b7d      	ldr	r3, [pc, #500]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a7c      	ldr	r2, [pc, #496]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
 8004912:	4b7a      	ldr	r3, [pc, #488]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b77      	ldr	r3, [pc, #476]	; (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b74      	ldr	r3, [pc, #464]	; (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a73      	ldr	r2, [pc, #460]	; (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fd f93d 	bl	8001bb8 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fd f939 	bl	8001bb8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e10c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b6a      	ldr	r3, [pc, #424]	; (8004b00 <HAL_RCC_OscConfig+0x474>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x2ea>
 8004968:	4b64      	ldr	r3, [pc, #400]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a63      	ldr	r2, [pc, #396]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x30c>
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a5e      	ldr	r2, [pc, #376]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a5b      	ldr	r2, [pc, #364]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x324>
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a57      	ldr	r2, [pc, #348]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
 80049a4:	4b55      	ldr	r3, [pc, #340]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a54      	ldr	r2, [pc, #336]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd f8fe 	bl	8001bb8 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd f8fa 	bl	8001bb8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0cb      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x334>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e4:	f7fd f8e8 	bl	8001bb8 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fd f8e4 	bl	8001bb8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0b5      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b39      	ldr	r3, [pc, #228]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	4a38      	ldr	r2, [pc, #224]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a1 	beq.w	8004b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2a:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d05c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d141      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd f8b8 	bl	8001bb8 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd f8b4 	bl	8001bb8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e087      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b27      	ldr	r3, [pc, #156]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	491b      	ldr	r1, [pc, #108]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fd f88d 	bl	8001bb8 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fd f889 	bl	8001bb8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e05c      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x416>
 8004ac0:	e054      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCC_OscConfig+0x478>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd f876 	bl	8001bb8 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd f872 	bl	8001bb8 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e045      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_RCC_OscConfig+0x470>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x444>
 8004aee:	e03d      	b.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e038      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40007000 	.word	0x40007000
 8004b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_RCC_OscConfig+0x4ec>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d028      	beq.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d11a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d111      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	3b01      	subs	r3, #1
 8004b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cc      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b68      	ldr	r3, [pc, #416]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b65      	ldr	r3, [pc, #404]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d044      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e06f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e067      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5a:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0203 	bic.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4934      	ldr	r1, [pc, #208]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c6c:	f7fc ffa4 	bl	8001bb8 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fc ffa0 	bl	8001bb8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 020c 	and.w	r2, r3, #12
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1eb      	bne.n	8004c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d20c      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f821 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	490a      	ldr	r1, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	5ccb      	ldrb	r3, [r1, r3]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fc ff04 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	0800b2b4 	.word	0x0800b2b4
 8004d40:	20000104 	.word	0x20000104
 8004d44:	20000108 	.word	0x20000108

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b090      	sub	sp, #64	; 0x40
 8004d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	2300      	movs	r3, #0
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d00d      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x40>
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	f200 80a1 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x34>
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7a:	e09b      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d80:	e09b      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d82:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d86:	e098      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d88:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d92:	4b4d      	ldr	r3, [pc, #308]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b4a      	ldr	r3, [pc, #296]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	2200      	movs	r2, #0
 8004da6:	623b      	str	r3, [r7, #32]
 8004da8:	627a      	str	r2, [r7, #36]	; 0x24
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004db0:	2100      	movs	r1, #0
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004db4:	fb03 f201 	mul.w	r2, r3, r1
 8004db8:	2300      	movs	r3, #0
 8004dba:	fb00 f303 	mul.w	r3, r0, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4a43      	ldr	r2, [pc, #268]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dc2:	fba0 1202 	umull	r1, r2, r0, r2
 8004dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc8:	460a      	mov	r2, r1
 8004dca:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dce:	4413      	add	r3, r2
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004de2:	f7fb f9ff 	bl	80001e4 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4613      	mov	r3, r2
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dee:	e053      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df0:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	099b      	lsrs	r3, r3, #6
 8004df6:	2200      	movs	r2, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	617a      	str	r2, [r7, #20]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e02:	f04f 0b00 	mov.w	fp, #0
 8004e06:	4652      	mov	r2, sl
 8004e08:	465b      	mov	r3, fp
 8004e0a:	f04f 0000 	mov.w	r0, #0
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	0159      	lsls	r1, r3, #5
 8004e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e18:	0150      	lsls	r0, r2, #5
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e22:	eb63 090b 	sbc.w	r9, r3, fp
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e3a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e3e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	00eb      	lsls	r3, r5, #3
 8004e4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e50:	00e2      	lsls	r2, r4, #3
 8004e52:	4614      	mov	r4, r2
 8004e54:	461d      	mov	r5, r3
 8004e56:	eb14 030a 	adds.w	r3, r4, sl
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	eb45 030b 	adc.w	r3, r5, fp
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	028b      	lsls	r3, r1, #10
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e78:	4621      	mov	r1, r4
 8004e7a:	028a      	lsls	r2, r1, #10
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	2200      	movs	r2, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	60fa      	str	r2, [r7, #12]
 8004e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e8c:	f7fb f9aa 	bl	80001e4 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3740      	adds	r7, #64	; 0x40
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	017d7840 	.word	0x017d7840

08004ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000104 	.word	0x20000104

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800b2c4 	.word	0x0800b2c4

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f18:	f7ff ffdc 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0b5b      	lsrs	r3, r3, #13
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4903      	ldr	r1, [pc, #12]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800b2c4 	.word	0x0800b2c4

08004f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e041      	b.n	8004fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc fc3c 	bl	80017e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f000 fcae 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e03c      	b.n	800506e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_TIM_Base_Start+0xa0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_TIM_Base_Start+0x5c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d013      	beq.n	8005038 <HAL_TIM_Base_Start+0x5c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <HAL_TIM_Base_Start+0xa4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_TIM_Base_Start+0x5c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_TIM_Base_Start+0xa8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_TIM_Base_Start+0x5c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a17      	ldr	r2, [pc, #92]	; (8005088 <HAL_TIM_Base_Start+0xac>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_TIM_Base_Start+0x5c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_TIM_Base_Start+0xb0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d111      	bne.n	800505c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b06      	cmp	r3, #6
 8005048:	d010      	beq.n	800506c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	e007      	b.n	800506c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e044      	b.n	8005132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_Base_Start_IT+0xb0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x6c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d013      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x6c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <HAL_TIM_Base_Start_IT+0xb4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x6c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_TIM_Base_Start_IT+0xb8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x6c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <HAL_TIM_Base_Start_IT+0xbc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x6c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <HAL_TIM_Base_Start_IT+0xc0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d111      	bne.n	8005120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b06      	cmp	r3, #6
 800510c:	d010      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	e007      	b.n	8005130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40014000 	.word	0x40014000

08005154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e041      	b.n	80051ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f839 	bl	80051f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fba2 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <HAL_TIM_PWM_Start+0x24>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e022      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d109      	bne.n	8005246 <HAL_TIM_PWM_Start+0x3e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	bf14      	ite	ne
 800523e:	2301      	movne	r3, #1
 8005240:	2300      	moveq	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e015      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d109      	bne.n	8005260 <HAL_TIM_PWM_Start+0x58>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e008      	b.n	8005272 <HAL_TIM_PWM_Start+0x6a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e068      	b.n	800534c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0x82>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005288:	e013      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start+0x92>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005298:	e00b      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a8:	e003      	b.n	80052b2 <HAL_TIM_PWM_Start+0xaa>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fdb4 	bl	8005e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <HAL_TIM_PWM_Start+0x14c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d107      	bne.n	80052da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <HAL_TIM_PWM_Start+0x14c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_TIM_PWM_Start+0x10e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d013      	beq.n	8005316 <HAL_TIM_PWM_Start+0x10e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_TIM_PWM_Start+0x150>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIM_PWM_Start+0x10e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a17      	ldr	r2, [pc, #92]	; (800535c <HAL_TIM_PWM_Start+0x154>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIM_PWM_Start+0x10e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIM_PWM_Start+0x158>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIM_PWM_Start+0x10e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <HAL_TIM_PWM_Start+0x15c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b06      	cmp	r3, #6
 8005326:	d010      	beq.n	800534a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	e007      	b.n	800534a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40014000 	.word	0x40014000

08005368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa77 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa69 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa7a 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0204 	mvn.w	r2, #4
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa4d 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa3f 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fa50 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0208 	mvn.w	r2, #8
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa23 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa15 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa26 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b10      	cmp	r3, #16
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0210 	mvn.w	r2, #16
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2208      	movs	r2, #8
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9f9 	bl	800589e <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f9eb 	bl	800588a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f9fc 	bl	80058b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0201 	mvn.w	r2, #1
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fae0 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fd26 	bl	8005f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9c1 	bl	80058c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0220 	mvn.w	r2, #32
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fcf0 	bl	8005f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005592:	2302      	movs	r3, #2
 8005594:	e0ae      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	f200 809f 	bhi.w	80056e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080056e5 	.word	0x080056e5
 80055b4:	080056e5 	.word	0x080056e5
 80055b8:	080056e5 	.word	0x080056e5
 80055bc:	08005621 	.word	0x08005621
 80055c0:	080056e5 	.word	0x080056e5
 80055c4:	080056e5 	.word	0x080056e5
 80055c8:	080056e5 	.word	0x080056e5
 80055cc:	08005663 	.word	0x08005663
 80055d0:	080056e5 	.word	0x080056e5
 80055d4:	080056e5 	.word	0x080056e5
 80055d8:	080056e5 	.word	0x080056e5
 80055dc:	080056a3 	.word	0x080056a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f9f8 	bl	80059dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0208 	orr.w	r2, r2, #8
 80055fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
      break;
 800561e:	e064      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa3e 	bl	8005aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6999      	ldr	r1, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	619a      	str	r2, [r3, #24]
      break;
 8005660:	e043      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fa89 	bl	8005b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0208 	orr.w	r2, r2, #8
 800567c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0204 	bic.w	r2, r2, #4
 800568c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
      break;
 80056a0:	e023      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fad3 	bl	8005c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69d9      	ldr	r1, [r3, #28]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	61da      	str	r2, [r3, #28]
      break;
 80056e2:	e002      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
      break;
 80056e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_TIM_ConfigClockSource+0x1c>
 8005714:	2302      	movs	r3, #2
 8005716:	e0b4      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x186>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005750:	d03e      	beq.n	80057d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005756:	f200 8087 	bhi.w	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575e:	f000 8086 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x172>
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	d87f      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b70      	cmp	r3, #112	; 0x70
 800576a:	d01a      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0xa6>
 800576c:	2b70      	cmp	r3, #112	; 0x70
 800576e:	d87b      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005770:	2b60      	cmp	r3, #96	; 0x60
 8005772:	d050      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x11a>
 8005774:	2b60      	cmp	r3, #96	; 0x60
 8005776:	d877      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005778:	2b50      	cmp	r3, #80	; 0x50
 800577a:	d03c      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0xfa>
 800577c:	2b50      	cmp	r3, #80	; 0x50
 800577e:	d873      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d058      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x13a>
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d86f      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b30      	cmp	r3, #48	; 0x30
 800578a:	d064      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	2b30      	cmp	r3, #48	; 0x30
 800578e:	d86b      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d060      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15a>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d867      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05c      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15a>
 800579c:	2b10      	cmp	r3, #16
 800579e:	d05a      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15a>
 80057a0:	e062      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6899      	ldr	r1, [r3, #8]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f000 fb19 	bl	8005de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	609a      	str	r2, [r3, #8]
      break;
 80057ce:	e04f      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f000 fb02 	bl	8005de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f2:	609a      	str	r2, [r3, #8]
      break;
 80057f4:	e03c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	461a      	mov	r2, r3
 8005804:	f000 fa76 	bl	8005cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2150      	movs	r1, #80	; 0x50
 800580e:	4618      	mov	r0, r3
 8005810:	f000 facf 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 8005814:	e02c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	461a      	mov	r2, r3
 8005824:	f000 fa95 	bl	8005d52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2160      	movs	r1, #96	; 0x60
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fabf 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 8005834:	e01c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	461a      	mov	r2, r3
 8005844:	f000 fa56 	bl	8005cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	4618      	mov	r0, r3
 8005850:	f000 faaf 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 8005854:	e00c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f000 faa6 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 8005866:	e003      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	e000      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800586e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a34      	ldr	r2, [pc, #208]	; (80059c0 <TIM_Base_SetConfig+0xe4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00f      	beq.n	8005914 <TIM_Base_SetConfig+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d00b      	beq.n	8005914 <TIM_Base_SetConfig+0x38>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a31      	ldr	r2, [pc, #196]	; (80059c4 <TIM_Base_SetConfig+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <TIM_Base_SetConfig+0x38>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a30      	ldr	r2, [pc, #192]	; (80059c8 <TIM_Base_SetConfig+0xec>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_Base_SetConfig+0x38>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <TIM_Base_SetConfig+0xf0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <TIM_Base_SetConfig+0xe4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01b      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d017      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <TIM_Base_SetConfig+0xe8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_Base_SetConfig+0xec>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00f      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a20      	ldr	r2, [pc, #128]	; (80059cc <TIM_Base_SetConfig+0xf0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00b      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <TIM_Base_SetConfig+0xf4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <TIM_Base_SetConfig+0xf8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <TIM_Base_SetConfig+0xfc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d108      	bne.n	8005978 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <TIM_Base_SetConfig+0xe4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800

080059dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0201 	bic.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 0302 	bic.w	r3, r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <TIM_OC1_SetConfig+0xc8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d10c      	bne.n	8005a52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0308 	bic.w	r3, r3, #8
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 0304 	bic.w	r3, r3, #4
 8005a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <TIM_OC1_SetConfig+0xc8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d111      	bne.n	8005a7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40010000 	.word	0x40010000

08005aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0320 	bic.w	r3, r3, #32
 8005af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <TIM_OC2_SetConfig+0xd4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10d      	bne.n	8005b24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <TIM_OC2_SetConfig+0xd4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d113      	bne.n	8005b54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000

08005b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <TIM_OC3_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10d      	bne.n	8005bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <TIM_OC3_SetConfig+0xd0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d113      	bne.n	8005c2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40010000 	.word	0x40010000

08005c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <TIM_OC4_SetConfig+0x9c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d109      	bne.n	8005cc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000

08005cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 030a 	bic.w	r3, r3, #10
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f043 0307 	orr.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	021a      	lsls	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e050      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40014000 	.word	0x40014000

08005f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e03f      	b.n	800600a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb fcbc 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fd7b 	bl	8006ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b08a      	sub	sp, #40	; 0x28
 8006016:	af02      	add	r7, sp, #8
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b20      	cmp	r3, #32
 8006030:	d17c      	bne.n	800612c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_UART_Transmit+0x2c>
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e075      	b.n	800612e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UART_Transmit+0x3e>
 800604c:	2302      	movs	r3, #2
 800604e:	e06e      	b.n	800612e <HAL_UART_Transmit+0x11c>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2221      	movs	r2, #33	; 0x21
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006066:	f7fb fda7 	bl	8001bb8 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d108      	bne.n	8006094 <HAL_UART_Transmit+0x82>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e003      	b.n	800609c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060a4:	e02a      	b.n	80060fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 faf9 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e036      	b.n	800612e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3302      	adds	r3, #2
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	e007      	b.n	80060ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1cf      	bne.n	80060a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fac9 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e006      	b.n	800612e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b0ba      	sub	sp, #232	; 0xe8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbd3 	bl	8006942 <UART_Receive_IT>
      return;
 800619c:	e256      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800619e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80de 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
 80061a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80d1 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
 800623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 81ed 	beq.w	8006642 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fb5e 	bl	8006942 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_UART_IRQHandler+0x17a>
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04f      	beq.n	8006352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa66 	bl	8006784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d141      	bne.n	800634a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800630a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1d9      	bne.n	80062c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d013      	beq.n	8006342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4a7d      	ldr	r2, [pc, #500]	; (8006514 <HAL_UART_IRQHandler+0x3dc>)
 8006320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	4618      	mov	r0, r3
 8006328:	f7fc faf0 	bl	800290c <HAL_DMA_Abort_IT>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e00e      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f99a 	bl	800667c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	e00a      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f996 	bl	800667c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	e006      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f992 	bl	800667c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800635e:	e170      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	bf00      	nop
    return;
 8006362:	e16e      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	2b01      	cmp	r3, #1
 800636a:	f040 814a 	bne.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8143 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 813c 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	f040 80b4 	bne.w	8006518 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8140 	beq.w	8006646 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f080 8139 	bcs.w	8006646 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	f000 8088 	beq.w	80064fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800641a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800642e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1d9      	bne.n	80063ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800645a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800645e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800646c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e1      	bne.n	8006436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800649c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fc f999 	bl	800282c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006502:	b29b      	uxth	r3, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8c0 	bl	8006690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006510:	e099      	b.n	8006646 <HAL_UART_IRQHandler+0x50e>
 8006512:	bf00      	nop
 8006514:	0800684b 	.word	0x0800684b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 808b 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8086 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006562:	647a      	str	r2, [r7, #68]	; 0x44
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e3      	bne.n	800653e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	623b      	str	r3, [r7, #32]
   return(result);
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800659a:	633a      	str	r2, [r7, #48]	; 0x30
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
 80065d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	617b      	str	r3, [r7, #20]
   return(result);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e3      	bne.n	80065bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f848 	bl	8006690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006600:	e023      	b.n	800664a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f929 	bl	8006872 <UART_Transmit_IT>
    return;
 8006620:	e014      	b.n	800664c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
 800662e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f969 	bl	8006912 <UART_EndTransmit_IT>
    return;
 8006640:	e004      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    return;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 800664a:	bf00      	nop
  }
}
 800664c:	37e8      	adds	r7, #232	; 0xe8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b090      	sub	sp, #64	; 0x40
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e050      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d04c      	beq.n	800675c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066c8:	f7fb fa76 	bl	8001bb8 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d241      	bcs.n	800675c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066f8:	637a      	str	r2, [r7, #52]	; 0x34
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	613b      	str	r3, [r7, #16]
   return(result);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3314      	adds	r3, #20
 800672a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800672c:	623a      	str	r2, [r7, #32]
 800672e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	61bb      	str	r3, [r7, #24]
   return(result);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e00f      	b.n	800677c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	429a      	cmp	r2, r3
 8006778:	d09f      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3740      	adds	r7, #64	; 0x40
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b095      	sub	sp, #84	; 0x54
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ac:	643a      	str	r2, [r7, #64]	; 0x40
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e5      	bne.n	800678c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e5      	bne.n	80067c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d119      	bne.n	8006830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	60bb      	str	r3, [r7, #8]
   return(result);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0310 	bic.w	r3, r3, #16
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	61ba      	str	r2, [r7, #24]
 800681e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6979      	ldr	r1, [r7, #20]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e5      	bne.n	80067fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800683e:	bf00      	nop
 8006840:	3754      	adds	r7, #84	; 0x54
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff ff09 	bl	800667c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b21      	cmp	r3, #33	; 0x21
 8006884:	d13e      	bne.n	8006904 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d114      	bne.n	80068ba <UART_Transmit_IT+0x48>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d110      	bne.n	80068ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]
 80068b8:	e008      	b.n	80068cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6211      	str	r1, [r2, #32]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10f      	bne.n	8006900 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006928:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fe8e 	bl	8006654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b08c      	sub	sp, #48	; 0x30
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b22      	cmp	r3, #34	; 0x22
 8006954:	f040 80ab 	bne.w	8006aae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d117      	bne.n	8006992 <UART_Receive_IT+0x50>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d113      	bne.n	8006992 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006980:	b29a      	uxth	r2, r3
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
 8006990:	e026      	b.n	80069e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a4:	d007      	beq.n	80069b6 <UART_Receive_IT+0x74>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <UART_Receive_IT+0x82>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e008      	b.n	80069d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d15a      	bne.n	8006aaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0220 	bic.w	r2, r2, #32
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d135      	bne.n	8006aa0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f023 0310 	bic.w	r3, r3, #16
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5a:	623a      	str	r2, [r7, #32]
 8006a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	69f9      	ldr	r1, [r7, #28]
 8006a60:	6a3a      	ldr	r2, [r7, #32]
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d10a      	bne.n	8006a92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fdf9 	bl	8006690 <HAL_UARTEx_RxEventCallback>
 8006a9e:	e002      	b.n	8006aa6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fde1 	bl	8006668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e002      	b.n	8006ab0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006abc:	b0c0      	sub	sp, #256	; 0x100
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	68d9      	ldr	r1, [r3, #12]
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	ea40 0301 	orr.w	r3, r0, r1
 8006ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b10:	f021 010c 	bic.w	r1, r1, #12
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b32:	6999      	ldr	r1, [r3, #24]
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	ea40 0301 	orr.w	r3, r0, r1
 8006b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b8f      	ldr	r3, [pc, #572]	; (8006d84 <UART_SetConfig+0x2cc>)
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d005      	beq.n	8006b58 <UART_SetConfig+0xa0>
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b8d      	ldr	r3, [pc, #564]	; (8006d88 <UART_SetConfig+0x2d0>)
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d104      	bne.n	8006b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b58:	f7fe f9dc 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8006b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b60:	e003      	b.n	8006b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b62:	f7fe f9c3 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8006b66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b74:	f040 810c 	bne.w	8006d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	1891      	adds	r1, r2, r2
 8006b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b92:	415b      	adcs	r3, r3
 8006b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	eb12 0801 	adds.w	r8, r2, r1
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	eb43 0901 	adc.w	r9, r3, r1
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bba:	4690      	mov	r8, r2
 8006bbc:	4699      	mov	r9, r3
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	eb18 0303 	adds.w	r3, r8, r3
 8006bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bc8:	462b      	mov	r3, r5
 8006bca:	eb49 0303 	adc.w	r3, r9, r3
 8006bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006be6:	460b      	mov	r3, r1
 8006be8:	18db      	adds	r3, r3, r3
 8006bea:	653b      	str	r3, [r7, #80]	; 0x50
 8006bec:	4613      	mov	r3, r2
 8006bee:	eb42 0303 	adc.w	r3, r2, r3
 8006bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bfc:	f7f9 faf2 	bl	80001e4 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4b61      	ldr	r3, [pc, #388]	; (8006d8c <UART_SetConfig+0x2d4>)
 8006c06:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	011c      	lsls	r4, r3, #4
 8006c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	1891      	adds	r1, r2, r2
 8006c26:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c28:	415b      	adcs	r3, r3
 8006c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c30:	4641      	mov	r1, r8
 8006c32:	eb12 0a01 	adds.w	sl, r2, r1
 8006c36:	4649      	mov	r1, r9
 8006c38:	eb43 0b01 	adc.w	fp, r3, r1
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c50:	4692      	mov	sl, r2
 8006c52:	469b      	mov	fp, r3
 8006c54:	4643      	mov	r3, r8
 8006c56:	eb1a 0303 	adds.w	r3, sl, r3
 8006c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	eb4b 0303 	adc.w	r3, fp, r3
 8006c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	18db      	adds	r3, r3, r3
 8006c80:	643b      	str	r3, [r7, #64]	; 0x40
 8006c82:	4613      	mov	r3, r2
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c92:	f7f9 faa7 	bl	80001e4 <__aeabi_uldivmod>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <UART_SetConfig+0x2d4>)
 8006c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2264      	movs	r2, #100	; 0x64
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	1acb      	subs	r3, r1, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <UART_SetConfig+0x2d4>)
 8006cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cc0:	441c      	add	r4, r3
 8006cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	464b      	mov	r3, r9
 8006cd8:	1891      	adds	r1, r2, r2
 8006cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cdc:	415b      	adcs	r3, r3
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	1851      	adds	r1, r2, r1
 8006ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8006cea:	4649      	mov	r1, r9
 8006cec:	414b      	adcs	r3, r1
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	00cb      	lsls	r3, r1, #3
 8006d00:	4651      	mov	r1, sl
 8006d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d06:	4651      	mov	r1, sl
 8006d08:	00ca      	lsls	r2, r1, #3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4642      	mov	r2, r8
 8006d12:	189b      	adds	r3, r3, r2
 8006d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d18:	464b      	mov	r3, r9
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	eb42 0303 	adc.w	r3, r2, r3
 8006d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d38:	460b      	mov	r3, r1
 8006d3a:	18db      	adds	r3, r3, r3
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d3e:	4613      	mov	r3, r2
 8006d40:	eb42 0303 	adc.w	r3, r2, r3
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d4e:	f7f9 fa49 	bl	80001e4 <__aeabi_uldivmod>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <UART_SetConfig+0x2d4>)
 8006d58:	fba3 1302 	umull	r1, r3, r3, r2
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	2164      	movs	r1, #100	; 0x64
 8006d60:	fb01 f303 	mul.w	r3, r1, r3
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	3332      	adds	r3, #50	; 0x32
 8006d6a:	4a08      	ldr	r2, [pc, #32]	; (8006d8c <UART_SetConfig+0x2d4>)
 8006d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d70:	095b      	lsrs	r3, r3, #5
 8006d72:	f003 0207 	and.w	r2, r3, #7
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4422      	add	r2, r4
 8006d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d80:	e105      	b.n	8006f8e <UART_SetConfig+0x4d6>
 8006d82:	bf00      	nop
 8006d84:	40011000 	.word	0x40011000
 8006d88:	40011400 	.word	0x40011400
 8006d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006da2:	4642      	mov	r2, r8
 8006da4:	464b      	mov	r3, r9
 8006da6:	1891      	adds	r1, r2, r2
 8006da8:	6239      	str	r1, [r7, #32]
 8006daa:	415b      	adcs	r3, r3
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
 8006dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006db2:	4641      	mov	r1, r8
 8006db4:	1854      	adds	r4, r2, r1
 8006db6:	4649      	mov	r1, r9
 8006db8:	eb43 0501 	adc.w	r5, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	00eb      	lsls	r3, r5, #3
 8006dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dca:	00e2      	lsls	r2, r4, #3
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	18e3      	adds	r3, r4, r3
 8006dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dd8:	464b      	mov	r3, r9
 8006dda:	eb45 0303 	adc.w	r3, r5, r3
 8006dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dfe:	4629      	mov	r1, r5
 8006e00:	008b      	lsls	r3, r1, #2
 8006e02:	4621      	mov	r1, r4
 8006e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e08:	4621      	mov	r1, r4
 8006e0a:	008a      	lsls	r2, r1, #2
 8006e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e10:	f7f9 f9e8 	bl	80001e4 <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4b60      	ldr	r3, [pc, #384]	; (8006f9c <UART_SetConfig+0x4e4>)
 8006e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	011c      	lsls	r4, r3, #4
 8006e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	1891      	adds	r1, r2, r2
 8006e3a:	61b9      	str	r1, [r7, #24]
 8006e3c:	415b      	adcs	r3, r3
 8006e3e:	61fb      	str	r3, [r7, #28]
 8006e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e44:	4641      	mov	r1, r8
 8006e46:	1851      	adds	r1, r2, r1
 8006e48:	6139      	str	r1, [r7, #16]
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	414b      	adcs	r3, r1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e5c:	4659      	mov	r1, fp
 8006e5e:	00cb      	lsls	r3, r1, #3
 8006e60:	4651      	mov	r1, sl
 8006e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e66:	4651      	mov	r1, sl
 8006e68:	00ca      	lsls	r2, r1, #3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4642      	mov	r2, r8
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e78:	464b      	mov	r3, r9
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	008b      	lsls	r3, r1, #2
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	008a      	lsls	r2, r1, #2
 8006eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006eae:	f7f9 f999 	bl	80001e4 <__aeabi_uldivmod>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <UART_SetConfig+0x4e4>)
 8006eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	2164      	movs	r1, #100	; 0x64
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	3332      	adds	r3, #50	; 0x32
 8006eca:	4a34      	ldr	r2, [pc, #208]	; (8006f9c <UART_SetConfig+0x4e4>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ed6:	441c      	add	r4, r3
 8006ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006edc:	2200      	movs	r2, #0
 8006ede:	673b      	str	r3, [r7, #112]	; 0x70
 8006ee0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ee2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	1891      	adds	r1, r2, r2
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	415b      	adcs	r3, r3
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	1851      	adds	r1, r2, r1
 8006efa:	6039      	str	r1, [r7, #0]
 8006efc:	4649      	mov	r1, r9
 8006efe:	414b      	adcs	r3, r1
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f0e:	4659      	mov	r1, fp
 8006f10:	00cb      	lsls	r3, r1, #3
 8006f12:	4651      	mov	r1, sl
 8006f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f18:	4651      	mov	r1, sl
 8006f1a:	00ca      	lsls	r2, r1, #3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4603      	mov	r3, r0
 8006f22:	4642      	mov	r2, r8
 8006f24:	189b      	adds	r3, r3, r2
 8006f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f28:	464b      	mov	r3, r9
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	eb42 0303 	adc.w	r3, r2, r3
 8006f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	008b      	lsls	r3, r1, #2
 8006f4e:	4641      	mov	r1, r8
 8006f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f54:	4641      	mov	r1, r8
 8006f56:	008a      	lsls	r2, r1, #2
 8006f58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f5c:	f7f9 f942 	bl	80001e4 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <UART_SetConfig+0x4e4>)
 8006f66:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	2164      	movs	r1, #100	; 0x64
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	3332      	adds	r3, #50	; 0x32
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <UART_SetConfig+0x4e4>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4422      	add	r2, r4
 8006f8c:	609a      	str	r2, [r3, #8]
}
 8006f8e:	bf00      	nop
 8006f90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f94:	46bd      	mov	sp, r7
 8006f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9a:	bf00      	nop
 8006f9c:	51eb851f 	.word	0x51eb851f

08006fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	f107 001c 	add.w	r0, r7, #28
 8006fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d122      	bne.n	8006ffe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fbee 	bl	80087d4 <USB_CoreReset>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	e01a      	b.n	8007034 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fbe2 	bl	80087d4 <USB_CoreReset>
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
 8007026:	e005      	b.n	8007034 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b01      	cmp	r3, #1
 8007038:	d10b      	bne.n	8007052 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f043 0206 	orr.w	r2, r3, #6
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800705e:	b004      	add	sp, #16
 8007060:	4770      	bx	lr
	...

08007064 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d165      	bne.n	8007144 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4a41      	ldr	r2, [pc, #260]	; (8007180 <USB_SetTurnaroundTime+0x11c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d906      	bls.n	800708e <USB_SetTurnaroundTime+0x2a>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4a40      	ldr	r2, [pc, #256]	; (8007184 <USB_SetTurnaroundTime+0x120>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d202      	bcs.n	800708e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007088:	230f      	movs	r3, #15
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e062      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4a3c      	ldr	r2, [pc, #240]	; (8007184 <USB_SetTurnaroundTime+0x120>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d306      	bcc.n	80070a4 <USB_SetTurnaroundTime+0x40>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4a3b      	ldr	r2, [pc, #236]	; (8007188 <USB_SetTurnaroundTime+0x124>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d202      	bcs.n	80070a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800709e:	230e      	movs	r3, #14
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e057      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4a38      	ldr	r2, [pc, #224]	; (8007188 <USB_SetTurnaroundTime+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d306      	bcc.n	80070ba <USB_SetTurnaroundTime+0x56>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4a37      	ldr	r2, [pc, #220]	; (800718c <USB_SetTurnaroundTime+0x128>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d202      	bcs.n	80070ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070b4:	230d      	movs	r3, #13
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e04c      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4a33      	ldr	r2, [pc, #204]	; (800718c <USB_SetTurnaroundTime+0x128>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d306      	bcc.n	80070d0 <USB_SetTurnaroundTime+0x6c>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4a32      	ldr	r2, [pc, #200]	; (8007190 <USB_SetTurnaroundTime+0x12c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d802      	bhi.n	80070d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070ca:	230c      	movs	r3, #12
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e041      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <USB_SetTurnaroundTime+0x12c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d906      	bls.n	80070e6 <USB_SetTurnaroundTime+0x82>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a2e      	ldr	r2, [pc, #184]	; (8007194 <USB_SetTurnaroundTime+0x130>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d802      	bhi.n	80070e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070e0:	230b      	movs	r3, #11
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e036      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <USB_SetTurnaroundTime+0x130>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d906      	bls.n	80070fc <USB_SetTurnaroundTime+0x98>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a29      	ldr	r2, [pc, #164]	; (8007198 <USB_SetTurnaroundTime+0x134>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d802      	bhi.n	80070fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80070f6:	230a      	movs	r3, #10
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e02b      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a26      	ldr	r2, [pc, #152]	; (8007198 <USB_SetTurnaroundTime+0x134>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d906      	bls.n	8007112 <USB_SetTurnaroundTime+0xae>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4a25      	ldr	r2, [pc, #148]	; (800719c <USB_SetTurnaroundTime+0x138>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d202      	bcs.n	8007112 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800710c:	2309      	movs	r3, #9
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e020      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a21      	ldr	r2, [pc, #132]	; (800719c <USB_SetTurnaroundTime+0x138>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d306      	bcc.n	8007128 <USB_SetTurnaroundTime+0xc4>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <USB_SetTurnaroundTime+0x13c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d802      	bhi.n	8007128 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007122:	2308      	movs	r3, #8
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e015      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <USB_SetTurnaroundTime+0x13c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d906      	bls.n	800713e <USB_SetTurnaroundTime+0xda>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <USB_SetTurnaroundTime+0x140>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d202      	bcs.n	800713e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007138:	2307      	movs	r3, #7
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e00a      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800713e:	2306      	movs	r3, #6
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	e007      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800714a:	2309      	movs	r3, #9
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e001      	b.n	8007154 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007150:	2309      	movs	r3, #9
 8007152:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	00d8acbf 	.word	0x00d8acbf
 8007184:	00e4e1c0 	.word	0x00e4e1c0
 8007188:	00f42400 	.word	0x00f42400
 800718c:	01067380 	.word	0x01067380
 8007190:	011a499f 	.word	0x011a499f
 8007194:	01312cff 	.word	0x01312cff
 8007198:	014ca43f 	.word	0x014ca43f
 800719c:	016e3600 	.word	0x016e3600
 80071a0:	01a6ab1f 	.word	0x01a6ab1f
 80071a4:	01e84800 	.word	0x01e84800

080071a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f043 0201 	orr.w	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f023 0201 	bic.w	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d115      	bne.n	800723a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800721a:	2001      	movs	r0, #1
 800721c:	f7fa fcd8 	bl	8001bd0 <HAL_Delay>
      ms++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fa45 	bl	80086b6 <USB_GetMode>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d01e      	beq.n	8007270 <USB_SetCurrentMode+0x84>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b31      	cmp	r3, #49	; 0x31
 8007236:	d9f0      	bls.n	800721a <USB_SetCurrentMode+0x2e>
 8007238:	e01a      	b.n	8007270 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d115      	bne.n	800726c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800724c:	2001      	movs	r0, #1
 800724e:	f7fa fcbf 	bl	8001bd0 <HAL_Delay>
      ms++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fa2c 	bl	80086b6 <USB_GetMode>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <USB_SetCurrentMode+0x84>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b31      	cmp	r3, #49	; 0x31
 8007268:	d9f0      	bls.n	800724c <USB_SetCurrentMode+0x60>
 800726a:	e001      	b.n	8007270 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e005      	b.n	800727c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b32      	cmp	r3, #50	; 0x32
 8007274:	d101      	bne.n	800727a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007284:	b084      	sub	sp, #16
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e009      	b.n	80072b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3340      	adds	r3, #64	; 0x40
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3301      	adds	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b0e      	cmp	r3, #14
 80072bc:	d9f2      	bls.n	80072a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11c      	bne.n	80072fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d2:	f043 0302 	orr.w	r3, r3, #2
 80072d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38
 80072fc:	e00b      	b.n	8007316 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800731c:	461a      	mov	r2, r3
 800731e:	2300      	movs	r3, #0
 8007320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	4619      	mov	r1, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	461a      	mov	r2, r3
 8007332:	680b      	ldr	r3, [r1, #0]
 8007334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	2b01      	cmp	r3, #1
 800733a:	d10c      	bne.n	8007356 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007342:	2100      	movs	r1, #0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f965 	bl	8007614 <USB_SetDevSpeed>
 800734a:	e008      	b.n	800735e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800734c:	2101      	movs	r1, #1
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f960 	bl	8007614 <USB_SetDevSpeed>
 8007354:	e003      	b.n	800735e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007356:	2103      	movs	r1, #3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f95b 	bl	8007614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800735e:	2110      	movs	r1, #16
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8f3 	bl	800754c <USB_FlushTxFifo>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f91f 	bl	80075b4 <USB_FlushRxFifo>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007386:	461a      	mov	r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	461a      	mov	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	e043      	b.n	8007432 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c0:	d118      	bne.n	80073f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	461a      	mov	r2, r3
 80073d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	e013      	b.n	8007406 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	461a      	mov	r2, r3
 80073ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e008      	b.n	8007406 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	461a      	mov	r2, r3
 8007426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800742a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	429a      	cmp	r2, r3
 8007438:	d3b7      	bcc.n	80073aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	e043      	b.n	80074c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007456:	d118      	bne.n	800748a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	461a      	mov	r2, r3
 800746c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e013      	b.n	800749c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	461a      	mov	r2, r3
 8007482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e008      	b.n	800749c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	461a      	mov	r2, r3
 8007498:	2300      	movs	r3, #0
 800749a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	461a      	mov	r2, r3
 80074aa:	2300      	movs	r3, #0
 80074ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	461a      	mov	r2, r3
 80074bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d3b7      	bcc.n	8007440 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f043 0210 	orr.w	r2, r3, #16
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <USB_DevInit+0x2c4>)
 800750a:	4313      	orrs	r3, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f043 0208 	orr.w	r2, r3, #8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d107      	bne.n	8007538 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007530:	f043 0304 	orr.w	r3, r3, #4
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007544:	b004      	add	sp, #16
 8007546:	4770      	bx	lr
 8007548:	803c3800 	.word	0x803c3800

0800754c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a13      	ldr	r2, [pc, #76]	; (80075b0 <USB_FlushTxFifo+0x64>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d901      	bls.n	800756c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e01b      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	daf2      	bge.n	800755a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	019b      	lsls	r3, r3, #6
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4a08      	ldr	r2, [pc, #32]	; (80075b0 <USB_FlushTxFifo+0x64>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d901      	bls.n	8007596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e006      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d0f0      	beq.n	8007584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	00030d40 	.word	0x00030d40

080075b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a11      	ldr	r2, [pc, #68]	; (8007610 <USB_FlushRxFifo+0x5c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e018      	b.n	8007604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	daf2      	bge.n	80075c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2210      	movs	r2, #16
 80075e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a08      	ldr	r2, [pc, #32]	; (8007610 <USB_FlushRxFifo+0x5c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e006      	b.n	8007604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d0f0      	beq.n	80075e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	00030d40 	.word	0x00030d40

08007614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	68f9      	ldr	r1, [r7, #12]
 8007630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007634:	4313      	orrs	r3, r2
 8007636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007646:	b480      	push	{r7}
 8007648:	b087      	sub	sp, #28
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0306 	and.w	r3, r3, #6
 800765e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007666:	2300      	movs	r3, #0
 8007668:	75fb      	strb	r3, [r7, #23]
 800766a:	e00a      	b.n	8007682 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d002      	beq.n	8007678 <USB_GetDevSpeed+0x32>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b06      	cmp	r3, #6
 8007676:	d102      	bne.n	800767e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007678:	2302      	movs	r3, #2
 800767a:	75fb      	strb	r3, [r7, #23]
 800767c:	e001      	b.n	8007682 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800767e:	230f      	movs	r3, #15
 8007680:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d13a      	bne.n	8007722 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	2101      	movs	r1, #1
 80076be:	fa01 f303 	lsl.w	r3, r1, r3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	68f9      	ldr	r1, [r7, #12]
 80076c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ca:	4313      	orrs	r3, r2
 80076cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d155      	bne.n	8007790 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007700:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	059b      	lsls	r3, r3, #22
 8007706:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007708:	4313      	orrs	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	e036      	b.n	8007790 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	2101      	movs	r1, #1
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007740:	4313      	orrs	r3, r2
 8007742:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11a      	bne.n	8007790 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	791b      	ldrb	r3, [r3, #4]
 8007774:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007776:	430b      	orrs	r3, r1
 8007778:	4313      	orrs	r3, r2
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d161      	bne.n	8007880 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d2:	d11f      	bne.n	8007814 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	2101      	movs	r1, #1
 8007826:	fa01 f303 	lsl.w	r3, r1, r3
 800782a:	b29b      	uxth	r3, r3
 800782c:	43db      	mvns	r3, r3
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007834:	4013      	ands	r3, r2
 8007836:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	2101      	movs	r1, #1
 800784a:	fa01 f303 	lsl.w	r3, r1, r3
 800784e:	b29b      	uxth	r3, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007858:	4013      	ands	r3, r2
 800785a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	0159      	lsls	r1, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	440b      	add	r3, r1
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	4619      	mov	r1, r3
 8007878:	4b35      	ldr	r3, [pc, #212]	; (8007950 <USB_DeactivateEndpoint+0x1b0>)
 800787a:	4013      	ands	r3, r2
 800787c:	600b      	str	r3, [r1, #0]
 800787e:	e060      	b.n	8007942 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007896:	d11f      	bne.n	80078d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	2101      	movs	r1, #1
 80078ea:	fa01 f303 	lsl.w	r3, r1, r3
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	43db      	mvns	r3, r3
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f8:	4013      	ands	r3, r2
 80078fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f303 	lsl.w	r3, r1, r3
 8007912:	041b      	lsls	r3, r3, #16
 8007914:	43db      	mvns	r3, r3
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800791c:	4013      	ands	r3, r2
 800791e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	0159      	lsls	r1, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	440b      	add	r3, r1
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	4619      	mov	r1, r3
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <USB_DeactivateEndpoint+0x1b4>)
 800793e:	4013      	ands	r3, r2
 8007940:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	ec337800 	.word	0xec337800
 8007954:	eff37800 	.word	0xeff37800

08007958 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af02      	add	r7, sp, #8
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b01      	cmp	r3, #1
 8007976:	f040 815c 	bne.w	8007c32 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d132      	bne.n	80079e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	0cdb      	lsrs	r3, r3, #19
 80079e2:	04db      	lsls	r3, r3, #19
 80079e4:	6113      	str	r3, [r2, #16]
 80079e6:	e074      	b.n	8007ad2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a02:	0cdb      	lsrs	r3, r3, #19
 8007a04:	04db      	lsls	r3, r3, #19
 8007a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6999      	ldr	r1, [r3, #24]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	440b      	add	r3, r1
 8007a44:	1e59      	subs	r1, r3, #1
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a50:	4b9d      	ldr	r3, [pc, #628]	; (8007cc8 <USB_EPStartXfer+0x370>)
 8007a52:	400b      	ands	r3, r1
 8007a54:	69b9      	ldr	r1, [r7, #24]
 8007a56:	0148      	lsls	r0, r1, #5
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	4401      	add	r1, r0
 8007a5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a60:	4313      	orrs	r3, r2
 8007a62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a7a:	69b9      	ldr	r1, [r7, #24]
 8007a7c:	0148      	lsls	r0, r1, #5
 8007a7e:	69f9      	ldr	r1, [r7, #28]
 8007a80:	4401      	add	r1, r0
 8007a82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a86:	4313      	orrs	r3, r2
 8007a88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d11f      	bne.n	8007ad2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ab0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d14b      	bne.n	8007b70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	461a      	mov	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	791b      	ldrb	r3, [r3, #4]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d128      	bne.n	8007b4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d110      	bne.n	8007b2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	e00f      	b.n	8007b4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e133      	b.n	8007dd8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	791b      	ldrb	r3, [r3, #4]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d015      	beq.n	8007bc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 811b 	beq.w	8007dd8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	634b      	str	r3, [r1, #52]	; 0x34
 8007bc2:	e109      	b.n	8007dd8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d110      	bne.n	8007bf6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e00f      	b.n	8007c16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6919      	ldr	r1, [r3, #16]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	b298      	uxth	r0, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fade 	bl	80081ec <USB_WritePacket>
 8007c30:	e0d2      	b.n	8007dd8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c4c:	0cdb      	lsrs	r3, r3, #19
 8007c4e:	04db      	lsls	r3, r3, #19
 8007c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d126      	bne.n	8007ccc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	0148      	lsls	r0, r1, #5
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	0151      	lsls	r1, r2, #5
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	440a      	add	r2, r1
 8007cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc2:	6113      	str	r3, [r2, #16]
 8007cc4:	e03a      	b.n	8007d3c <USB_EPStartXfer+0x3e4>
 8007cc6:	bf00      	nop
 8007cc8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	1e5a      	subs	r2, r3, #1
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	8afa      	ldrh	r2, [r7, #22]
 8007ce8:	fb03 f202 	mul.w	r2, r3, r2
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	04d9      	lsls	r1, r3, #19
 8007d02:	4b38      	ldr	r3, [pc, #224]	; (8007de4 <USB_EPStartXfer+0x48c>)
 8007d04:	400b      	ands	r3, r1
 8007d06:	69b9      	ldr	r1, [r7, #24]
 8007d08:	0148      	lsls	r0, r1, #5
 8007d0a:	69f9      	ldr	r1, [r7, #28]
 8007d0c:	4401      	add	r1, r0
 8007d0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d12:	4313      	orrs	r3, r2
 8007d14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d2c:	69b9      	ldr	r1, [r7, #24]
 8007d2e:	0148      	lsls	r0, r1, #5
 8007d30:	69f9      	ldr	r1, [r7, #28]
 8007d32:	4401      	add	r1, r0
 8007d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d10d      	bne.n	8007d5e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6919      	ldr	r1, [r3, #16]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5a:	460a      	mov	r2, r1
 8007d5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d128      	bne.n	8007db8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d110      	bne.n	8007d98 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e00f      	b.n	8007db8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3720      	adds	r7, #32
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	1ff80000 	.word	0x1ff80000

08007de8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	f040 80ce 	bne.w	8007fa6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d132      	bne.n	8007e78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e70:	0cdb      	lsrs	r3, r3, #19
 8007e72:	04db      	lsls	r3, r3, #19
 8007e74:	6113      	str	r3, [r2, #16]
 8007e76:	e04e      	b.n	8007f16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e92:	0cdb      	lsrs	r3, r3, #19
 8007e94:	04db      	lsls	r3, r3, #19
 8007e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	699a      	ldr	r2, [r3, #24]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d903      	bls.n	8007ed0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f06:	6939      	ldr	r1, [r7, #16]
 8007f08:	0148      	lsls	r0, r1, #5
 8007f0a:	6979      	ldr	r1, [r7, #20]
 8007f0c:	4401      	add	r1, r0
 8007f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f12:	4313      	orrs	r3, r2
 8007f14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d11e      	bne.n	8007f5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d009      	beq.n	8007f38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	461a      	mov	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	e097      	b.n	800808a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8083 	beq.w	800808a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	2101      	movs	r1, #1
 8007f96:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	634b      	str	r3, [r1, #52]	; 0x34
 8007fa4:	e071      	b.n	800808a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc0:	0cdb      	lsrs	r3, r3, #19
 8007fc2:	04db      	lsls	r3, r3, #19
 8007fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008038:	6939      	ldr	r1, [r7, #16]
 800803a:	0148      	lsls	r0, r1, #5
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	4401      	add	r1, r0
 8008040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008044:	4313      	orrs	r3, r2
 8008046:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d10d      	bne.n	800806a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6919      	ldr	r1, [r3, #16]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008066:	460a      	mov	r2, r1
 8008068:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008088:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d14a      	bne.n	800814c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ce:	f040 8086 	bne.w	80081de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008118:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f242 7210 	movw	r2, #10000	; 0x2710
 8008126:	4293      	cmp	r3, r2
 8008128:	d902      	bls.n	8008130 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
          break;
 800812e:	e056      	b.n	80081de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008148:	d0e7      	beq.n	800811a <USB_EPStopXfer+0x82>
 800814a:	e048      	b.n	80081de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d13b      	bne.n	80081de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008188:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d902      	bls.n	80081c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	75fb      	strb	r3, [r7, #23]
          break;
 80081c2:	e00c      	b.n	80081de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081dc:	d0e7      	beq.n	80081ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b089      	sub	sp, #36	; 0x24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4611      	mov	r1, r2
 80081f8:	461a      	mov	r2, r3
 80081fa:	460b      	mov	r3, r1
 80081fc:	71fb      	strb	r3, [r7, #7]
 80081fe:	4613      	mov	r3, r2
 8008200:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800820a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d123      	bne.n	800825a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008212:	88bb      	ldrh	r3, [r7, #4]
 8008214:	3303      	adds	r3, #3
 8008216:	089b      	lsrs	r3, r3, #2
 8008218:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	e018      	b.n	8008252 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	031a      	lsls	r2, r3, #12
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	4413      	add	r3, r2
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	461a      	mov	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	3301      	adds	r3, #1
 8008238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	3301      	adds	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	3301      	adds	r3, #1
 8008244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	3301      	adds	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d3e2      	bcc.n	8008220 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3724      	adds	r7, #36	; 0x24
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008268:	b480      	push	{r7}
 800826a:	b08b      	sub	sp, #44	; 0x2c
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	089b      	lsrs	r3, r3, #2
 8008282:	b29b      	uxth	r3, r3
 8008284:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	623b      	str	r3, [r7, #32]
 8008292:	e014      	b.n	80082be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	601a      	str	r2, [r3, #0]
    pDest++;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	3301      	adds	r3, #1
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	3301      	adds	r3, #1
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	3301      	adds	r3, #1
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	3301      	adds	r3, #1
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	3301      	adds	r3, #1
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	6a3a      	ldr	r2, [r7, #32]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d3e6      	bcc.n	8008294 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082c6:	8bfb      	ldrh	r3, [r7, #30]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01e      	beq.n	800830a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d6:	461a      	mov	r2, r3
 80082d8:	f107 0310 	add.w	r3, r7, #16
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	701a      	strb	r2, [r3, #0]
      i++;
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	3301      	adds	r3, #1
 80082f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	3301      	adds	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80082fe:	8bfb      	ldrh	r3, [r7, #30]
 8008300:	3b01      	subs	r3, #1
 8008302:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008304:	8bfb      	ldrh	r3, [r7, #30]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1ea      	bne.n	80082e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800830c:	4618      	mov	r0, r3
 800830e:	372c      	adds	r7, #44	; 0x2c
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d12c      	bne.n	800838e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	db12      	blt.n	800836c <USB_EPSetStall+0x54>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00f      	beq.n	800836c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800836a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	e02b      	b.n	80083e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	db12      	blt.n	80083c6 <USB_EPSetStall+0xae>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00f      	beq.n	80083c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d128      	bne.n	8008462 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800842e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d003      	beq.n	8008440 <USB_EPClearStall+0x4c>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	2b02      	cmp	r3, #2
 800843e:	d138      	bne.n	80084b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	0151      	lsls	r1, r2, #5
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	440a      	add	r2, r1
 8008456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	e027      	b.n	80084b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800847c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008480:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	791b      	ldrb	r3, [r3, #4]
 8008486:	2b03      	cmp	r3, #3
 8008488:	d003      	beq.n	8008492 <USB_EPClearStall+0x9e>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	791b      	ldrb	r3, [r3, #4]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d10f      	bne.n	80084b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084fa:	4313      	orrs	r3, r2
 80084fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800853a:	f023 0302 	bic.w	r3, r3, #2
 800853e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008568:	f023 0303 	bic.w	r3, r3, #3
 800856c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800857c:	f043 0302 	orr.w	r3, r3, #2
 8008580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4013      	ands	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4013      	ands	r3, r2
 80085d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	0c1b      	lsrs	r3, r3, #16
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	4013      	ands	r3, r2
 800860c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	b29b      	uxth	r3, r3
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4013      	ands	r3, r2
 800864a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800864c:	68bb      	ldr	r3, [r7, #8]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800865a:	b480      	push	{r7}
 800865c:	b087      	sub	sp, #28
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	01db      	lsls	r3, r3, #7
 800868c:	b2db      	uxtb	r3, r3
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	4313      	orrs	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4013      	ands	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086a8:	68bb      	ldr	r3, [r7, #8]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	f003 0301 	and.w	r3, r3, #1
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b085      	sub	sp, #20
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	460b      	mov	r3, r1
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	333c      	adds	r3, #60	; 0x3c
 800872e:	3304      	adds	r3, #4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <USB_EP0_OutStart+0xb8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d90a      	bls.n	8008752 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800874c:	d101      	bne.n	8008752 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e037      	b.n	80087c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008758:	461a      	mov	r2, r3
 800875a:	2300      	movs	r3, #0
 800875c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800876c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008780:	f043 0318 	orr.w	r3, r3, #24
 8008784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008794:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008798:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10f      	bne.n	80087c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	4f54300a 	.word	0x4f54300a

080087d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4a13      	ldr	r2, [pc, #76]	; (8008838 <USB_CoreReset+0x64>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d901      	bls.n	80087f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e01b      	b.n	800882a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	daf2      	bge.n	80087e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f043 0201 	orr.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4a09      	ldr	r2, [pc, #36]	; (8008838 <USB_CoreReset+0x64>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d901      	bls.n	800881c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e006      	b.n	800882a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b01      	cmp	r3, #1
 8008826:	d0f0      	beq.n	800880a <USB_CoreReset+0x36>

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	00030d40 	.word	0x00030d40

0800883c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008848:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800884c:	f002 fc90 	bl	800b170 <USBD_static_malloc>
 8008850:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	32b0      	adds	r2, #176	; 0xb0
 8008862:	2100      	movs	r1, #0
 8008864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008868:	2302      	movs	r3, #2
 800886a:	e0d4      	b.n	8008a16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800886c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008870:	2100      	movs	r1, #0
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f002 fce4 	bl	800b240 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32b0      	adds	r2, #176	; 0xb0
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32b0      	adds	r2, #176	; 0xb0
 8008892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7c1b      	ldrb	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d138      	bne.n	8008916 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088a4:	4b5e      	ldr	r3, [pc, #376]	; (8008a20 <USBD_CDC_Init+0x1e4>)
 80088a6:	7819      	ldrb	r1, [r3, #0]
 80088a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ac:	2202      	movs	r2, #2
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f002 fb3b 	bl	800af2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088b4:	4b5a      	ldr	r3, [pc, #360]	; (8008a20 <USBD_CDC_Init+0x1e4>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 020f 	and.w	r2, r3, #15
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	2201      	movs	r2, #1
 80088cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088ce:	4b55      	ldr	r3, [pc, #340]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 80088d0:	7819      	ldrb	r1, [r3, #0]
 80088d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d6:	2202      	movs	r2, #2
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f002 fb26 	bl	800af2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088de:	4b51      	ldr	r3, [pc, #324]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 020f 	and.w	r2, r3, #15
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088f6:	2201      	movs	r2, #1
 80088f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088fa:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <USBD_CDC_Init+0x1ec>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	3326      	adds	r3, #38	; 0x26
 8008910:	2210      	movs	r2, #16
 8008912:	801a      	strh	r2, [r3, #0]
 8008914:	e035      	b.n	8008982 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008916:	4b42      	ldr	r3, [pc, #264]	; (8008a20 <USBD_CDC_Init+0x1e4>)
 8008918:	7819      	ldrb	r1, [r3, #0]
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	2202      	movs	r2, #2
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f002 fb03 	bl	800af2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008924:	4b3e      	ldr	r3, [pc, #248]	; (8008a20 <USBD_CDC_Init+0x1e4>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 020f 	and.w	r2, r3, #15
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	3324      	adds	r3, #36	; 0x24
 800893a:	2201      	movs	r2, #1
 800893c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800893e:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 8008940:	7819      	ldrb	r1, [r3, #0]
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	2202      	movs	r2, #2
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f002 faef 	bl	800af2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800894c:	4b35      	ldr	r3, [pc, #212]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 020f 	and.w	r2, r3, #15
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008964:	2201      	movs	r2, #1
 8008966:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008968:	4b2f      	ldr	r3, [pc, #188]	; (8008a28 <USBD_CDC_Init+0x1ec>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 020f 	and.w	r2, r3, #15
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	3326      	adds	r3, #38	; 0x26
 800897e:	2210      	movs	r2, #16
 8008980:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <USBD_CDC_Init+0x1ec>)
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	2308      	movs	r3, #8
 8008988:	2203      	movs	r2, #3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f002 facd 	bl	800af2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008990:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <USBD_CDC_Init+0x1ec>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3324      	adds	r3, #36	; 0x24
 80089a6:	2201      	movs	r2, #1
 80089a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	33b0      	adds	r3, #176	; 0xb0
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089e0:	2302      	movs	r3, #2
 80089e2:	e018      	b.n	8008a16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7c1b      	ldrb	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089ec:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 80089ee:	7819      	ldrb	r1, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f002 fb84 	bl	800b108 <USBD_LL_PrepareReceive>
 8008a00:	e008      	b.n	8008a14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <USBD_CDC_Init+0x1e8>)
 8008a04:	7819      	ldrb	r1, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a0c:	2340      	movs	r3, #64	; 0x40
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f002 fb7a 	bl	800b108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000197 	.word	0x20000197
 8008a24:	20000198 	.word	0x20000198
 8008a28:	20000199 	.word	0x20000199

08008a2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a38:	4b3a      	ldr	r3, [pc, #232]	; (8008b24 <USBD_CDC_DeInit+0xf8>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fa99 	bl	800af76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a44:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <USBD_CDC_DeInit+0xf8>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 020f 	and.w	r2, r3, #15
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	440b      	add	r3, r1
 8008a58:	3324      	adds	r3, #36	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a5e:	4b32      	ldr	r3, [pc, #200]	; (8008b28 <USBD_CDC_DeInit+0xfc>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f002 fa86 	bl	800af76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a6a:	4b2f      	ldr	r3, [pc, #188]	; (8008b28 <USBD_CDC_DeInit+0xfc>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 020f 	and.w	r2, r3, #15
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a82:	2200      	movs	r2, #0
 8008a84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a86:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <USBD_CDC_DeInit+0x100>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f002 fa72 	bl	800af76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a92:	4b26      	ldr	r3, [pc, #152]	; (8008b2c <USBD_CDC_DeInit+0x100>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 020f 	and.w	r2, r3, #15
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3324      	adds	r3, #36	; 0x24
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008aac:	4b1f      	ldr	r3, [pc, #124]	; (8008b2c <USBD_CDC_DeInit+0x100>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	f003 020f 	and.w	r2, r3, #15
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	3326      	adds	r3, #38	; 0x26
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32b0      	adds	r2, #176	; 0xb0
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01f      	beq.n	8008b18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	33b0      	adds	r3, #176	; 0xb0
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32b0      	adds	r2, #176	; 0xb0
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f002 fb46 	bl	800b18c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32b0      	adds	r2, #176	; 0xb0
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000197 	.word	0x20000197
 8008b28:	20000198 	.word	0x20000198
 8008b2c:	20000199 	.word	0x20000199

08008b30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32b0      	adds	r2, #176	; 0xb0
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e0bf      	b.n	8008ce0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d050      	beq.n	8008c0e <USBD_CDC_Setup+0xde>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	f040 80af 	bne.w	8008cd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03a      	beq.n	8008bf0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da1b      	bge.n	8008bbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	33b0      	adds	r3, #176	; 0xb0
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	88d2      	ldrh	r2, [r2, #6]
 8008ba0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b07      	cmp	r3, #7
 8008ba8:	bf28      	it	cs
 8008baa:	2307      	movcs	r3, #7
 8008bac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	89fa      	ldrh	r2, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fd89 	bl	800a6cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bba:	e090      	b.n	8008cde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	785a      	ldrb	r2, [r3, #1]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	88db      	ldrh	r3, [r3, #6]
 8008bca:	2b3f      	cmp	r3, #63	; 0x3f
 8008bcc:	d803      	bhi.n	8008bd6 <USBD_CDC_Setup+0xa6>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	88db      	ldrh	r3, [r3, #6]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	e000      	b.n	8008bd8 <USBD_CDC_Setup+0xa8>
 8008bd6:	2240      	movs	r2, #64	; 0x40
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bde:	6939      	ldr	r1, [r7, #16]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008be6:	461a      	mov	r2, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fd9b 	bl	800a724 <USBD_CtlPrepareRx>
      break;
 8008bee:	e076      	b.n	8008cde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	33b0      	adds	r3, #176	; 0xb0
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	7850      	ldrb	r0, [r2, #1]
 8008c06:	2200      	movs	r2, #0
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	4798      	blx	r3
      break;
 8008c0c:	e067      	b.n	8008cde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b0b      	cmp	r3, #11
 8008c14:	d851      	bhi.n	8008cba <USBD_CDC_Setup+0x18a>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <USBD_CDC_Setup+0xec>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c4d 	.word	0x08008c4d
 8008c20:	08008cc9 	.word	0x08008cc9
 8008c24:	08008cbb 	.word	0x08008cbb
 8008c28:	08008cbb 	.word	0x08008cbb
 8008c2c:	08008cbb 	.word	0x08008cbb
 8008c30:	08008cbb 	.word	0x08008cbb
 8008c34:	08008cbb 	.word	0x08008cbb
 8008c38:	08008cbb 	.word	0x08008cbb
 8008c3c:	08008cbb 	.word	0x08008cbb
 8008c40:	08008cbb 	.word	0x08008cbb
 8008c44:	08008c77 	.word	0x08008c77
 8008c48:	08008ca1 	.word	0x08008ca1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d107      	bne.n	8008c68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c58:	f107 030a 	add.w	r3, r7, #10
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fd33 	bl	800a6cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c66:	e032      	b.n	8008cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fcbd 	bl	800a5ea <USBD_CtlError>
            ret = USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	75fb      	strb	r3, [r7, #23]
          break;
 8008c74:	e02b      	b.n	8008cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d107      	bne.n	8008c92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c82:	f107 030d 	add.w	r3, r7, #13
 8008c86:	2201      	movs	r2, #1
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fd1e 	bl	800a6cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c90:	e01d      	b.n	8008cce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fca8 	bl	800a5ea <USBD_CtlError>
            ret = USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c9e:	e016      	b.n	8008cce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d00f      	beq.n	8008ccc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 fc9b 	bl	800a5ea <USBD_CtlError>
            ret = USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cb8:	e008      	b.n	8008ccc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fc94 	bl	800a5ea <USBD_CtlError>
          ret = USBD_FAIL;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc6:	e002      	b.n	8008cce <USBD_CDC_Setup+0x19e>
          break;
 8008cc8:	bf00      	nop
 8008cca:	e008      	b.n	8008cde <USBD_CDC_Setup+0x1ae>
          break;
 8008ccc:	bf00      	nop
      }
      break;
 8008cce:	e006      	b.n	8008cde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 fc89 	bl	800a5ea <USBD_CtlError>
      ret = USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32b0      	adds	r2, #176	; 0xb0
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e065      	b.n	8008dde <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32b0      	adds	r2, #176	; 0xb0
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	3318      	adds	r3, #24
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d02f      	beq.n	8008d9c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	f003 020f 	and.w	r2, r3, #15
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	3318      	adds	r3, #24
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	f003 010f 	and.w	r1, r3, #15
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	440b      	add	r3, r1
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4403      	add	r3, r0
 8008d64:	3348      	adds	r3, #72	; 0x48
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d6c:	fb01 f303 	mul.w	r3, r1, r3
 8008d70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d112      	bne.n	8008d9c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	f003 020f 	and.w	r2, r3, #15
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	3318      	adds	r3, #24
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d8e:	78f9      	ldrb	r1, [r7, #3]
 8008d90:	2300      	movs	r3, #0
 8008d92:	2200      	movs	r2, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f002 f996 	bl	800b0c6 <USBD_LL_Transmit>
 8008d9a:	e01f      	b.n	8008ddc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	33b0      	adds	r3, #176	; 0xb0
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d010      	beq.n	8008ddc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	33b0      	adds	r3, #176	; 0xb0
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	; 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32b0      	adds	r2, #176	; 0xb0
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e01a      	b.n	8008e4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f002 f994 	bl	800b14a <USBD_LL_GetRxDataSize>
 8008e22:	4602      	mov	r2, r0
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	33b0      	adds	r3, #176	; 0xb0
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e48:	4611      	mov	r1, r2
 8008e4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	32b0      	adds	r2, #176	; 0xb0
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e025      	b.n	8008ec4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	33b0      	adds	r3, #176	; 0xb0
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01a      	beq.n	8008ec2 <USBD_CDC_EP0_RxReady+0x6c>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e92:	2bff      	cmp	r3, #255	; 0xff
 8008e94:	d015      	beq.n	8008ec2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	33b0      	adds	r3, #176	; 0xb0
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008eae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	22ff      	movs	r2, #255	; 0xff
 8008ebe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ed4:	2182      	movs	r1, #130	; 0x82
 8008ed6:	4818      	ldr	r0, [pc, #96]	; (8008f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ed8:	f000 fd4f 	bl	800997a <USBD_GetEpDesc>
 8008edc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ede:	2101      	movs	r1, #1
 8008ee0:	4815      	ldr	r0, [pc, #84]	; (8008f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ee2:	f000 fd4a 	bl	800997a <USBD_GetEpDesc>
 8008ee6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ee8:	2181      	movs	r1, #129	; 0x81
 8008eea:	4813      	ldr	r0, [pc, #76]	; (8008f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eec:	f000 fd45 	bl	800997a <USBD_GetEpDesc>
 8008ef0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2210      	movs	r2, #16
 8008efc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f0c:	711a      	strb	r2, [r3, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f20:	711a      	strb	r2, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2243      	movs	r2, #67	; 0x43
 8008f2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000154 	.word	0x20000154

08008f3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f44:	2182      	movs	r1, #130	; 0x82
 8008f46:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f48:	f000 fd17 	bl	800997a <USBD_GetEpDesc>
 8008f4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4815      	ldr	r0, [pc, #84]	; (8008fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f52:	f000 fd12 	bl	800997a <USBD_GetEpDesc>
 8008f56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f58:	2181      	movs	r1, #129	; 0x81
 8008f5a:	4813      	ldr	r0, [pc, #76]	; (8008fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f5c:	f000 fd0d 	bl	800997a <USBD_GetEpDesc>
 8008f60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2210      	movs	r2, #16
 8008f6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d006      	beq.n	8008f82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2200      	movs	r2, #0
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f042 0202 	orr.w	r2, r2, #2
 8008f80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	711a      	strb	r2, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f042 0202 	orr.w	r2, r2, #2
 8008f94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2243      	movs	r2, #67	; 0x43
 8008f9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f9c:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000154 	.word	0x20000154

08008fac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	; 0x82
 8008fb6:	4818      	ldr	r0, [pc, #96]	; (8009018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fb8:	f000 fcdf 	bl	800997a <USBD_GetEpDesc>
 8008fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4815      	ldr	r0, [pc, #84]	; (8009018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fc2:	f000 fcda 	bl	800997a <USBD_GetEpDesc>
 8008fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc8:	2181      	movs	r1, #129	; 0x81
 8008fca:	4813      	ldr	r0, [pc, #76]	; (8009018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fcc:	f000 fcd5 	bl	800997a <USBD_GetEpDesc>
 8008fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fec:	711a      	strb	r2, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009000:	711a      	strb	r2, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	; 0x43
 800900a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000154 	.word	0x20000154

0800901c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	220a      	movs	r2, #10
 8009028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000110 	.word	0x20000110

0800903c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800904c:	2303      	movs	r3, #3
 800904e:	e009      	b.n	8009064 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	33b0      	adds	r3, #176	; 0xb0
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	32b0      	adds	r2, #176	; 0xb0
 8009086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	e008      	b.n	80090a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	32b0      	adds	r2, #176	; 0xb0
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e004      	b.n	80090e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
	...

080090f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32b0      	adds	r2, #176	; 0xb0
 8009102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009106:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009108:	2301      	movs	r3, #1
 800910a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32b0      	adds	r2, #176	; 0xb0
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800911e:	2303      	movs	r3, #3
 8009120:	e025      	b.n	800916e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009128:	2b00      	cmp	r3, #0
 800912a:	d11f      	bne.n	800916c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2201      	movs	r2, #1
 8009130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009134:	4b10      	ldr	r3, [pc, #64]	; (8009178 <USBD_CDC_TransmitPacket+0x88>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 020f 	and.w	r2, r3, #15
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4403      	add	r3, r0
 800914e:	3318      	adds	r3, #24
 8009150:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <USBD_CDC_TransmitPacket+0x88>)
 8009154:	7819      	ldrb	r1, [r3, #0]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 ffaf 	bl	800b0c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000197 	.word	0x20000197

0800917c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	32b0      	adds	r2, #176	; 0xb0
 800918e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009192:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	32b0      	adds	r2, #176	; 0xb0
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e018      	b.n	80091dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7c1b      	ldrb	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <USBD_CDC_ReceivePacket+0x68>)
 80091b4:	7819      	ldrb	r1, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 ffa1 	bl	800b108 <USBD_LL_PrepareReceive>
 80091c6:	e008      	b.n	80091da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091c8:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <USBD_CDC_ReceivePacket+0x68>)
 80091ca:	7819      	ldrb	r1, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 ff97 	bl	800b108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000198 	.word	0x20000198

080091e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e01f      	b.n	8009240 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	79fa      	ldrb	r2, [r7, #7]
 8009232:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f001 fe11 	bl	800ae5c <USBD_LL_Init>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	e025      	b.n	80092ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	32ae      	adds	r2, #174	; 0xae
 8009272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00f      	beq.n	800929c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32ae      	adds	r2, #174	; 0xae
 8009286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	f107 020e 	add.w	r2, r7, #14
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	4602      	mov	r2, r0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fe19 	bl	800aef4 <USBD_LL_Start>
 80092c2:	4603      	mov	r3, r0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	4611      	mov	r1, r2
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	4618      	mov	r0, r3
 8009362:	f001 f908 	bl	800a576 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009374:	461a      	mov	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009382:	f003 031f 	and.w	r3, r3, #31
 8009386:	2b02      	cmp	r3, #2
 8009388:	d01a      	beq.n	80093c0 <USBD_LL_SetupStage+0x72>
 800938a:	2b02      	cmp	r3, #2
 800938c:	d822      	bhi.n	80093d4 <USBD_LL_SetupStage+0x86>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <USBD_LL_SetupStage+0x4a>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d00a      	beq.n	80093ac <USBD_LL_SetupStage+0x5e>
 8009396:	e01d      	b.n	80093d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fb5f 	bl	8009a64 <USBD_StdDevReq>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
      break;
 80093aa:	e020      	b.n	80093ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fbc7 	bl	8009b48 <USBD_StdItfReq>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
      break;
 80093be:	e016      	b.n	80093ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fc29 	bl	8009c20 <USBD_StdEPReq>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
      break;
 80093d2:	e00c      	b.n	80093ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fde6 	bl	800afb4 <USBD_LL_StallEP>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
      break;
 80093ec:	bf00      	nop
  }

  return ret;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	460b      	mov	r3, r1
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d16e      	bne.n	80094ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009416:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800941e:	2b03      	cmp	r3, #3
 8009420:	f040 8098 	bne.w	8009554 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	429a      	cmp	r2, r3
 800942e:	d913      	bls.n	8009458 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	4293      	cmp	r3, r2
 8009448:	bf28      	it	cs
 800944a:	4613      	movcs	r3, r2
 800944c:	461a      	mov	r2, r3
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f001 f984 	bl	800a75e <USBD_CtlContinueRx>
 8009456:	e07d      	b.n	8009554 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	2b02      	cmp	r3, #2
 8009464:	d014      	beq.n	8009490 <USBD_LL_DataOutStage+0x98>
 8009466:	2b02      	cmp	r3, #2
 8009468:	d81d      	bhi.n	80094a6 <USBD_LL_DataOutStage+0xae>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <USBD_LL_DataOutStage+0x7c>
 800946e:	2b01      	cmp	r3, #1
 8009470:	d003      	beq.n	800947a <USBD_LL_DataOutStage+0x82>
 8009472:	e018      	b.n	80094a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	75bb      	strb	r3, [r7, #22]
            break;
 8009478:	e018      	b.n	80094ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4619      	mov	r1, r3
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fa5e 	bl	8009946 <USBD_CoreFindIF>
 800948a:	4603      	mov	r3, r0
 800948c:	75bb      	strb	r3, [r7, #22]
            break;
 800948e:	e00d      	b.n	80094ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009496:	b2db      	uxtb	r3, r3
 8009498:	4619      	mov	r1, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fa60 	bl	8009960 <USBD_CoreFindEP>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75bb      	strb	r3, [r7, #22]
            break;
 80094a4:	e002      	b.n	80094ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75bb      	strb	r3, [r7, #22]
            break;
 80094aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80094ac:	7dbb      	ldrb	r3, [r7, #22]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d119      	bne.n	80094e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d113      	bne.n	80094e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80094be:	7dba      	ldrb	r2, [r7, #22]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	32ae      	adds	r2, #174	; 0xae
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00b      	beq.n	80094e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80094ce:	7dba      	ldrb	r2, [r7, #22]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094d6:	7dba      	ldrb	r2, [r7, #22]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	32ae      	adds	r2, #174	; 0xae
 80094dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f001 f94a 	bl	800a780 <USBD_CtlSendStatus>
 80094ec:	e032      	b.n	8009554 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	4619      	mov	r1, r3
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 fa31 	bl	8009960 <USBD_CoreFindEP>
 80094fe:	4603      	mov	r3, r0
 8009500:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009502:	7dbb      	ldrb	r3, [r7, #22]
 8009504:	2bff      	cmp	r3, #255	; 0xff
 8009506:	d025      	beq.n	8009554 <USBD_LL_DataOutStage+0x15c>
 8009508:	7dbb      	ldrb	r3, [r7, #22]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d122      	bne.n	8009554 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b03      	cmp	r3, #3
 8009518:	d117      	bne.n	800954a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800951a:	7dba      	ldrb	r2, [r7, #22]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	32ae      	adds	r2, #174	; 0xae
 8009520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00f      	beq.n	800954a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800952a:	7dba      	ldrb	r2, [r7, #22]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009532:	7dba      	ldrb	r2, [r7, #22]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	32ae      	adds	r2, #174	; 0xae
 8009538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	7afa      	ldrb	r2, [r7, #11]
 8009540:	4611      	mov	r1, r2
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	4798      	blx	r3
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	e000      	b.n	8009556 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	460b      	mov	r3, r1
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d16f      	bne.n	8009652 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3314      	adds	r3, #20
 8009576:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800957e:	2b02      	cmp	r3, #2
 8009580:	d15a      	bne.n	8009638 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	429a      	cmp	r2, r3
 800958c:	d914      	bls.n	80095b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 f8ac 	bl	800a702 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095aa:	2300      	movs	r3, #0
 80095ac:	2200      	movs	r2, #0
 80095ae:	2100      	movs	r1, #0
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fda9 	bl	800b108 <USBD_LL_PrepareReceive>
 80095b6:	e03f      	b.n	8009638 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d11c      	bne.n	80095fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d316      	bcc.n	80095fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095da:	429a      	cmp	r2, r3
 80095dc:	d20f      	bcs.n	80095fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095de:	2200      	movs	r2, #0
 80095e0:	2100      	movs	r1, #0
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f001 f88d 	bl	800a702 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095f0:	2300      	movs	r3, #0
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f001 fd86 	bl	800b108 <USBD_LL_PrepareReceive>
 80095fc:	e01c      	b.n	8009638 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d10f      	bne.n	800962a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800962a:	2180      	movs	r1, #128	; 0x80
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f001 fcc1 	bl	800afb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f001 f8b7 	bl	800a7a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d03a      	beq.n	80096b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fe42 	bl	80092cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009650:	e032      	b.n	80096b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009658:	b2db      	uxtb	r3, r3
 800965a:	4619      	mov	r1, r3
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f97f 	bl	8009960 <USBD_CoreFindEP>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2bff      	cmp	r3, #255	; 0xff
 800966a:	d025      	beq.n	80096b8 <USBD_LL_DataInStage+0x15a>
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d122      	bne.n	80096b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d11c      	bne.n	80096b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800967e:	7dfa      	ldrb	r2, [r7, #23]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	32ae      	adds	r2, #174	; 0xae
 8009684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d014      	beq.n	80096b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800968e:	7dfa      	ldrb	r2, [r7, #23]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009696:	7dfa      	ldrb	r2, [r7, #23]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	32ae      	adds	r2, #174	; 0xae
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	7afa      	ldrb	r2, [r7, #11]
 80096a4:	4611      	mov	r1, r2
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80096ae:	7dbb      	ldrb	r3, [r7, #22]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80096b4:	7dbb      	ldrb	r3, [r7, #22]
 80096b6:	e000      	b.n	80096ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d014      	beq.n	8009728 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00e      	beq.n	8009728 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6852      	ldr	r2, [r2, #4]
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	4611      	mov	r1, r2
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009728:	2340      	movs	r3, #64	; 0x40
 800972a:	2200      	movs	r2, #0
 800972c:	2100      	movs	r1, #0
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 fbfb 	bl	800af2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2240      	movs	r2, #64	; 0x40
 8009740:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009744:	2340      	movs	r3, #64	; 0x40
 8009746:	2200      	movs	r2, #0
 8009748:	2180      	movs	r1, #128	; 0x80
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fbed 	bl	800af2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2240      	movs	r2, #64	; 0x40
 800975a:	621a      	str	r2, [r3, #32]

  return ret;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009794:	b2da      	uxtb	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2204      	movs	r2, #4
 80097a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d106      	bne.n	80097d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d110      	bne.n	8009818 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	32ae      	adds	r2, #174	; 0xae
 8009838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e01c      	b.n	800987e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b03      	cmp	r3, #3
 800984e:	d115      	bne.n	800987c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	32ae      	adds	r2, #174	; 0xae
 800985a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32ae      	adds	r2, #174	; 0xae
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	32ae      	adds	r2, #174	; 0xae
 800989c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e01c      	b.n	80098e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d115      	bne.n	80098e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	32ae      	adds	r2, #174	; 0xae
 80098be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	32ae      	adds	r2, #174	; 0xae
 80098d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	4611      	mov	r1, r2
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	6852      	ldr	r2, [r2, #4]
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	4611      	mov	r1, r2
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009952:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800996c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b29b      	uxth	r3, r3
 800999e:	429a      	cmp	r2, r3
 80099a0:	d920      	bls.n	80099e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80099aa:	e013      	b.n	80099d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80099ac:	f107 030a 	add.w	r3, r7, #10
 80099b0:	4619      	mov	r1, r3
 80099b2:	6978      	ldr	r0, [r7, #20]
 80099b4:	f000 f81b 	bl	80099ee <USBD_GetNextDesc>
 80099b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d108      	bne.n	80099d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	789b      	ldrb	r3, [r3, #2]
 80099ca:	78fa      	ldrb	r2, [r7, #3]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d008      	beq.n	80099e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	885b      	ldrh	r3, [r3, #2]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	897b      	ldrh	r3, [r7, #10]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d8e5      	bhi.n	80099ac <USBD_GetEpDesc+0x32>
 80099e0:	e000      	b.n	80099e4 <USBD_GetEpDesc+0x6a>
          break;
 80099e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099e4:	693b      	ldr	r3, [r7, #16]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	881a      	ldrh	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4413      	add	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a46:	8a3b      	ldrh	r3, [r7, #16]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	b21a      	sxth	r2, r3
 8009a4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	b21b      	sxth	r3, r3
 8009a54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a56:	89fb      	ldrh	r3, [r7, #14]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	d005      	beq.n	8009a8a <USBD_StdDevReq+0x26>
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d857      	bhi.n	8009b32 <USBD_StdDevReq+0xce>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <USBD_StdDevReq+0x42>
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d153      	bne.n	8009b32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	32ae      	adds	r2, #174	; 0xae
 8009a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa4:	e04a      	b.n	8009b3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	2b09      	cmp	r3, #9
 8009aac:	d83b      	bhi.n	8009b26 <USBD_StdDevReq+0xc2>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBD_StdDevReq+0x50>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009b27 	.word	0x08009b27
 8009ac0:	08009b13 	.word	0x08009b13
 8009ac4:	08009b27 	.word	0x08009b27
 8009ac8:	08009ae7 	.word	0x08009ae7
 8009acc:	08009add 	.word	0x08009add
 8009ad0:	08009b27 	.word	0x08009b27
 8009ad4:	08009aff 	.word	0x08009aff
 8009ad8:	08009af1 	.word	0x08009af1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa3c 	bl	8009f5c <USBD_GetDescriptor>
          break;
 8009ae4:	e024      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fba1 	bl	800a230 <USBD_SetAddress>
          break;
 8009aee:	e01f      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fbe0 	bl	800a2b8 <USBD_SetConfig>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
          break;
 8009afc:	e018      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc83 	bl	800a40c <USBD_GetConfig>
          break;
 8009b06:	e013      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fcb4 	bl	800a478 <USBD_GetStatus>
          break;
 8009b10:	e00e      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fce3 	bl	800a4e0 <USBD_SetFeature>
          break;
 8009b1a:	e009      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fd07 	bl	800a532 <USBD_ClrFeature>
          break;
 8009b24:	e004      	b.n	8009b30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fd5e 	bl	800a5ea <USBD_CtlError>
          break;
 8009b2e:	bf00      	nop
      }
      break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fd58 	bl	800a5ea <USBD_CtlError>
      break;
 8009b3a:	bf00      	nop
  }

  return ret;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop

08009b48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b5e:	2b40      	cmp	r3, #64	; 0x40
 8009b60:	d005      	beq.n	8009b6e <USBD_StdItfReq+0x26>
 8009b62:	2b40      	cmp	r3, #64	; 0x40
 8009b64:	d852      	bhi.n	8009c0c <USBD_StdItfReq+0xc4>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <USBD_StdItfReq+0x26>
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d14e      	bne.n	8009c0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d840      	bhi.n	8009bfe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	889b      	ldrh	r3, [r3, #4]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d836      	bhi.n	8009bf4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	889b      	ldrh	r3, [r3, #4]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff fed9 	bl	8009946 <USBD_CoreFindIF>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	2bff      	cmp	r3, #255	; 0xff
 8009b9c:	d01d      	beq.n	8009bda <USBD_StdItfReq+0x92>
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11a      	bne.n	8009bda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ba4:	7bba      	ldrb	r2, [r7, #14]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	32ae      	adds	r2, #174	; 0xae
 8009baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00f      	beq.n	8009bd4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009bb4:	7bba      	ldrb	r2, [r7, #14]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bbc:	7bba      	ldrb	r2, [r7, #14]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32ae      	adds	r2, #174	; 0xae
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bd2:	e004      	b.n	8009bde <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009bd8:	e001      	b.n	8009bde <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	88db      	ldrh	r3, [r3, #6]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d110      	bne.n	8009c08 <USBD_StdItfReq+0xc0>
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10d      	bne.n	8009c08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fdc7 	bl	800a780 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bf2:	e009      	b.n	8009c08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fcf7 	bl	800a5ea <USBD_CtlError>
          break;
 8009bfc:	e004      	b.n	8009c08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fcf2 	bl	800a5ea <USBD_CtlError>
          break;
 8009c06:	e000      	b.n	8009c0a <USBD_StdItfReq+0xc2>
          break;
 8009c08:	bf00      	nop
      }
      break;
 8009c0a:	e004      	b.n	8009c16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fceb 	bl	800a5ea <USBD_CtlError>
      break;
 8009c14:	bf00      	nop
  }

  return ret;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	889b      	ldrh	r3, [r3, #4]
 8009c32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c3c:	2b40      	cmp	r3, #64	; 0x40
 8009c3e:	d007      	beq.n	8009c50 <USBD_StdEPReq+0x30>
 8009c40:	2b40      	cmp	r3, #64	; 0x40
 8009c42:	f200 817f 	bhi.w	8009f44 <USBD_StdEPReq+0x324>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d02a      	beq.n	8009ca0 <USBD_StdEPReq+0x80>
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	f040 817a 	bne.w	8009f44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fe83 	bl	8009960 <USBD_CoreFindEP>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c5e:	7b7b      	ldrb	r3, [r7, #13]
 8009c60:	2bff      	cmp	r3, #255	; 0xff
 8009c62:	f000 8174 	beq.w	8009f4e <USBD_StdEPReq+0x32e>
 8009c66:	7b7b      	ldrb	r3, [r7, #13]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f040 8170 	bne.w	8009f4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c6e:	7b7a      	ldrb	r2, [r7, #13]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c76:	7b7a      	ldrb	r2, [r7, #13]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	32ae      	adds	r2, #174	; 0xae
 8009c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 8163 	beq.w	8009f4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c88:	7b7a      	ldrb	r2, [r7, #13]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	32ae      	adds	r2, #174	; 0xae
 8009c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4798      	blx	r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c9e:	e156      	b.n	8009f4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	785b      	ldrb	r3, [r3, #1]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d008      	beq.n	8009cba <USBD_StdEPReq+0x9a>
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	f300 8145 	bgt.w	8009f38 <USBD_StdEPReq+0x318>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 809b 	beq.w	8009dea <USBD_StdEPReq+0x1ca>
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d03c      	beq.n	8009d32 <USBD_StdEPReq+0x112>
 8009cb8:	e13e      	b.n	8009f38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d002      	beq.n	8009ccc <USBD_StdEPReq+0xac>
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d016      	beq.n	8009cf8 <USBD_StdEPReq+0xd8>
 8009cca:	e02c      	b.n	8009d26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <USBD_StdEPReq+0xce>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d00a      	beq.n	8009cee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f969 	bl	800afb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce2:	2180      	movs	r1, #128	; 0x80
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f965 	bl	800afb4 <USBD_LL_StallEP>
 8009cea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cec:	e020      	b.n	8009d30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc7a 	bl	800a5ea <USBD_CtlError>
              break;
 8009cf6:	e01b      	b.n	8009d30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10e      	bne.n	8009d1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <USBD_StdEPReq+0xfe>
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b80      	cmp	r3, #128	; 0x80
 8009d0a:	d008      	beq.n	8009d1e <USBD_StdEPReq+0xfe>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	88db      	ldrh	r3, [r3, #6]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d104      	bne.n	8009d1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f94b 	bl	800afb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd2e 	bl	800a780 <USBD_CtlSendStatus>

              break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fc5e 	bl	800a5ea <USBD_CtlError>
              break;
 8009d2e:	bf00      	nop
          }
          break;
 8009d30:	e107      	b.n	8009f42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d002      	beq.n	8009d44 <USBD_StdEPReq+0x124>
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d016      	beq.n	8009d70 <USBD_StdEPReq+0x150>
 8009d42:	e04b      	b.n	8009ddc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00d      	beq.n	8009d66 <USBD_StdEPReq+0x146>
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	2b80      	cmp	r3, #128	; 0x80
 8009d4e:	d00a      	beq.n	8009d66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 f92d 	bl	800afb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d5a:	2180      	movs	r1, #128	; 0x80
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f929 	bl	800afb4 <USBD_LL_StallEP>
 8009d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d64:	e040      	b.n	8009de8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fc3e 	bl	800a5ea <USBD_CtlError>
              break;
 8009d6e:	e03b      	b.n	8009de8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	885b      	ldrh	r3, [r3, #2]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d136      	bne.n	8009de6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 f933 	bl	800aff2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fcf7 	bl	800a780 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff fde2 	bl	8009960 <USBD_CoreFindEP>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009da0:	7b7b      	ldrb	r3, [r7, #13]
 8009da2:	2bff      	cmp	r3, #255	; 0xff
 8009da4:	d01f      	beq.n	8009de6 <USBD_StdEPReq+0x1c6>
 8009da6:	7b7b      	ldrb	r3, [r7, #13]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11c      	bne.n	8009de6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009dac:	7b7a      	ldrb	r2, [r7, #13]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009db4:	7b7a      	ldrb	r2, [r7, #13]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32ae      	adds	r2, #174	; 0xae
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d010      	beq.n	8009de6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009dc4:	7b7a      	ldrb	r2, [r7, #13]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32ae      	adds	r2, #174	; 0xae
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009dda:	e004      	b.n	8009de6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fc03 	bl	800a5ea <USBD_CtlError>
              break;
 8009de4:	e000      	b.n	8009de8 <USBD_StdEPReq+0x1c8>
              break;
 8009de6:	bf00      	nop
          }
          break;
 8009de8:	e0ab      	b.n	8009f42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d002      	beq.n	8009dfc <USBD_StdEPReq+0x1dc>
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d032      	beq.n	8009e60 <USBD_StdEPReq+0x240>
 8009dfa:	e097      	b.n	8009f2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <USBD_StdEPReq+0x1f2>
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b80      	cmp	r3, #128	; 0x80
 8009e06:	d004      	beq.n	8009e12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fbed 	bl	800a5ea <USBD_CtlError>
                break;
 8009e10:	e091      	b.n	8009f36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	da0b      	bge.n	8009e32 <USBD_StdEPReq+0x212>
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	3310      	adds	r3, #16
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	3304      	adds	r3, #4
 8009e30:	e00b      	b.n	8009e4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	4413      	add	r3, r2
 8009e48:	3304      	adds	r3, #4
 8009e4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2202      	movs	r2, #2
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fc37 	bl	800a6cc <USBD_CtlSendData>
              break;
 8009e5e:	e06a      	b.n	8009f36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da11      	bge.n	8009e8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	f003 020f 	and.w	r2, r3, #15
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	3324      	adds	r3, #36	; 0x24
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d117      	bne.n	8009eb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fbb0 	bl	800a5ea <USBD_CtlError>
                  break;
 8009e8a:	e054      	b.n	8009f36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 020f 	and.w	r2, r3, #15
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fb9d 	bl	800a5ea <USBD_CtlError>
                  break;
 8009eb0:	e041      	b.n	8009f36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	da0b      	bge.n	8009ed2 <USBD_StdEPReq+0x2b2>
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	3310      	adds	r3, #16
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3304      	adds	r3, #4
 8009ed0:	e00b      	b.n	8009eea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3304      	adds	r3, #4
 8009eea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <USBD_StdEPReq+0x2d8>
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b80      	cmp	r3, #128	; 0x80
 8009ef6:	d103      	bne.n	8009f00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e00e      	b.n	8009f1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f893 	bl	800b030 <USBD_LL_IsStallEP>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e002      	b.n	8009f1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2202      	movs	r2, #2
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fbd1 	bl	800a6cc <USBD_CtlSendData>
              break;
 8009f2a:	e004      	b.n	8009f36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fb5b 	bl	800a5ea <USBD_CtlError>
              break;
 8009f34:	bf00      	nop
          }
          break;
 8009f36:	e004      	b.n	8009f42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb55 	bl	800a5ea <USBD_CtlError>
          break;
 8009f40:	bf00      	nop
      }
      break;
 8009f42:	e005      	b.n	8009f50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fb4f 	bl	800a5ea <USBD_CtlError>
      break;
 8009f4c:	e000      	b.n	8009f50 <USBD_StdEPReq+0x330>
      break;
 8009f4e:	bf00      	nop
  }

  return ret;
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	885b      	ldrh	r3, [r3, #2]
 8009f76:	0a1b      	lsrs	r3, r3, #8
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b06      	cmp	r3, #6
 8009f7e:	f200 8128 	bhi.w	800a1d2 <USBD_GetDescriptor+0x276>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <USBD_GetDescriptor+0x2c>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fa5 	.word	0x08009fa5
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009ffd 	.word	0x08009ffd
 8009f94:	0800a1d3 	.word	0x0800a1d3
 8009f98:	0800a1d3 	.word	0x0800a1d3
 8009f9c:	0800a173 	.word	0x0800a173
 8009fa0:	0800a19f 	.word	0x0800a19f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	7c12      	ldrb	r2, [r2, #16]
 8009fb0:	f107 0108 	add.w	r1, r7, #8
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
 8009fb8:	60f8      	str	r0, [r7, #12]
      break;
 8009fba:	e112      	b.n	800a1e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	7c1b      	ldrb	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10d      	bne.n	8009fe0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	f107 0208 	add.w	r2, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	2202      	movs	r2, #2
 8009fdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fde:	e100      	b.n	800a1e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	f107 0208 	add.w	r2, r7, #8
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	701a      	strb	r2, [r3, #0]
      break;
 8009ffa:	e0f2      	b.n	800a1e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	885b      	ldrh	r3, [r3, #2]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b05      	cmp	r3, #5
 800a004:	f200 80ac 	bhi.w	800a160 <USBD_GetDescriptor+0x204>
 800a008:	a201      	add	r2, pc, #4	; (adr r2, 800a010 <USBD_GetDescriptor+0xb4>)
 800a00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00e:	bf00      	nop
 800a010:	0800a029 	.word	0x0800a029
 800a014:	0800a05d 	.word	0x0800a05d
 800a018:	0800a091 	.word	0x0800a091
 800a01c:	0800a0c5 	.word	0x0800a0c5
 800a020:	0800a0f9 	.word	0x0800a0f9
 800a024:	0800a12d 	.word	0x0800a12d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e091      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 facb 	bl	800a5ea <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e089      	b.n	800a170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e077      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fab1 	bl	800a5ea <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e06f      	b.n	800a170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b2:	e05d      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa97 	bl	800a5ea <USBD_CtlError>
            err++;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c2:	e055      	b.n	800a170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e043      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa7d 	bl	800a5ea <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e03b      	b.n	800a170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e029      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa63 	bl	800a5ea <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e021      	b.n	800a170 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7c12      	ldrb	r2, [r2, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	4610      	mov	r0, r2
 800a14a:	4798      	blx	r3
 800a14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14e:	e00f      	b.n	800a170 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa49 	bl	800a5ea <USBD_CtlError>
            err++;
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	3301      	adds	r3, #1
 800a15c:	72fb      	strb	r3, [r7, #11]
          break;
 800a15e:	e007      	b.n	800a170 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa41 	bl	800a5ea <USBD_CtlError>
          err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a16e:	bf00      	nop
      }
      break;
 800a170:	e037      	b.n	800a1e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7c1b      	ldrb	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a182:	f107 0208 	add.w	r2, r7, #8
 800a186:	4610      	mov	r0, r2
 800a188:	4798      	blx	r3
 800a18a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18c:	e029      	b.n	800a1e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa2a 	bl	800a5ea <USBD_CtlError>
        err++;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	3301      	adds	r3, #1
 800a19a:	72fb      	strb	r3, [r7, #11]
      break;
 800a19c:	e021      	b.n	800a1e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7c1b      	ldrb	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10d      	bne.n	800a1c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	f107 0208 	add.w	r2, r7, #8
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4798      	blx	r3
 800a1b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	2207      	movs	r2, #7
 800a1be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1c0:	e00f      	b.n	800a1e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fa10 	bl	800a5ea <USBD_CtlError>
        err++;
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a1d0:	e007      	b.n	800a1e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fa08 	bl	800a5ea <USBD_CtlError>
      err++;
 800a1da:	7afb      	ldrb	r3, [r7, #11]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e0:	bf00      	nop
  }

  if (err != 0U)
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d11e      	bne.n	800a226 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	88db      	ldrh	r3, [r3, #6]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d016      	beq.n	800a21e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1f0:	893b      	ldrh	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00e      	beq.n	800a214 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	88da      	ldrh	r2, [r3, #6]
 800a1fa:	893b      	ldrh	r3, [r7, #8]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bf28      	it	cs
 800a200:	4613      	movcs	r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a206:	893b      	ldrh	r3, [r7, #8]
 800a208:	461a      	mov	r2, r3
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa5d 	bl	800a6cc <USBD_CtlSendData>
 800a212:	e009      	b.n	800a228 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9e7 	bl	800a5ea <USBD_CtlError>
 800a21c:	e004      	b.n	800a228 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 faae 	bl	800a780 <USBD_CtlSendStatus>
 800a224:	e000      	b.n	800a228 <USBD_GetDescriptor+0x2cc>
    return;
 800a226:	bf00      	nop
  }
}
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop

0800a230 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	889b      	ldrh	r3, [r3, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d131      	bne.n	800a2a6 <USBD_SetAddress+0x76>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	88db      	ldrh	r3, [r3, #6]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d12d      	bne.n	800a2a6 <USBD_SetAddress+0x76>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	2b7f      	cmp	r3, #127	; 0x7f
 800a250:	d829      	bhi.n	800a2a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	885b      	ldrh	r3, [r3, #2]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b03      	cmp	r3, #3
 800a268:	d104      	bne.n	800a274 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f9bc 	bl	800a5ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	e01d      	b.n	800a2b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	7bfa      	ldrb	r2, [r7, #15]
 800a278:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 ff01 	bl	800b088 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa7a 	bl	800a780 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d004      	beq.n	800a29c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29a:	e009      	b.n	800a2b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a4:	e004      	b.n	800a2b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f99e 	bl	800a5ea <USBD_CtlError>
  }
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	4b4e      	ldr	r3, [pc, #312]	; (800a408 <USBD_SetConfig+0x150>)
 800a2ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2d0:	4b4d      	ldr	r3, [pc, #308]	; (800a408 <USBD_SetConfig+0x150>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d905      	bls.n	800a2e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f985 	bl	800a5ea <USBD_CtlError>
    return USBD_FAIL;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e08c      	b.n	800a3fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d002      	beq.n	800a2f6 <USBD_SetConfig+0x3e>
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d029      	beq.n	800a348 <USBD_SetConfig+0x90>
 800a2f4:	e075      	b.n	800a3e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2f6:	4b44      	ldr	r3, [pc, #272]	; (800a408 <USBD_SetConfig+0x150>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d020      	beq.n	800a340 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2fe:	4b42      	ldr	r3, [pc, #264]	; (800a408 <USBD_SetConfig+0x150>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a308:	4b3f      	ldr	r3, [pc, #252]	; (800a408 <USBD_SetConfig+0x150>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fe ffe7 	bl	80092e2 <USBD_SetClassConfig>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d008      	beq.n	800a330 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f962 	bl	800a5ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2202      	movs	r2, #2
 800a32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a32e:	e065      	b.n	800a3fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fa25 	bl	800a780 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a33e:	e05d      	b.n	800a3fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa1d 	bl	800a780 <USBD_CtlSendStatus>
      break;
 800a346:	e059      	b.n	800a3fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a348:	4b2f      	ldr	r3, [pc, #188]	; (800a408 <USBD_SetConfig+0x150>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d112      	bne.n	800a376 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a358:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <USBD_SetConfig+0x150>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a362:	4b29      	ldr	r3, [pc, #164]	; (800a408 <USBD_SetConfig+0x150>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7fe ffd6 	bl	800931a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa06 	bl	800a780 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a374:	e042      	b.n	800a3fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <USBD_SetConfig+0x150>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d02a      	beq.n	800a3da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7fe ffc4 	bl	800931a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a392:	4b1d      	ldr	r3, [pc, #116]	; (800a408 <USBD_SetConfig+0x150>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <USBD_SetConfig+0x150>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7fe ff9d 	bl	80092e2 <USBD_SetClassConfig>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00f      	beq.n	800a3d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f918 	bl	800a5ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fe ffa9 	bl	800931a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3d0:	e014      	b.n	800a3fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f9d4 	bl	800a780 <USBD_CtlSendStatus>
      break;
 800a3d8:	e010      	b.n	800a3fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9d0 	bl	800a780 <USBD_CtlSendStatus>
      break;
 800a3e0:	e00c      	b.n	800a3fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f900 	bl	800a5ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <USBD_SetConfig+0x150>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7fe ff92 	bl	800931a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3fa:	bf00      	nop
  }

  return ret;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	2000048c 	.word	0x2000048c

0800a40c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d004      	beq.n	800a428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f8e2 	bl	800a5ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a426:	e023      	b.n	800a470 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	dc02      	bgt.n	800a43a <USBD_GetConfig+0x2e>
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc03      	bgt.n	800a440 <USBD_GetConfig+0x34>
 800a438:	e015      	b.n	800a466 <USBD_GetConfig+0x5a>
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d00b      	beq.n	800a456 <USBD_GetConfig+0x4a>
 800a43e:	e012      	b.n	800a466 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3308      	adds	r3, #8
 800a44a:	2201      	movs	r2, #1
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f93c 	bl	800a6cc <USBD_CtlSendData>
        break;
 800a454:	e00c      	b.n	800a470 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	2201      	movs	r2, #1
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f934 	bl	800a6cc <USBD_CtlSendData>
        break;
 800a464:	e004      	b.n	800a470 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f8be 	bl	800a5ea <USBD_CtlError>
        break;
 800a46e:	bf00      	nop
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d81e      	bhi.n	800a4ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	88db      	ldrh	r3, [r3, #6]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d004      	beq.n	800a4a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f8a5 	bl	800a5ea <USBD_CtlError>
        break;
 800a4a0:	e01a      	b.n	800a4d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f043 0202 	orr.w	r2, r3, #2
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f900 	bl	800a6cc <USBD_CtlSendData>
      break;
 800a4cc:	e004      	b.n	800a4d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f88a 	bl	800a5ea <USBD_CtlError>
      break;
 800a4d6:	bf00      	nop
  }
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	885b      	ldrh	r3, [r3, #2]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d107      	bne.n	800a502 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f940 	bl	800a780 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a500:	e013      	b.n	800a52a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d10b      	bne.n	800a522 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	889b      	ldrh	r3, [r3, #4]
 800a50e:	0a1b      	lsrs	r3, r3, #8
 800a510:	b29b      	uxth	r3, r3
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f930 	bl	800a780 <USBD_CtlSendStatus>
}
 800a520:	e003      	b.n	800a52a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f860 	bl	800a5ea <USBD_CtlError>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a542:	b2db      	uxtb	r3, r3
 800a544:	3b01      	subs	r3, #1
 800a546:	2b02      	cmp	r3, #2
 800a548:	d80b      	bhi.n	800a562 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d10c      	bne.n	800a56c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f910 	bl	800a780 <USBD_CtlSendStatus>
      }
      break;
 800a560:	e004      	b.n	800a56c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f840 	bl	800a5ea <USBD_CtlError>
      break;
 800a56a:	e000      	b.n	800a56e <USBD_ClrFeature+0x3c>
      break;
 800a56c:	bf00      	nop
  }
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3301      	adds	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fa41 	bl	8009a28 <SWAPBYTE>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7ff fa34 	bl	8009a28 <SWAPBYTE>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff fa27 	bl	8009a28 <SWAPBYTE>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	461a      	mov	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	80da      	strh	r2, [r3, #6]
}
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5f4:	2180      	movs	r1, #128	; 0x80
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fcdc 	bl	800afb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fcd8 	bl	800afb4 <USBD_LL_StallEP>
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a618:	2300      	movs	r3, #0
 800a61a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d036      	beq.n	800a690 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a626:	6938      	ldr	r0, [r7, #16]
 800a628:	f000 f836 	bl	800a698 <USBD_GetLen>
 800a62c:	4603      	mov	r3, r0
 800a62e:	3301      	adds	r3, #1
 800a630:	b29b      	uxth	r3, r3
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	4413      	add	r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7812      	ldrb	r2, [r2, #0]
 800a644:	701a      	strb	r2, [r3, #0]
  idx++;
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	3301      	adds	r3, #1
 800a64a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	2203      	movs	r2, #3
 800a654:	701a      	strb	r2, [r3, #0]
  idx++;
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	3301      	adds	r3, #1
 800a65a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a65c:	e013      	b.n	800a686 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	4413      	add	r3, r2
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	7812      	ldrb	r2, [r2, #0]
 800a668:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	3301      	adds	r3, #1
 800a66e:	613b      	str	r3, [r7, #16]
    idx++;
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	3301      	adds	r3, #1
 800a674:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	4413      	add	r3, r2
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a680:	7dfb      	ldrb	r3, [r7, #23]
 800a682:	3301      	adds	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e7      	bne.n	800a65e <USBD_GetString+0x52>
 800a68e:	e000      	b.n	800a692 <USBD_GetString+0x86>
    return;
 800a690:	bf00      	nop
  }
}
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a6a8:	e005      	b.n	800a6b6 <USBD_GetLen+0x1e>
  {
    len++;
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1f5      	bne.n	800a6aa <USBD_GetLen+0x12>
  }

  return len;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fce7 	bl	800b0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fcd6 	bl	800b0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2203      	movs	r2, #3
 800a734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	2100      	movs	r1, #0
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 fcda 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	2100      	movs	r1, #0
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fcc9 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2204      	movs	r2, #4
 800a78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a790:	2300      	movs	r3, #0
 800a792:	2200      	movs	r2, #0
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fc95 	bl	800b0c6 <USBD_LL_Transmit>

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fca3 	bl	800b108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4912      	ldr	r1, [pc, #72]	; (800a81c <MX_USB_DEVICE_Init+0x50>)
 800a7d4:	4812      	ldr	r0, [pc, #72]	; (800a820 <MX_USB_DEVICE_Init+0x54>)
 800a7d6:	f7fe fd07 	bl	80091e8 <USBD_Init>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7e0:	f7f6 ff58 	bl	8001694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7e4:	490f      	ldr	r1, [pc, #60]	; (800a824 <MX_USB_DEVICE_Init+0x58>)
 800a7e6:	480e      	ldr	r0, [pc, #56]	; (800a820 <MX_USB_DEVICE_Init+0x54>)
 800a7e8:	f7fe fd2e 	bl	8009248 <USBD_RegisterClass>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7f2:	f7f6 ff4f 	bl	8001694 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7f6:	490c      	ldr	r1, [pc, #48]	; (800a828 <MX_USB_DEVICE_Init+0x5c>)
 800a7f8:	4809      	ldr	r0, [pc, #36]	; (800a820 <MX_USB_DEVICE_Init+0x54>)
 800a7fa:	f7fe fc1f 	bl	800903c <USBD_CDC_RegisterInterface>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a804:	f7f6 ff46 	bl	8001694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a808:	4805      	ldr	r0, [pc, #20]	; (800a820 <MX_USB_DEVICE_Init+0x54>)
 800a80a:	f7fe fd53 	bl	80092b4 <USBD_Start>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a814:	f7f6 ff3e 	bl	8001694 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a818:	bf00      	nop
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200001b0 	.word	0x200001b0
 800a820:	20000490 	.word	0x20000490
 800a824:	2000011c 	.word	0x2000011c
 800a828:	2000019c 	.word	0x2000019c

0800a82c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a830:	2200      	movs	r2, #0
 800a832:	4905      	ldr	r1, [pc, #20]	; (800a848 <CDC_Init_FS+0x1c>)
 800a834:	4805      	ldr	r0, [pc, #20]	; (800a84c <CDC_Init_FS+0x20>)
 800a836:	f7fe fc1b 	bl	8009070 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a83a:	4905      	ldr	r1, [pc, #20]	; (800a850 <CDC_Init_FS+0x24>)
 800a83c:	4803      	ldr	r0, [pc, #12]	; (800a84c <CDC_Init_FS+0x20>)
 800a83e:	f7fe fc39 	bl	80090b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a842:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a844:	4618      	mov	r0, r3
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20000b54 	.word	0x20000b54
 800a84c:	20000490 	.word	0x20000490
 800a850:	2000076c 	.word	0x2000076c

0800a854 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	4603      	mov	r3, r0
 800a86c:	6039      	str	r1, [r7, #0]
 800a86e:	71fb      	strb	r3, [r7, #7]
 800a870:	4613      	mov	r3, r2
 800a872:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	2b23      	cmp	r3, #35	; 0x23
 800a878:	d84a      	bhi.n	800a910 <CDC_Control_FS+0xac>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <CDC_Control_FS+0x1c>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a911 	.word	0x0800a911
 800a884:	0800a911 	.word	0x0800a911
 800a888:	0800a911 	.word	0x0800a911
 800a88c:	0800a911 	.word	0x0800a911
 800a890:	0800a911 	.word	0x0800a911
 800a894:	0800a911 	.word	0x0800a911
 800a898:	0800a911 	.word	0x0800a911
 800a89c:	0800a911 	.word	0x0800a911
 800a8a0:	0800a911 	.word	0x0800a911
 800a8a4:	0800a911 	.word	0x0800a911
 800a8a8:	0800a911 	.word	0x0800a911
 800a8ac:	0800a911 	.word	0x0800a911
 800a8b0:	0800a911 	.word	0x0800a911
 800a8b4:	0800a911 	.word	0x0800a911
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a911 	.word	0x0800a911
 800a8c0:	0800a911 	.word	0x0800a911
 800a8c4:	0800a911 	.word	0x0800a911
 800a8c8:	0800a911 	.word	0x0800a911
 800a8cc:	0800a911 	.word	0x0800a911
 800a8d0:	0800a911 	.word	0x0800a911
 800a8d4:	0800a911 	.word	0x0800a911
 800a8d8:	0800a911 	.word	0x0800a911
 800a8dc:	0800a911 	.word	0x0800a911
 800a8e0:	0800a911 	.word	0x0800a911
 800a8e4:	0800a911 	.word	0x0800a911
 800a8e8:	0800a911 	.word	0x0800a911
 800a8ec:	0800a911 	.word	0x0800a911
 800a8f0:	0800a911 	.word	0x0800a911
 800a8f4:	0800a911 	.word	0x0800a911
 800a8f8:	0800a911 	.word	0x0800a911
 800a8fc:	0800a911 	.word	0x0800a911
 800a900:	0800a911 	.word	0x0800a911
 800a904:	0800a911 	.word	0x0800a911
 800a908:	0800a911 	.word	0x0800a911
 800a90c:	0800a911 	.word	0x0800a911
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a910:	bf00      	nop
  }

  return (USBD_OK);
 800a912:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	4808      	ldr	r0, [pc, #32]	; (800a950 <CDC_Receive_FS+0x30>)
 800a92e:	f7fe fbc1 	bl	80090b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a932:	4807      	ldr	r0, [pc, #28]	; (800a950 <CDC_Receive_FS+0x30>)
 800a934:	f7fe fc22 	bl	800917c <USBD_CDC_ReceivePacket>
  llegaDato(Buf, Len[0]);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7f6 fde2 	bl	8001508 <llegaDato>
  return (USBD_OK);
 800a944:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000490 	.word	0x20000490

0800a954 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a964:	4b0d      	ldr	r3, [pc, #52]	; (800a99c <CDC_Transmit_FS+0x48>)
 800a966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a96a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a976:	2301      	movs	r3, #1
 800a978:	e00b      	b.n	800a992 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	461a      	mov	r2, r3
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4806      	ldr	r0, [pc, #24]	; (800a99c <CDC_Transmit_FS+0x48>)
 800a982:	f7fe fb75 	bl	8009070 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a986:	4805      	ldr	r0, [pc, #20]	; (800a99c <CDC_Transmit_FS+0x48>)
 800a988:	f7fe fbb2 	bl	80090f0 <USBD_CDC_TransmitPacket>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000490 	.word	0x20000490

0800a9a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6039      	str	r1, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2212      	movs	r2, #18
 800a9d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9d6:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	200001cc 	.word	0x200001cc

0800a9e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	6039      	str	r1, [r7, #0]
 800a9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9fa:	4b03      	ldr	r3, [pc, #12]	; (800aa08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	200001e0 	.word	0x200001e0

0800aa0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	4907      	ldr	r1, [pc, #28]	; (800aa40 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa22:	4808      	ldr	r0, [pc, #32]	; (800aa44 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa24:	f7ff fdf2 	bl	800a60c <USBD_GetString>
 800aa28:	e004      	b.n	800aa34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4904      	ldr	r1, [pc, #16]	; (800aa40 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa2e:	4805      	ldr	r0, [pc, #20]	; (800aa44 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa30:	f7ff fdec 	bl	800a60c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000f3c 	.word	0x20000f3c
 800aa44:	0800b26c 	.word	0x0800b26c

0800aa48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	6039      	str	r1, [r7, #0]
 800aa52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	4904      	ldr	r1, [pc, #16]	; (800aa68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa58:	4804      	ldr	r0, [pc, #16]	; (800aa6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa5a:	f7ff fdd7 	bl	800a60c <USBD_GetString>
  return USBD_StrDesc;
 800aa5e:	4b02      	ldr	r3, [pc, #8]	; (800aa68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20000f3c 	.word	0x20000f3c
 800aa6c:	0800b284 	.word	0x0800b284

0800aa70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	6039      	str	r1, [r7, #0]
 800aa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	221a      	movs	r2, #26
 800aa80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa82:	f000 f843 	bl	800ab0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa86:	4b02      	ldr	r3, [pc, #8]	; (800aa90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	200001e4 	.word	0x200001e4

0800aa94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d105      	bne.n	800aab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	4907      	ldr	r1, [pc, #28]	; (800aac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaaa:	4808      	ldr	r0, [pc, #32]	; (800aacc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaac:	f7ff fdae 	bl	800a60c <USBD_GetString>
 800aab0:	e004      	b.n	800aabc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	4904      	ldr	r1, [pc, #16]	; (800aac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aab6:	4805      	ldr	r0, [pc, #20]	; (800aacc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aab8:	f7ff fda8 	bl	800a60c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20000f3c 	.word	0x20000f3c
 800aacc:	0800b298 	.word	0x0800b298

0800aad0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	6039      	str	r1, [r7, #0]
 800aada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d105      	bne.n	800aaee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	4907      	ldr	r1, [pc, #28]	; (800ab04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aae6:	4808      	ldr	r0, [pc, #32]	; (800ab08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aae8:	f7ff fd90 	bl	800a60c <USBD_GetString>
 800aaec:	e004      	b.n	800aaf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4904      	ldr	r1, [pc, #16]	; (800ab04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaf2:	4805      	ldr	r0, [pc, #20]	; (800ab08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf4:	f7ff fd8a 	bl	800a60c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20000f3c 	.word	0x20000f3c
 800ab08:	0800b2a4 	.word	0x0800b2a4

0800ab0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <Get_SerialNum+0x44>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <Get_SerialNum+0x48>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <Get_SerialNum+0x4c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab32:	2208      	movs	r2, #8
 800ab34:	4909      	ldr	r1, [pc, #36]	; (800ab5c <Get_SerialNum+0x50>)
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 f814 	bl	800ab64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	4908      	ldr	r1, [pc, #32]	; (800ab60 <Get_SerialNum+0x54>)
 800ab40:	68b8      	ldr	r0, [r7, #8]
 800ab42:	f000 f80f 	bl	800ab64 <IntToUnicode>
  }
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	1fff7a10 	.word	0x1fff7a10
 800ab54:	1fff7a14 	.word	0x1fff7a14
 800ab58:	1fff7a18 	.word	0x1fff7a18
 800ab5c:	200001e6 	.word	0x200001e6
 800ab60:	200001f6 	.word	0x200001f6

0800ab64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]
 800ab7a:	e027      	b.n	800abcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0f1b      	lsrs	r3, r3, #28
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	d80b      	bhi.n	800ab9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	0f1b      	lsrs	r3, r3, #28
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	440b      	add	r3, r1
 800ab94:	3230      	adds	r2, #48	; 0x30
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	e00a      	b.n	800abb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	0f1b      	lsrs	r3, r3, #28
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	7dfb      	ldrb	r3, [r7, #23]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4619      	mov	r1, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	440b      	add	r3, r1
 800abac:	3237      	adds	r2, #55	; 0x37
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	3301      	adds	r3, #1
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	3301      	adds	r3, #1
 800abca:	75fb      	strb	r3, [r7, #23]
 800abcc:	7dfa      	ldrb	r2, [r7, #23]
 800abce:	79fb      	ldrb	r3, [r7, #7]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d3d3      	bcc.n	800ab7c <IntToUnicode+0x18>
  }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08a      	sub	sp, #40	; 0x28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abec:	f107 0314 	add.w	r3, r7, #20
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	605a      	str	r2, [r3, #4]
 800abf6:	609a      	str	r2, [r3, #8]
 800abf8:	60da      	str	r2, [r3, #12]
 800abfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac04:	d13a      	bne.n	800ac7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac06:	2300      	movs	r3, #0
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0e:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac10:	f043 0301 	orr.w	r3, r3, #1
 800ac14:	6313      	str	r3, [r2, #48]	; 0x30
 800ac16:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	613b      	str	r3, [r7, #16]
 800ac20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac28:	2302      	movs	r3, #2
 800ac2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac30:	2303      	movs	r3, #3
 800ac32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac34:	230a      	movs	r3, #10
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac38:	f107 0314 	add.w	r3, r7, #20
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4812      	ldr	r0, [pc, #72]	; (800ac88 <HAL_PCD_MspInit+0xa4>)
 800ac40:	f7f8 f8f0 	bl	8002e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac44:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	4a0e      	ldr	r2, [pc, #56]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac4e:	6353      	str	r3, [r2, #52]	; 0x34
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac58:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac5e:	6453      	str	r3, [r2, #68]	; 0x44
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <HAL_PCD_MspInit+0xa0>)
 800ac62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2100      	movs	r1, #0
 800ac70:	2043      	movs	r0, #67	; 0x43
 800ac72:	f7f7 fc9e 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac76:	2043      	movs	r0, #67	; 0x43
 800ac78:	f7f7 fcb7 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	3728      	adds	r7, #40	; 0x28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40023800 	.word	0x40023800
 800ac88:	40020000 	.word	0x40020000

0800ac8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fe fb53 	bl	800934e <USBD_LL_SetupStage>
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	4619      	mov	r1, r3
 800acda:	f7fe fb8d 	bl	80093f8 <USBD_LL_DataOutStage>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	334c      	adds	r3, #76	; 0x4c
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f7fe fc26 	bl	800955e <USBD_LL_DataInStage>
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fd5a 	bl	80097e2 <USBD_LL_SOF>
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d001      	beq.n	800ad4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad4a:	f7f6 fca3 	bl	8001694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad54:	7bfa      	ldrb	r2, [r7, #15]
 800ad56:	4611      	mov	r1, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fd04 	bl	8009766 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fe fcac 	bl	80096c2 <USBD_LL_Reset>
}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fcff 	bl	8009786 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	6812      	ldr	r2, [r2, #0]
 800ad96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ada8:	4b04      	ldr	r3, [pc, #16]	; (800adbc <HAL_PCD_SuspendCallback+0x48>)
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	4a03      	ldr	r2, [pc, #12]	; (800adbc <HAL_PCD_SuspendCallback+0x48>)
 800adae:	f043 0306 	orr.w	r3, r3, #6
 800adb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	e000ed00 	.word	0xe000ed00

0800adc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fcef 	bl	80097b2 <USBD_LL_Resume>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adee:	78fa      	ldrb	r2, [r7, #3]
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fd47 	bl	8009886 <USBD_LL_IsoOUTIncomplete>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae12:	78fa      	ldrb	r2, [r7, #3]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fd03 	bl	8009822 <USBD_LL_IsoINIncomplete>
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fd59 	bl	80098ea <USBD_LL_DevConnected>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fd56 	bl	8009900 <USBD_LL_DevDisconnected>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d13c      	bne.n	800aee6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae6c:	4a20      	ldr	r2, [pc, #128]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae7c:	4b1c      	ldr	r3, [pc, #112]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae84:	4b1a      	ldr	r3, [pc, #104]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae86:	2204      	movs	r2, #4
 800ae88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae8a:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae90:	4b17      	ldr	r3, [pc, #92]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae96:	4b16      	ldr	r3, [pc, #88]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae98:	2202      	movs	r2, #2
 800ae9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae9c:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <USBD_LL_Init+0x94>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aea2:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <USBD_LL_Init+0x94>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aea8:	4b11      	ldr	r3, [pc, #68]	; (800aef0 <USBD_LL_Init+0x94>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aeae:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <USBD_LL_Init+0x94>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <USBD_LL_Init+0x94>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aeba:	480d      	ldr	r0, [pc, #52]	; (800aef0 <USBD_LL_Init+0x94>)
 800aebc:	f7f8 f969 	bl	8003192 <HAL_PCD_Init>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aec6:	f7f6 fbe5 	bl	8001694 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aeca:	2180      	movs	r1, #128	; 0x80
 800aecc:	4808      	ldr	r0, [pc, #32]	; (800aef0 <USBD_LL_Init+0x94>)
 800aece:	f7f9 fbc0 	bl	8004652 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aed2:	2240      	movs	r2, #64	; 0x40
 800aed4:	2100      	movs	r1, #0
 800aed6:	4806      	ldr	r0, [pc, #24]	; (800aef0 <USBD_LL_Init+0x94>)
 800aed8:	f7f9 fb74 	bl	80045c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aedc:	2280      	movs	r2, #128	; 0x80
 800aede:	2101      	movs	r1, #1
 800aee0:	4803      	ldr	r0, [pc, #12]	; (800aef0 <USBD_LL_Init+0x94>)
 800aee2:	f7f9 fb6f 	bl	80045c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	2000113c 	.word	0x2000113c

0800aef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f8 fa5e 	bl	80033cc <HAL_PCD_Start>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f942 	bl	800b1a0 <USBD_Get_USB_Status>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af20:	7bbb      	ldrb	r3, [r7, #14]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	461a      	mov	r2, r3
 800af38:	4603      	mov	r3, r0
 800af3a:	70fb      	strb	r3, [r7, #3]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70bb      	strb	r3, [r7, #2]
 800af40:	4613      	mov	r3, r2
 800af42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af52:	78bb      	ldrb	r3, [r7, #2]
 800af54:	883a      	ldrh	r2, [r7, #0]
 800af56:	78f9      	ldrb	r1, [r7, #3]
 800af58:	f7f8 ff2f 	bl	8003dba <HAL_PCD_EP_Open>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 f91c 	bl	800b1a0 <USBD_Get_USB_Status>
 800af68:	4603      	mov	r3, r0
 800af6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af90:	78fa      	ldrb	r2, [r7, #3]
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f7f8 ff78 	bl	8003e8a <HAL_PCD_EP_Close>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f8fd 	bl	800b1a0 <USBD_Get_USB_Status>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afce:	78fa      	ldrb	r2, [r7, #3]
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7f9 f850 	bl	8004078 <HAL_PCD_EP_SetStall>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 f8de 	bl	800b1a0 <USBD_Get_USB_Status>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	4611      	mov	r1, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f7f9 f895 	bl	8004140 <HAL_PCD_EP_ClrStall>
 800b016:	4603      	mov	r3, r0
 800b018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 f8bf 	bl	800b1a0 <USBD_Get_USB_Status>
 800b022:	4603      	mov	r3, r0
 800b024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b026:	7bbb      	ldrb	r3, [r7, #14]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	da0b      	bge.n	800b064 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b04c:	78fb      	ldrb	r3, [r7, #3]
 800b04e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b052:	68f9      	ldr	r1, [r7, #12]
 800b054:	4613      	mov	r3, r2
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	333e      	adds	r3, #62	; 0x3e
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	e00b      	b.n	800b07c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b064:	78fb      	ldrb	r3, [r7, #3]
 800b066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	4613      	mov	r3, r2
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	440b      	add	r3, r1
 800b076:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b07a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f8 fe62 	bl	8003d70 <HAL_PCD_SetAddress>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 f874 	bl	800b1a0 <USBD_Get_USB_Status>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b086      	sub	sp, #24
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0e4:	7af9      	ldrb	r1, [r7, #11]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	f7f8 ff7b 	bl	8003fe4 <HAL_PCD_EP_Transmit>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f853 	bl	800b1a0 <USBD_Get_USB_Status>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	607a      	str	r2, [r7, #4]
 800b112:	603b      	str	r3, [r7, #0]
 800b114:	460b      	mov	r3, r1
 800b116:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b126:	7af9      	ldrb	r1, [r7, #11]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	f7f8 fef7 	bl	8003f1e <HAL_PCD_EP_Receive>
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f832 	bl	800b1a0 <USBD_Get_USB_Status>
 800b13c:	4603      	mov	r3, r0
 800b13e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b140:	7dbb      	ldrb	r3, [r7, #22]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b15c:	78fa      	ldrb	r2, [r7, #3]
 800b15e:	4611      	mov	r1, r2
 800b160:	4618      	mov	r0, r3
 800b162:	f7f8 ff27 	bl	8003fb4 <HAL_PCD_EP_GetRxCount>
 800b166:	4603      	mov	r3, r0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b178:	4b03      	ldr	r3, [pc, #12]	; (800b188 <USBD_static_malloc+0x18>)
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	20001648 	.word	0x20001648

0800b18c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]

}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d817      	bhi.n	800b1e4 <USBD_Get_USB_Status+0x44>
 800b1b4:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <USBD_Get_USB_Status+0x1c>)
 800b1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ba:	bf00      	nop
 800b1bc:	0800b1cd 	.word	0x0800b1cd
 800b1c0:	0800b1d3 	.word	0x0800b1d3
 800b1c4:	0800b1d9 	.word	0x0800b1d9
 800b1c8:	0800b1df 	.word	0x0800b1df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d0:	e00b      	b.n	800b1ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1d2:	2303      	movs	r3, #3
 800b1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d6:	e008      	b.n	800b1ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	73fb      	strb	r3, [r7, #15]
    break;
 800b1dc:	e005      	b.n	800b1ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e2:	e002      	b.n	800b1ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e8:	bf00      	nop
  }
  return usb_status;
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <__libc_init_array>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	4d0d      	ldr	r5, [pc, #52]	; (800b230 <__libc_init_array+0x38>)
 800b1fc:	4c0d      	ldr	r4, [pc, #52]	; (800b234 <__libc_init_array+0x3c>)
 800b1fe:	1b64      	subs	r4, r4, r5
 800b200:	10a4      	asrs	r4, r4, #2
 800b202:	2600      	movs	r6, #0
 800b204:	42a6      	cmp	r6, r4
 800b206:	d109      	bne.n	800b21c <__libc_init_array+0x24>
 800b208:	4d0b      	ldr	r5, [pc, #44]	; (800b238 <__libc_init_array+0x40>)
 800b20a:	4c0c      	ldr	r4, [pc, #48]	; (800b23c <__libc_init_array+0x44>)
 800b20c:	f000 f820 	bl	800b250 <_init>
 800b210:	1b64      	subs	r4, r4, r5
 800b212:	10a4      	asrs	r4, r4, #2
 800b214:	2600      	movs	r6, #0
 800b216:	42a6      	cmp	r6, r4
 800b218:	d105      	bne.n	800b226 <__libc_init_array+0x2e>
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b220:	4798      	blx	r3
 800b222:	3601      	adds	r6, #1
 800b224:	e7ee      	b.n	800b204 <__libc_init_array+0xc>
 800b226:	f855 3b04 	ldr.w	r3, [r5], #4
 800b22a:	4798      	blx	r3
 800b22c:	3601      	adds	r6, #1
 800b22e:	e7f2      	b.n	800b216 <__libc_init_array+0x1e>
 800b230:	0800b2dc 	.word	0x0800b2dc
 800b234:	0800b2dc 	.word	0x0800b2dc
 800b238:	0800b2dc 	.word	0x0800b2dc
 800b23c:	0800b2e0 	.word	0x0800b2e0

0800b240 <memset>:
 800b240:	4402      	add	r2, r0
 800b242:	4603      	mov	r3, r0
 800b244:	4293      	cmp	r3, r2
 800b246:	d100      	bne.n	800b24a <memset+0xa>
 800b248:	4770      	bx	lr
 800b24a:	f803 1b01 	strb.w	r1, [r3], #1
 800b24e:	e7f9      	b.n	800b244 <memset+0x4>

0800b250 <_init>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr

0800b25c <_fini>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr
